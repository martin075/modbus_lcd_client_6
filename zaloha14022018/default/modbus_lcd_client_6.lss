
modbus_lcd_client_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00002528  000025bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002528  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  00800116  00800116  000025d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002630  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025ea  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8f  00000000  00000000  00004cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010aa  00000000  00000000  00005c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a4  00000000  00000000  00006d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008c0  00000000  00000000  000072d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020fb  00000000  00000000  00007b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00009c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__ctors_end>
       4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       8:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
       c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      10:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      14:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      20:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      24:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      28:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      2c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      30:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      34:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      38:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      3c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      40:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      44:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      48:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      4c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      50:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      54:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      58:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      60:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      64:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <bmp085_getcalibration+0xd2>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__trampolines_end>:
      ea:	68 50       	subi	r22, 0x08	; 8
      ec:	61 00       	.word	0x0061	; ????

000000ee <__c.2501>:
      ee:	53 36 3a 00                                         S6:.

000000f2 <__c.2499>:
      f2:	53 35 3a 00                                         S5:.

000000f6 <__c.2497>:
      f6:	53 34 3a 00                                         S4:.

000000fa <__c.2495>:
      fa:	53 33 3a 00                                         S3:.

000000fe <__c.2493>:
      fe:	53 32 3a 00                                         S2:.

00000102 <__c.2491>:
     102:	53 31 3a 00                                         S1:.

00000106 <__c.2483>:
     106:	2d 2d 2d 2d 00                                      ----.

0000010b <__c.2481>:
     10b:	4b 34 3a 00                                         K4:.

0000010f <__c.2479>:
     10f:	2d 2d 2d 2d 00                                      ----.

00000114 <__c.2477>:
     114:	4b 33 3a 00                                         K3:.

00000118 <__c.2475>:
     118:	2d 2d 2d 2d 00                                      ----.

0000011d <__c.2473>:
     11d:	4b 32 3a 00                                         K2:.

00000121 <__c.2471>:
     121:	2d 2d 2d 2d 00                                      ----.

00000126 <__c.2469>:
     126:	4b 31 3a 00                                         K1:.

0000012a <__c.2467>:
     12a:	2d 2d 2d 2d 00                                      ----.

0000012f <__c.2465>:
     12f:	4f 4b 00                                            OK.

00000132 <__c.2463>:
     132:	53 34 3a 00                                         S4:.

00000136 <__c.2461>:
     136:	2d 2d 2d 2d 00                                      ----.

0000013b <__c.2459>:
     13b:	4f 4b 00                                            OK.

0000013e <__c.2457>:
     13e:	53 33 3a 00                                         S3:.

00000142 <__c.2455>:
     142:	2d 2d 2d 2d 00                                      ----.

00000147 <__c.2453>:
     147:	4f 4b 00                                            OK.

0000014a <__c.2451>:
     14a:	53 32 3a 00                                         S2:.

0000014e <__c.2449>:
     14e:	2d 2d 2d 2d 00                                      ----.

00000153 <__c.2447>:
     153:	4f 4b 00                                            OK.

00000156 <__c.2445>:
     156:	53 31 3a 00                                         S1:.

0000015a <__c.2443>:
     15a:	44 53 31 38 62 32 30 00                             DS18b20.

00000162 <__c.2441>:
     162:	6b 6f 6e 74 72 6f 6c 61 20 73 6e 69 6d 61 63 6f     kontrola snimaco
     172:	76 00                                               v.

00000174 <__c.2439>:
     174:	20 6d 6f 64 62 75 73 20 74 65 6d 70 20 30 2e 31      modbus temp 0.1
	...

00000185 <userChar>:
     185:	18 18 06 09 08 08 09 06 07 08 13 14 14 13 08 07     ................
     195:	00 10 08 08 08 08 10 00 00                          .........

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	d8 e0       	ldi	r29, 0x08	; 8
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	e8 e2       	ldi	r30, 0x28	; 40
     1b2:	f5 e2       	ldi	r31, 0x25	; 37
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	a6 31       	cpi	r26, 0x16	; 22
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	a6 e1       	ldi	r26, 0x16	; 22
     1c4:	b1 e0       	ldi	r27, 0x01	; 1
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	a0 3c       	cpi	r26, 0xC0	; 192
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	0e 94 ba 07 	call	0xf74	; 0xf74 <main>
     1d4:	0c 94 92 12 	jmp	0x2524	; 0x2524 <_exit>

000001d8 <__bad_interrupt>:
     1d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001dc <toggle_e>:

#if LCD_IO_MODE
	/* toggle Enable Pin to initiate write */
	static void toggle_e( void)
	{
		lcd_e_high();
     1dc:	5f 9a       	sbi	0x0b, 7	; 11
		lcd_e_delay();
     1de:	00 c0       	rjmp	.+0      	; 0x1e0 <toggle_e+0x4>
		lcd_e_low();
     1e0:	5f 98       	cbi	0x0b, 7	; 11
     1e2:	08 95       	ret

000001e4 <lcd_write>:
				 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
	static void lcd_write( uint8_t data, uint8_t rs) 
	{
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	1f 92       	push	r1
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
		unsigned char dataBits ;


		if( rs)	/* write data		( RS=1, RW=0) */
     1f0:	66 23       	and	r22, r22
     1f2:	11 f0       	breq	.+4      	; 0x1f8 <lcd_write+0x14>
		{
			lcd_rs_high();
     1f4:	2c 9a       	sbi	0x05, 4	; 5
     1f6:	01 c0       	rjmp	.+2      	; 0x1fa <lcd_write+0x16>
		}
		else	/* write instruction ( RS=0, RW=0) */
		{
			lcd_rs_low();
     1f8:	2c 98       	cbi	0x05, 4	; 5
		}
		lcd_rw_low();
     1fa:	2d 98       	cbi	0x05, 5	; 5

		if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
				&& (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
		{
			/* configure data pins as output */
			DDR( LCD_DATA0_PORT) |= 0x0F;
     1fc:	94 b1       	in	r25, 0x04	; 4
     1fe:	9f 60       	ori	r25, 0x0F	; 15
     200:	94 b9       	out	0x04, r25	; 4

			/* output high nibble first */
			dataBits = LCD_DATA0_PORT & 0xF0;
     202:	95 b1       	in	r25, 0x05	; 5
     204:	19 2f       	mov	r17, r25
     206:	10 7f       	andi	r17, 0xF0	; 240
			LCD_DATA0_PORT = dataBits | ((data>>4) & 0x0F);
     208:	98 2f       	mov	r25, r24
     20a:	92 95       	swap	r25
     20c:	9f 70       	andi	r25, 0x0F	; 15
     20e:	91 2b       	or	r25, r17
     210:	95 b9       	out	0x05, r25	; 5
			lcd_e_toggle();
     212:	89 83       	std	Y+1, r24	; 0x01
     214:	0e 94 ee 00 	call	0x1dc	; 0x1dc <toggle_e>

			/* output low nibble */
			LCD_DATA0_PORT = dataBits | (data & 0x0F);
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	8f 70       	andi	r24, 0x0F	; 15
     21c:	81 2b       	or	r24, r17
     21e:	85 b9       	out	0x05, r24	; 5
			lcd_e_toggle();
     220:	0e 94 ee 00 	call	0x1dc	; 0x1dc <toggle_e>

			/* all data pins high ( inactive) */
			LCD_DATA0_PORT = dataBits | 0x0F;
     224:	1f 60       	ori	r17, 0x0F	; 15
     226:	15 b9       	out	0x05, r17	; 5
			LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);
			LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);
			LCD_DATA2_PORT |= _BV( LCD_DATA2_PIN);
			LCD_DATA3_PORT |= _BV( LCD_DATA3_PIN);
		}
	}
     228:	0f 90       	pop	r0
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	08 95       	ret

00000232 <lcd_read.constprop.0>:
	
	
	if( rs)
		lcd_rs_high();						/* RS=1: read data	  */
	else
		lcd_rs_low();						/* RS=0: read busy flag */
     232:	2c 98       	cbi	0x05, 4	; 5
	lcd_rw_high();							/* RW=1  read mode	  */
     234:	2d 9a       	sbi	0x05, 5	; 5
	
	if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
	  && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
     236:	84 b1       	in	r24, 0x04	; 4
     238:	80 7f       	andi	r24, 0xF0	; 240
     23a:	84 b9       	out	0x04, r24	; 4
		
		lcd_e_high();
     23c:	5f 9a       	sbi	0x0b, 7	; 11
		lcd_e_delay();		
     23e:	00 c0       	rjmp	.+0      	; 0x240 <lcd_read.constprop.0+0xe>
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     240:	93 b1       	in	r25, 0x03	; 3
		lcd_e_low();
     242:	5f 98       	cbi	0x0b, 7	; 11
		
		lcd_e_delay();						/* Enable 500ns low		*/
     244:	00 c0       	rjmp	.+0      	; 0x246 <lcd_read.constprop.0+0x14>
		
		lcd_e_high();
     246:	5f 9a       	sbi	0x0b, 7	; 11
		lcd_e_delay();
     248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_read.constprop.0+0x18>
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
     24a:	23 b1       	in	r18, 0x03	; 3
     24c:	2f 70       	andi	r18, 0x0F	; 15
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
		
		lcd_e_high();
		lcd_e_delay();		
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     24e:	89 2f       	mov	r24, r25
     250:	82 95       	swap	r24
     252:	80 7f       	andi	r24, 0xF0	; 240
		lcd_e_delay();						/* Enable 500ns low		*/
		
		lcd_e_high();
		lcd_e_delay();
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
		lcd_e_low();
     254:	5f 98       	cbi	0x0b, 7	; 11
		if( PIN( LCD_DATA2_PORT) & _BV( LCD_DATA2_PIN)) data |= 0x04;
		if( PIN( LCD_DATA3_PORT) & _BV( LCD_DATA3_PIN)) data |= 0x08;		
		lcd_e_low();
	}
	return data;
}
     256:	82 2b       	or	r24, r18
     258:	08 95       	ret

0000025a <lcd_waitbusy>:

{
	register uint8_t c;
	
	/* wait until busy flag is cleared */
	while ( (c = lcd_read( 0)) & (1 << LCD_BUSY)) {}
     25a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_read.constprop.0>
     25e:	87 fd       	sbrc	r24, 7
     260:	fc cf       	rjmp	.-8      	; 0x25a <lcd_waitbusy>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     262:	88 e0       	ldi	r24, 0x08	; 8
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <lcd_waitbusy+0xc>
	
	/* the address counter is updated 4us after the busy flag is cleared */
	delay( 2);

	/* now read the address counter */
	return ( lcd_read( 0));  // return address counter
     26a:	0c 94 19 01 	jmp	0x232	; 0x232 <lcd_read.constprop.0>

0000026e <lcd_command>:
Send LCD controller instruction command
Input:	instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
     26e:	cf 93       	push	r28
     270:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     272:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_waitbusy>
	lcd_write( cmd, 0);
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	8c 2f       	mov	r24, r28
}
     27a:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
	lcd_waitbusy();
	lcd_write( cmd, 0);
     27c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <lcd_write>

00000280 <lcd_data>:
Send data byte to LCD controller 
Input:	data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
     280:	cf 93       	push	r28
     282:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     284:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_waitbusy>
	lcd_write( data, 1);
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	8c 2f       	mov	r24, r28
}
     28c:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
	lcd_waitbusy();
	lcd_write( data, 1);
     28e:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <lcd_write>

00000292 <lcd_gotoxy>:
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
	else
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
#endif
#if LCD_LINES == 4
	if( y == 0)
     292:	61 11       	cpse	r22, r1
     294:	02 c0       	rjmp	.+4      	; 0x29a <lcd_gotoxy+0x8>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
     296:	80 58       	subi	r24, 0x80	; 128
     298:	09 c0       	rjmp	.+18     	; 0x2ac <lcd_gotoxy+0x1a>
	else if( y == 1)
     29a:	61 30       	cpi	r22, 0x01	; 1
     29c:	11 f4       	brne	.+4      	; 0x2a2 <lcd_gotoxy+0x10>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
     29e:	80 54       	subi	r24, 0x40	; 64
     2a0:	05 c0       	rjmp	.+10     	; 0x2ac <lcd_gotoxy+0x1a>
	else if( y == 2)
     2a2:	62 30       	cpi	r22, 0x02	; 2
     2a4:	11 f4       	brne	.+4      	; 0x2aa <lcd_gotoxy+0x18>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE3 + x);
     2a6:	8c 56       	subi	r24, 0x6C	; 108
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <lcd_gotoxy+0x1a>
	else /* y == 3 */
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE4 + x);
     2aa:	8c 52       	subi	r24, 0x2C	; 44
     2ac:	0c 94 37 01 	jmp	0x26e	; 0x26e <lcd_command>

000002b0 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy( void)
{
	return lcd_waitbusy();
     2b0:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_waitbusy>
}
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	08 95       	ret

000002b8 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr( void)
{
	lcd_command(1 << LCD_CLR);
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	0c 94 37 01 	jmp	0x26e	; 0x26e <lcd_command>

000002be <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home( void)
{
	lcd_command(1 << LCD_HOME);
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	0c 94 37 01 	jmp	0x26e	; 0x26e <lcd_command>

000002c4 <lcd_putc>:
Display character at current cursor position 
Input:	character to be displayed										
Returns:  none
*************************************************************************/
void lcd_putc( char c)
{
     2c4:	cf 93       	push	r28
     2c6:	c8 2f       	mov	r28, r24
	uint8_t pos;


	pos = lcd_waitbusy();	// read busy-flag and address counter
     2c8:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_waitbusy>
     2cc:	98 2f       	mov	r25, r24
	if( c == '\n')
     2ce:	ca 30       	cpi	r28, 0x0A	; 10
     2d0:	a1 f4       	brne	.+40     	; 0x2fa <lcd_putc+0x36>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
     2d2:	84 31       	cpi	r24, 0x14	; 20
     2d4:	48 f0       	brcs	.+18     	; 0x2e8 <lcd_putc+0x24>
		addressCounter = LCD_START_LINE2;
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
     2d6:	80 ec       	ldi	r24, 0xC0	; 192
     2d8:	89 0f       	add	r24, r25
     2da:	84 31       	cpi	r24, 0x14	; 20
     2dc:	38 f0       	brcs	.+14     	; 0x2ec <lcd_putc+0x28>
		addressCounter = LCD_START_LINE3;
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
     2de:	94 51       	subi	r25, 0x14	; 20
     2e0:	9c 32       	cpi	r25, 0x2C	; 44
     2e2:	30 f0       	brcs	.+12     	; 0x2f0 <lcd_putc+0x2c>
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <lcd_putc+0x2e>
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
		addressCounter = LCD_START_LINE2;
     2e8:	80 e4       	ldi	r24, 0x40	; 64
     2ea:	03 c0       	rjmp	.+6      	; 0x2f2 <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE3;
     2ec:	84 e1       	ldi	r24, 0x14	; 20
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
		addressCounter = LCD_START_LINE4;
     2f0:	84 e5       	ldi	r24, 0x54	; 84
	else 
		addressCounter = LCD_START_LINE1;
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     2f2:	80 58       	subi	r24, 0x80	; 128
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
	}

}/* lcd_putc */
     2f4:	cf 91       	pop	r28
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     2f6:	0c 94 37 01 	jmp	0x26e	; 0x26e <lcd_command>
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	8c 2f       	mov	r24, r28
	}

}/* lcd_putc */
     2fe:	cf 91       	pop	r28
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     300:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <lcd_write>

00000304 <lcd_puts>:
Input:	string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts( const char *s)
/* print string on lcd ( no auto linefeed) */
{
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	ec 01       	movw	r28, r24
	register char c;

	while ( (c = *s++))
     30a:	89 91       	ld	r24, Y+
     30c:	88 23       	and	r24, r24
     30e:	19 f0       	breq	.+6      	; 0x316 <lcd_puts+0x12>
	{
		lcd_putc( c);
     310:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putc>
     314:	fa cf       	rjmp	.-12     	; 0x30a <lcd_puts+0x6>
	}

}/* lcd_puts */
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	08 95       	ret

0000031c <lcd_puts_p>:
Input:	 string from program memory be be displayed										
Returns:	none
*************************************************************************/
void lcd_puts_p( const char *progmem_s)
/* print string from program memory on lcd ( no auto linefeed) */
{
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	fc 01       	movw	r30, r24
	register char c;

	while ( ( c = pgm_read_byte( progmem_s++)))
     322:	84 91       	lpm	r24, Z
     324:	ef 01       	movw	r28, r30
     326:	21 96       	adiw	r28, 0x01	; 1
     328:	88 23       	and	r24, r24
     32a:	21 f0       	breq	.+8      	; 0x334 <lcd_puts_p+0x18>
	{
		lcd_putc( c);
     32c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putc>
     330:	fe 01       	movw	r30, r28
     332:	f7 cf       	rjmp	.-18     	; 0x322 <lcd_puts_p+0x6>
	}

}/* lcd_puts_p */
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <lcd_puthex_nibble>:
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_nibble(const unsigned char b)
{
    unsigned char  c = b & 0x0f;
     33a:	8f 70       	andi	r24, 0x0F	; 15
    if (c>9) c += 'A'-10;
     33c:	8a 30       	cpi	r24, 0x0A	; 10
     33e:	10 f0       	brcs	.+4      	; 0x344 <lcd_puthex_nibble+0xa>
     340:	89 5c       	subi	r24, 0xC9	; 201
     342:	01 c0       	rjmp	.+2      	; 0x346 <lcd_puthex_nibble+0xc>
    else c += '0';
     344:	80 5d       	subi	r24, 0xD0	; 208
    lcd_putc(c);
     346:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <lcd_putc>

0000034a <lcd_puthex_byte>:
This functions was created by Martin Thomas <eversmith@heizung-thomas.de>
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
     34a:	cf 93       	push	r28
     34c:	c8 2f       	mov	r28, r24
    lcd_puthex_nibble(b>>4);
     34e:	82 95       	swap	r24
     350:	8f 70       	andi	r24, 0x0F	; 15
     352:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_puthex_nibble>
    lcd_puthex_nibble(b);
     356:	8c 2f       	mov	r24, r28
} /* lcd_puthex_byte */
     358:	cf 91       	pop	r28
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
    lcd_puthex_nibble(b>>4);
    lcd_puthex_nibble(b);
     35a:	0c 94 9d 01 	jmp	0x33a	; 0x33a <lcd_puthex_nibble>

0000035e <lcd_init>:
					LCD_DISP_ON_CURSOR	  display on, cursor on
					LCD_DISP_CURSOR_BLINK	display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init( uint8_t dispAttr)
{
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	18 2f       	mov	r17, r24
	}
	else if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
			&& (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
	{
		/* configure all port bits as output ( all LCD data lines on same port, but control lines on different ports) */
		DDR( LCD_DATA0_PORT) |= 0x0F;
     366:	94 b1       	in	r25, 0x04	; 4
     368:	9f 60       	ori	r25, 0x0F	; 15
     36a:	94 b9       	out	0x04, r25	; 4
		DDR( LCD_RS_PORT) |= _BV( LCD_RS_PIN);
     36c:	24 9a       	sbi	0x04, 4	; 4
		DDR( LCD_RW_PORT) |= _BV( LCD_RW_PIN);
     36e:	25 9a       	sbi	0x04, 5	; 4
		DDR( LCD_E_PORT) |= _BV( LCD_E_PIN);
     370:	57 9a       	sbi	0x0a, 7	; 10
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     372:	e0 e0       	ldi	r30, 0x00	; 0
     374:	fa ef       	ldi	r31, 0xFA	; 250
     376:	31 97       	sbiw	r30, 0x01	; 1
     378:	f1 f7       	brne	.-4      	; 0x376 <lcd_init+0x18>
		DDR( LCD_DATA3_PORT) |= _BV( LCD_DATA3_PIN);
	}
	delay(16000);		/* wait 16ms or more after power-on		*/
	
	/* initial write to lcd is 8bit */
	LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);  // _BV( LCD_FUNCTION)>>4;
     37a:	29 9a       	sbi	0x05, 1	; 5
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
     37c:	28 9a       	sbi	0x05, 0	; 5
	lcd_e_toggle();
     37e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     382:	e0 e0       	ldi	r30, 0x00	; 0
     384:	fe e4       	ldi	r31, 0x4E	; 78
     386:	31 97       	sbiw	r30, 0x01	; 1
     388:	f1 f7       	brne	.-4      	; 0x386 <lcd_init+0x28>
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
	lcd_e_toggle();
	delay( 4992);		 /* delay, busy flag can't be checked here */
	
	/* repeat last command */ 
	lcd_e_toggle();	  
     38a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     38e:	c0 e0       	ldi	r28, 0x00	; 0
     390:	d1 e0       	ldi	r29, 0x01	; 1
     392:	fe 01       	movw	r30, r28
     394:	31 97       	sbiw	r30, 0x01	; 1
     396:	f1 f7       	brne	.-4      	; 0x394 <lcd_init+0x36>
	/* repeat last command */ 
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */
	
	/* repeat last command a third time */
	lcd_e_toggle();	  
     398:	0e 94 ee 00 	call	0x1dc	; 0x1dc <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     39c:	fe 01       	movw	r30, r28
     39e:	31 97       	sbiw	r30, 0x01	; 1
     3a0:	f1 f7       	brne	.-4      	; 0x39e <lcd_init+0x40>
	/* repeat last command a third time */
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */

	/* now configure for 4bit mode */
	LCD_DATA0_PORT &= ~_BV( LCD_DATA0_PIN);	// LCD_FUNCTION_4BIT_1LINE>>4
     3a2:	28 98       	cbi	0x05, 0	; 5
	lcd_e_toggle();
     3a4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     3a8:	21 97       	sbiw	r28, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <lcd_init+0x4a>
	/* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command( KS0073_4LINES_MODE);
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
     3ac:	88 e2       	ldi	r24, 0x28	; 40
     3ae:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
     3b2:	88 e0       	ldi	r24, 0x08	; 8
     3b4:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
	lcd_clrscr();							/* display clear				*/ 
     3b8:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clrscr>
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
     3bc:	86 e0       	ldi	r24, 0x06	; 6
     3be:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
	lcd_command( dispAttr);				  /* display/cursor control		*/
     3c2:	81 2f       	mov	r24, r17

}/* lcd_init */
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
	lcd_clrscr();							/* display clear				*/ 
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
	lcd_command( dispAttr);				  /* display/cursor control		*/
     3ca:	0c 94 37 01 	jmp	0x26e	; 0x26e <lcd_command>

000003ce <ds18b20_reset>:
uint8_t ds18b20_reset(volatile unsigned char *Port, unsigned char Pin) 
{
	uint8_t i=0,j=0; // i- presence pulse, j- bus release

	//low for 480us
	*Port &= ~(1<<Pin); // pin low
     3ce:	dc 01       	movw	r26, r24
     3d0:	4c 91       	ld	r20, X
     3d2:	21 e0       	ldi	r18, 0x01	; 1
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	06 2e       	mov	r0, r22
     3d8:	01 c0       	rjmp	.+2      	; 0x3dc <ds18b20_reset+0xe>
     3da:	22 0f       	add	r18, r18
     3dc:	0a 94       	dec	r0
     3de:	ea f7       	brpl	.-6      	; 0x3da <ds18b20_reset+0xc>
     3e0:	52 2f       	mov	r21, r18
     3e2:	50 95       	com	r21
     3e4:	35 2f       	mov	r19, r21
     3e6:	34 23       	and	r19, r20
     3e8:	3c 93       	st	X, r19
	*(Port-1)|=(1<<Pin);  //pin as output
     3ea:	fc 01       	movw	r30, r24
     3ec:	32 91       	ld	r19, -Z
     3ee:	23 2b       	or	r18, r19
     3f0:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f2:	af ec       	ldi	r26, 0xCF	; 207
     3f4:	b7 e0       	ldi	r27, 0x07	; 7
     3f6:	11 97       	sbiw	r26, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <ds18b20_reset+0x28>
     3fa:	00 c0       	rjmp	.+0      	; 0x3fc <ds18b20_reset+0x2e>
     3fc:	00 00       	nop
	_delay_us(500); //480

	//release line and wait for 60uS
	*(Port-1) &= ~(1<<Pin); //pin as input without pullup
     3fe:	20 81       	ld	r18, Z
     400:	25 23       	and	r18, r21
     402:	20 83       	st	Z, r18
     404:	ef ee       	ldi	r30, 0xEF	; 239
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	31 97       	sbiw	r30, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	00 00       	nop
	_delay_us(60); //60

	//get value and wait 420us
	
	if((*(Port-2))&(1<<Pin)) {i = 0;} else {i = 1;}
     410:	fc 01       	movw	r30, r24
     412:	32 97       	sbiw	r30, 0x02	; 2
     414:	20 81       	ld	r18, Z
     416:	82 2f       	mov	r24, r18
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	06 2e       	mov	r0, r22
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41e:	95 95       	asr	r25
     420:	87 95       	ror	r24
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     426:	81 70       	andi	r24, 0x01	; 1
     428:	99 27       	eor	r25, r25
     42a:	9c 01       	movw	r18, r24
     42c:	41 e0       	ldi	r20, 0x01	; 1
     42e:	24 27       	eor	r18, r20
     430:	87 ee       	ldi	r24, 0xE7	; 231
     432:	93 e0       	ldi	r25, 0x03	; 3
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     438:	00 c0       	rjmp	.+0      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     43a:	00 00       	nop
	_delay_us(250); //device after 15-60us pull down line for 60-240us
	if((*(Port-2))&(1<<Pin)) {j = 1;} else {j = 0;}
     43c:	80 81       	ld	r24, Z
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     442:	95 95       	asr	r25
     444:	87 95       	ror	r24
     446:	6a 95       	dec	r22
     448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	//return presence bit(0-no device,1-device OK)

	return (i & j);
     44a:	82 23       	and	r24, r18
     44c:	93 23       	and	r25, r19
}
     44e:	81 70       	andi	r24, 0x01	; 1
     450:	08 95       	ret

00000452 <ds18b20_writebit>:

/*
 * write one bit
 */
void ds18b20_writebit(volatile unsigned char *Port, unsigned char Pin, uint8_t bit)
{
     452:	fc 01       	movw	r30, r24
	//low for 1uS
	*Port &= ~ (1<<Pin);
     454:	20 81       	ld	r18, Z
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	01 c0       	rjmp	.+2      	; 0x45e <ds18b20_writebit+0xc>
     45c:	88 0f       	add	r24, r24
     45e:	6a 95       	dec	r22
     460:	ea f7       	brpl	.-6      	; 0x45c <ds18b20_writebit+0xa>
     462:	98 2f       	mov	r25, r24
     464:	90 95       	com	r25
     466:	29 23       	and	r18, r25
     468:	20 83       	st	Z, r18
	 //output
	*(Port-1)|=(1<<Pin);
     46a:	22 91       	ld	r18, -Z
     46c:	82 2b       	or	r24, r18
     46e:	80 83       	st	Z, r24
     470:	85 e0       	ldi	r24, 0x05	; 5
     472:	8a 95       	dec	r24
     474:	f1 f7       	brne	.-4      	; 0x472 <ds18b20_writebit+0x20>
     476:	00 00       	nop
	_delay_us(1);	//1uS
	//if we want to write 1, release the line (if not will keep low)
	if(bit)
     478:	44 23       	and	r20, r20
     47a:	19 f0       	breq	.+6      	; 0x482 <ds18b20_writebit+0x30>
		*(Port-1) &= ~ (1<<Pin);  //input
     47c:	80 81       	ld	r24, Z
     47e:	89 23       	and	r24, r25
     480:	80 83       	st	Z, r24
     482:	af ee       	ldi	r26, 0xEF	; 239
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	11 97       	sbiw	r26, 0x01	; 1
     488:	f1 f7       	brne	.-4      	; 0x486 <ds18b20_writebit+0x34>
     48a:	00 c0       	rjmp	.+0      	; 0x48c <ds18b20_writebit+0x3a>
     48c:	00 00       	nop
	//wait 60uS and release the line
	_delay_us(60);	//60
	*(Port-1) &= ~ (1<<Pin); //input
     48e:	80 81       	ld	r24, Z
     490:	89 23       	and	r24, r25
     492:	80 83       	st	Z, r24
     494:	08 95       	ret

00000496 <ds18b20_readbit>:
{
	uint8_t bit=0;

	//low for 1uS
	//low
	*Port &= ~(1<<Pin);
     496:	fc 01       	movw	r30, r24
     498:	40 81       	ld	r20, Z
     49a:	21 e0       	ldi	r18, 0x01	; 1
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	06 2e       	mov	r0, r22
     4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <ds18b20_readbit+0xe>
     4a2:	22 0f       	add	r18, r18
     4a4:	0a 94       	dec	r0
     4a6:	ea f7       	brpl	.-6      	; 0x4a2 <ds18b20_readbit+0xc>
     4a8:	52 2f       	mov	r21, r18
     4aa:	50 95       	com	r21
     4ac:	35 2f       	mov	r19, r21
     4ae:	34 23       	and	r19, r20
     4b0:	30 83       	st	Z, r19
	 //output
	*(Port-1) |= (1<<Pin);
     4b2:	32 91       	ld	r19, -Z
     4b4:	23 2b       	or	r18, r19
     4b6:	20 83       	st	Z, r18
     4b8:	25 e0       	ldi	r18, 0x05	; 5
     4ba:	2a 95       	dec	r18
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <ds18b20_readbit+0x24>
     4be:	00 00       	nop
	_delay_us(1);	//1

	//release line and wait for 14uS
	//input
	*(Port-1) &= ~(1<<Pin);
     4c0:	20 81       	ld	r18, Z
     4c2:	25 23       	and	r18, r21
     4c4:	20 83       	st	Z, r18
     4c6:	ea e4       	ldi	r30, 0x4A	; 74
     4c8:	ea 95       	dec	r30
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <ds18b20_readbit+0x32>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <ds18b20_readbit+0x38>
	_delay_us(14);	//10

	//read the value
	if( (*(Port-2)) & (1<<Pin) )
     4ce:	fc 01       	movw	r30, r24
     4d0:	32 97       	sbiw	r30, 0x02	; 2
     4d2:	80 81       	ld	r24, Z
     4d4:	e3 ed       	ldi	r30, 0xD3	; 211
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	31 97       	sbiw	r30, 0x01	; 1
     4da:	f1 f7       	brne	.-4      	; 0x4d8 <ds18b20_readbit+0x42>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <ds18b20_readbit+0x48>
     4de:	00 00       	nop
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <ds18b20_readbit+0x52>
     4e4:	95 95       	asr	r25
     4e6:	87 95       	ror	r24
     4e8:	6a 95       	dec	r22
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <ds18b20_readbit+0x4e>
		bit=1;

	//wait 45uS and return read value
	_delay_us(53);	//53
	return bit;
}
     4ec:	81 70       	andi	r24, 0x01	; 1
     4ee:	08 95       	ret

000004f0 <ds18b20_writebyte>:

/*
 * write one byte
 */
void ds18b20_writebyte(volatile unsigned char *Port, unsigned char Pin, uint8_t byte)
{
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	8c 01       	movw	r16, r24
     4fc:	f6 2e       	mov	r15, r22
     4fe:	d4 2f       	mov	r29, r20
	uint8_t i=8;
	while(i--){
     500:	c9 e0       	ldi	r28, 0x09	; 9
     502:	c1 50       	subi	r28, 0x01	; 1
     504:	41 f0       	breq	.+16     	; 0x516 <ds18b20_writebyte+0x26>
		ds18b20_writebit(Port, Pin, byte&1);
     506:	4d 2f       	mov	r20, r29
     508:	41 70       	andi	r20, 0x01	; 1
     50a:	6f 2d       	mov	r22, r15
     50c:	c8 01       	movw	r24, r16
     50e:	0e 94 29 02 	call	0x452	; 0x452 <ds18b20_writebit>
		byte >>= 1;
     512:	d6 95       	lsr	r29
     514:	f6 cf       	rjmp	.-20     	; 0x502 <ds18b20_writebyte+0x12>
	}
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	08 95       	ret

00000522 <ds18b20_readbyte>:

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(volatile unsigned char *Port, unsigned char Pin)
{
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	8c 01       	movw	r16, r24
     52e:	f6 2e       	mov	r15, r22
	uint8_t i=8, n=0;
	while(i--){
     530:	d9 e0       	ldi	r29, 0x09	; 9
/*
 * read one byte
 */
uint8_t ds18b20_readbyte(volatile unsigned char *Port, unsigned char Pin)
{
	uint8_t i=8, n=0;
     532:	c0 e0       	ldi	r28, 0x00	; 0
     534:	d1 50       	subi	r29, 0x01	; 1
	while(i--){
     536:	59 f0       	breq	.+22     	; 0x54e <ds18b20_readbyte+0x2c>
		n >>= 1;
		n |= (ds18b20_readbit(Port, Pin)<<7);
     538:	6f 2d       	mov	r22, r15
     53a:	c8 01       	movw	r24, r16
     53c:	0e 94 4b 02 	call	0x496	; 0x496 <ds18b20_readbit>
     540:	20 e8       	ldi	r18, 0x80	; 128
     542:	82 9f       	mul	r24, r18
     544:	c0 01       	movw	r24, r0
     546:	11 24       	eor	r1, r1
 */
uint8_t ds18b20_readbyte(volatile unsigned char *Port, unsigned char Pin)
{
	uint8_t i=8, n=0;
	while(i--){
		n >>= 1;
     548:	c6 95       	lsr	r28
		n |= (ds18b20_readbit(Port, Pin)<<7);
     54a:	c8 2b       	or	r28, r24
     54c:	f3 cf       	rjmp	.-26     	; 0x534 <ds18b20_readbyte+0x12>
	}
	return n;
}
     54e:	8c 2f       	mov	r24, r28
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	08 95       	ret

0000055c <read_ROM_CODE>:
/*
	* read ROM code from sensor, and print it on LCD on actual position
*/

void read_ROM_CODE(volatile unsigned char *Port, unsigned char Pin)
{
     55c:	df 92       	push	r13
     55e:	ef 92       	push	r14
     560:	ff 92       	push	r15
     562:	0f 93       	push	r16
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	28 97       	sbiw	r28, 0x08	; 8
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	7c 01       	movw	r14, r24
     57c:	d6 2e       	mov	r13, r22
	volatile unsigned char ROM_code[8];
	unsigned i,j;
	cli(); // disable interrupts
     57e:	f8 94       	cli
	ds18b20_reset(Port, Pin); //reset OW bus
     580:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ds18b20_reset>
	}
	//return(ROM_code);
	*/


	ds18b20_writebyte(Port, Pin, DS18B20_CMD_READROM); //read ROM
     584:	43 e3       	ldi	r20, 0x33	; 51
     586:	6d 2d       	mov	r22, r13
     588:	c7 01       	movw	r24, r14
     58a:	0e 94 78 02 	call	0x4f0	; 0x4f0 <ds18b20_writebyte>
	for(i=0;i<8;i++)
     58e:	00 e0       	ldi	r16, 0x00	; 0
     590:	10 e0       	ldi	r17, 0x00	; 0
	{
		ROM_code[i] = ds18b20_readbyte(Port, Pin);
     592:	6d 2d       	mov	r22, r13
     594:	c7 01       	movw	r24, r14
     596:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_readbyte>
     59a:	e1 e0       	ldi	r30, 0x01	; 1
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	ec 0f       	add	r30, r28
     5a0:	fd 1f       	adc	r31, r29
     5a2:	e0 0f       	add	r30, r16
     5a4:	f1 1f       	adc	r31, r17
     5a6:	80 83       	st	Z, r24
	//return(ROM_code);
	*/


	ds18b20_writebyte(Port, Pin, DS18B20_CMD_READROM); //read ROM
	for(i=0;i<8;i++)
     5a8:	0f 5f       	subi	r16, 0xFF	; 255
     5aa:	1f 4f       	sbci	r17, 0xFF	; 255
     5ac:	08 30       	cpi	r16, 0x08	; 8
     5ae:	11 05       	cpc	r17, r1
     5b0:	81 f7       	brne	.-32     	; 0x592 <read_ROM_CODE+0x36>
	{
		ROM_code[i] = ds18b20_readbyte(Port, Pin);
	}
	sei(); // enable interrupts
     5b2:	78 94       	sei
	
	for(j=0;j<8;j++)
     5b4:	00 e0       	ldi	r16, 0x00	; 0
     5b6:	10 e0       	ldi	r17, 0x00	; 0
	{
		lcd_puthex_byte(ROM_code[j]);
     5b8:	e1 e0       	ldi	r30, 0x01	; 1
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	ec 0f       	add	r30, r28
     5be:	fd 1f       	adc	r31, r29
     5c0:	e0 0f       	add	r30, r16
     5c2:	f1 1f       	adc	r31, r17
     5c4:	80 81       	ld	r24, Z
     5c6:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puthex_byte>
	{
		ROM_code[i] = ds18b20_readbyte(Port, Pin);
	}
	sei(); // enable interrupts
	
	for(j=0;j<8;j++)
     5ca:	0f 5f       	subi	r16, 0xFF	; 255
     5cc:	1f 4f       	sbci	r17, 0xFF	; 255
     5ce:	08 30       	cpi	r16, 0x08	; 8
     5d0:	11 05       	cpc	r17, r1
     5d2:	91 f7       	brne	.-28     	; 0x5b8 <read_ROM_CODE+0x5c>
	{
		lcd_puthex_byte(ROM_code[j]);
	}
}
     5d4:	28 96       	adiw	r28, 0x08	; 8
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	08 95       	ret

000005f0 <ds18b20_gettemp>:

/*
 * get temperature
 */
int16_t ds18b20_gettemp(volatile unsigned char *Port, unsigned char Pin)
{
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	ec 01       	movw	r28, r24
     5fa:	16 2f       	mov	r17, r22

	//#if DS18B20_STOPINTERRUPTONREAD == 1
	//cli(); //interrupt deny 
	//#endif

	ds18b20_reset(Port, Pin); //reset
     5fc:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ds18b20_reset>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_SKIPROM); //skip ROM
     600:	4c ec       	ldi	r20, 0xCC	; 204
     602:	61 2f       	mov	r22, r17
     604:	ce 01       	movw	r24, r28
     606:	0e 94 78 02 	call	0x4f0	; 0x4f0 <ds18b20_writebyte>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_CONVERTTEMP); //start temperature conversion
     60a:	44 e4       	ldi	r20, 0x44	; 68
     60c:	61 2f       	mov	r22, r17
     60e:	ce 01       	movw	r24, r28
     610:	0e 94 78 02 	call	0x4f0	; 0x4f0 <ds18b20_writebyte>

	while(!ds18b20_readbit(Port, Pin)); //wait until conversion is complete
     614:	61 2f       	mov	r22, r17
     616:	ce 01       	movw	r24, r28
     618:	0e 94 4b 02 	call	0x496	; 0x496 <ds18b20_readbit>
     61c:	88 23       	and	r24, r24
     61e:	d1 f3       	breq	.-12     	; 0x614 <ds18b20_gettemp+0x24>

	ds18b20_reset(Port, Pin); //reset
     620:	61 2f       	mov	r22, r17
     622:	ce 01       	movw	r24, r28
     624:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ds18b20_reset>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_SKIPROM); //skip ROM
     628:	4c ec       	ldi	r20, 0xCC	; 204
     62a:	61 2f       	mov	r22, r17
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <ds18b20_writebyte>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_RSCRATCHPAD); //read scratchpad
     632:	4e eb       	ldi	r20, 0xBE	; 190
     634:	61 2f       	mov	r22, r17
     636:	ce 01       	movw	r24, r28
     638:	0e 94 78 02 	call	0x4f0	; 0x4f0 <ds18b20_writebyte>

	//read 2 byte from scratchpad
	temperature_l = ds18b20_readbyte(Port, Pin);
     63c:	61 2f       	mov	r22, r17
     63e:	ce 01       	movw	r24, r28
     640:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_readbyte>
     644:	08 2f       	mov	r16, r24
	temperature_h = ds18b20_readbyte(Port, Pin);
     646:	61 2f       	mov	r22, r17
     648:	ce 01       	movw	r24, r28
     64a:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_readbyte>
     64e:	c8 2f       	mov	r28, r24
	sign = (temperature_h >> 4) & 0x0F;
     650:	82 95       	swap	r24
     652:	8f 70       	andi	r24, 0x0F	; 15

	//#if DS18B20_STOPINTERRUPTONREAD == 1
	//sei();  //interrupt allow
	//#endif
	
	if(sign == 0)
     654:	09 f5       	brne	.+66     	; 0x698 <ds18b20_gettemp+0xa8>
  	{
	teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
     656:	20 e1       	ldi	r18, 0x10	; 16
     658:	c2 9f       	mul	r28, r18
     65a:	c0 01       	movw	r24, r0
     65c:	11 24       	eor	r1, r1
     65e:	20 2f       	mov	r18, r16
     660:	22 95       	swap	r18
     662:	2f 70       	andi	r18, 0x0F	; 15
     664:	82 2b       	or	r24, r18
	desatiny = (temperature_l & 0x0F) * 0.625;
  	retd = 10 * teplota;  
     666:	2a e0       	ldi	r18, 0x0A	; 10
     668:	28 9f       	mul	r18, r24
     66a:	e0 01       	movw	r28, r0
     66c:	29 9f       	mul	r18, r25
     66e:	d0 0d       	add	r29, r0
     670:	11 24       	eor	r1, r1
	//#endif
	
	if(sign == 0)
  	{
	teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
	desatiny = (temperature_l & 0x0F) * 0.625;
     672:	60 2f       	mov	r22, r16
     674:	6f 70       	andi	r22, 0x0F	; 15
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__floatsisf>
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e2       	ldi	r20, 0x20	; 32
     686:	5f e3       	ldi	r21, 0x3F	; 63
     688:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__mulsf3>
     68c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__fixunssfsi>
  	retd = 10 * teplota;  
	retd = retd + desatiny;
     690:	ce 01       	movw	r24, r28
     692:	86 0f       	add	r24, r22
     694:	91 1d       	adc	r25, r1
     696:	26 c0       	rjmp	.+76     	; 0x6e4 <ds18b20_gettemp+0xf4>
	}
 else
    {
	temperature_l =~ temperature_l;
     698:	00 95       	com	r16
	temperature_h =~ temperature_h;
    teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
    desatiny = ((temperature_l + 1) & 0x0F) * 0.625;
     69a:	60 2f       	mov	r22, r16
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6f 5f       	subi	r22, 0xFF	; 255
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	6f 70       	andi	r22, 0x0F	; 15
     6a4:	77 27       	eor	r23, r23
     6a6:	07 2e       	mov	r0, r23
     6a8:	00 0c       	add	r0, r0
     6aa:	88 0b       	sbc	r24, r24
     6ac:	99 0b       	sbc	r25, r25
     6ae:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__floatsisf>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	40 e2       	ldi	r20, 0x20	; 32
     6b8:	5f e3       	ldi	r21, 0x3F	; 63
     6ba:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__mulsf3>
     6be:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__fixunssfsi>
	retd = retd + desatiny;
	}
 else
    {
	temperature_l =~ temperature_l;
	temperature_h =~ temperature_h;
     6c2:	c0 95       	com	r28
    teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
     6c4:	20 e1       	ldi	r18, 0x10	; 16
     6c6:	c2 9f       	mul	r28, r18
     6c8:	c0 01       	movw	r24, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	02 95       	swap	r16
     6ce:	0f 70       	andi	r16, 0x0F	; 15
     6d0:	80 2b       	or	r24, r16
    desatiny = ((temperature_l + 1) & 0x0F) * 0.625;
    retd = (teplota*10+desatiny)*(-1);
     6d2:	2a e0       	ldi	r18, 0x0A	; 10
     6d4:	82 9f       	mul	r24, r18
     6d6:	c0 01       	movw	r24, r0
     6d8:	11 24       	eor	r1, r1
     6da:	86 0f       	add	r24, r22
     6dc:	91 1d       	adc	r25, r1
     6de:	91 95       	neg	r25
     6e0:	81 95       	neg	r24
     6e2:	91 09       	sbc	r25, r1
//PORTB |= (1 << PB5); // set high
//_delay_ms(200);
//************************************************

	return retd; // output in decicelsius *10
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	08 95       	ret

000006ee <bmp085_writemem>:
#include BMP085_I2CFLEURYPATH

/*
 * i2c write
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	1f 92       	push	r1
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	18 2f       	mov	r17, r24
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     6fc:	8e ee       	ldi	r24, 0xEE	; 238
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	0e 94 64 07 	call	0xec8	; 0xec8 <i2c_start_wait>
	i2c_write(reg);
     704:	81 2f       	mov	r24, r17
     706:	0e 94 95 07 	call	0xf2a	; 0xf2a <i2c_write>
	i2c_write(value);
     70a:	69 81       	ldd	r22, Y+1	; 0x01
     70c:	86 2f       	mov	r24, r22
     70e:	0e 94 95 07 	call	0xf2a	; 0xf2a <i2c_write>
	i2c_stop();
}
     712:	0f 90       	pop	r0
     714:	df 91       	pop	r29
     716:	cf 91       	pop	r28
     718:	1f 91       	pop	r17
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_write(value);
	i2c_stop();
     71a:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <i2c_stop>

0000071e <bmp085_readmem>:
}

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
     71e:	af 92       	push	r10
     720:	bf 92       	push	r11
     722:	cf 92       	push	r12
     724:	df 92       	push	r13
     726:	ef 92       	push	r14
     728:	ff 92       	push	r15
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	00 d0       	rcall	.+0      	; 0x734 <bmp085_readmem+0x16>
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	18 2f       	mov	r17, r24
     73a:	04 2f       	mov	r16, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     73c:	8e ee       	ldi	r24, 0xEE	; 238
     73e:	69 83       	std	Y+1, r22	; 0x01
     740:	7a 83       	std	Y+2, r23	; 0x02
     742:	0e 94 64 07 	call	0xec8	; 0xec8 <i2c_start_wait>
	i2c_write(reg);
     746:	81 2f       	mov	r24, r17
     748:	0e 94 95 07 	call	0xf2a	; 0xf2a <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
     74c:	8f ee       	ldi	r24, 0xEF	; 239
     74e:	0e 94 8b 07 	call	0xf16	; 0xf16 <i2c_rep_start>
     752:	69 81       	ldd	r22, Y+1	; 0x01
     754:	a6 2e       	mov	r10, r22
     756:	7a 81       	ldd	r23, Y+2	; 0x02
     758:	b7 2e       	mov	r11, r23
     75a:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i<bytes; i++) {
     75c:	e1 2c       	mov	r14, r1
     75e:	f1 2c       	mov	r15, r1
		if(i==bytes-1)
     760:	68 01       	movw	r12, r16
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	c8 1a       	sub	r12, r24
     766:	d1 08       	sbc	r13, r1
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
     768:	e0 16       	cp	r14, r16
     76a:	f1 06       	cpc	r15, r17
     76c:	89 f0       	breq	.+34     	; 0x790 <bmp085_readmem+0x72>
		if(i==bytes-1)
     76e:	ec 14       	cp	r14, r12
     770:	fd 04       	cpc	r15, r13
     772:	19 f4       	brne	.+6      	; 0x77a <bmp085_readmem+0x5c>
			buff[i] = i2c_readNak();
     774:	0e 94 b0 07 	call	0xf60	; 0xf60 <i2c_readNak>
     778:	02 c0       	rjmp	.+4      	; 0x77e <bmp085_readmem+0x60>
		else
			buff[i] = i2c_readAck();
     77a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <i2c_readAck>
     77e:	f5 01       	movw	r30, r10
     780:	80 83       	st	Z, r24
     782:	ff ef       	ldi	r31, 0xFF	; 255
     784:	ef 1a       	sub	r14, r31
     786:	ff 0a       	sbc	r15, r31
     788:	8f ef       	ldi	r24, 0xFF	; 255
     78a:	a8 1a       	sub	r10, r24
     78c:	b8 0a       	sbc	r11, r24
     78e:	ec cf       	rjmp	.-40     	; 0x768 <bmp085_readmem+0x4a>
	}
	i2c_stop();
}
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	df 90       	pop	r13
     7a2:	cf 90       	pop	r12
     7a4:	bf 90       	pop	r11
     7a6:	af 90       	pop	r10
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     7a8:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <i2c_stop>

000007ac <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
     7ac:	0f 93       	push	r16
     7ae:	1f 93       	push	r17
     7b0:	a3 e2       	ldi	r26, 0x23	; 35
     7b2:	b1 e0       	ldi	r27, 0x01	; 1
     7b4:	fd 01       	movw	r30, r26
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
     7b6:	04 81       	ldd	r16, Z+4	; 0x04
     7b8:	15 81       	ldd	r17, Z+5	; 0x05
     7ba:	26 81       	ldd	r18, Z+6	; 0x06
     7bc:	37 81       	ldd	r19, Z+7	; 0x07
     7be:	01 93       	st	Z+, r16
     7c0:	11 93       	st	Z+, r17
     7c2:	21 93       	st	Z+, r18
     7c4:	31 93       	st	Z+, r19
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	e7 37       	cpi	r30, 0x77	; 119
     7ca:	f2 07       	cpc	r31, r18
     7cc:	a1 f7       	brne	.-24     	; 0x7b6 <bmp085_avaragefilter+0xa>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
     7ce:	60 93 73 01 	sts	0x0173, r22	; 0x800173 <k+0x50>
     7d2:	70 93 74 01 	sts	0x0174, r23	; 0x800174 <k+0x51>
     7d6:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <k+0x52>
     7da:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <k+0x53>
#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	cb 01       	movw	r24, r22
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
     7e4:	0d 91       	ld	r16, X+
     7e6:	1d 91       	ld	r17, X+
     7e8:	2d 91       	ld	r18, X+
     7ea:	3d 91       	ld	r19, X+
     7ec:	60 0f       	add	r22, r16
     7ee:	71 1f       	adc	r23, r17
     7f0:	82 1f       	adc	r24, r18
     7f2:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     7f4:	21 e0       	ldi	r18, 0x01	; 1
     7f6:	a7 37       	cpi	r26, 0x77	; 119
     7f8:	b2 07       	cpc	r27, r18
     7fa:	a1 f7       	brne	.-24     	; 0x7e4 <bmp085_avaragefilter+0x38>
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
     7fc:	25 e1       	ldi	r18, 0x15	; 21
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e0       	ldi	r20, 0x00	; 0
     802:	50 e0       	ldi	r21, 0x00	; 0
     804:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divmodsi4>
}
     808:	ca 01       	movw	r24, r20
     80a:	b9 01       	movw	r22, r18
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	08 95       	ret

00000812 <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	00 d0       	rcall	.+0      	; 0x818 <bmp085_getcalibration+0x6>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     81c:	1a 82       	std	Y+2, r1	; 0x02
     81e:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
     820:	42 e0       	ldi	r20, 0x02	; 2
     822:	be 01       	movw	r22, r28
     824:	6f 5f       	subi	r22, 0xFF	; 255
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	8a ea       	ldi	r24, 0xAA	; 170
     82a:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	98 2f       	mov	r25, r24
     834:	88 27       	eor	r24, r24
     836:	2a 81       	ldd	r18, Y+2	; 0x02
     838:	82 2b       	or	r24, r18
     83a:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <bmp085_regac1+0x1>
     83e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <bmp085_regac1>
	bmp085_readmem(BMP085_REGAC2, buff, 2);
     842:	42 e0       	ldi	r20, 0x02	; 2
     844:	be 01       	movw	r22, r28
     846:	6f 5f       	subi	r22, 0xFF	; 255
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	8c ea       	ldi	r24, 0xAC	; 172
     84c:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	98 2f       	mov	r25, r24
     856:	88 27       	eor	r24, r24
     858:	2a 81       	ldd	r18, Y+2	; 0x02
     85a:	82 2b       	or	r24, r18
     85c:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <bmp085_regac2+0x1>
     860:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <bmp085_regac2>
	bmp085_readmem(BMP085_REGAC3, buff, 2);
     864:	42 e0       	ldi	r20, 0x02	; 2
     866:	be 01       	movw	r22, r28
     868:	6f 5f       	subi	r22, 0xFF	; 255
     86a:	7f 4f       	sbci	r23, 0xFF	; 255
     86c:	8e ea       	ldi	r24, 0xAE	; 174
     86e:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	98 2f       	mov	r25, r24
     878:	88 27       	eor	r24, r24
     87a:	2a 81       	ldd	r18, Y+2	; 0x02
     87c:	82 2b       	or	r24, r18
     87e:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <bmp085_regac3+0x1>
     882:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <bmp085_regac3>
	bmp085_readmem(BMP085_REGAC4, buff, 2);
     886:	42 e0       	ldi	r20, 0x02	; 2
     888:	be 01       	movw	r22, r28
     88a:	6f 5f       	subi	r22, 0xFF	; 255
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	80 eb       	ldi	r24, 0xB0	; 176
     890:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	98 2f       	mov	r25, r24
     89a:	88 27       	eor	r24, r24
     89c:	2a 81       	ldd	r18, Y+2	; 0x02
     89e:	82 2b       	or	r24, r18
     8a0:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <bmp085_regac4+0x1>
     8a4:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <bmp085_regac4>
	bmp085_readmem(BMP085_REGAC5, buff, 2);
     8a8:	42 e0       	ldi	r20, 0x02	; 2
     8aa:	be 01       	movw	r22, r28
     8ac:	6f 5f       	subi	r22, 0xFF	; 255
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	82 eb       	ldi	r24, 0xB2	; 178
     8b2:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     8b6:	89 81       	ldd	r24, Y+1	; 0x01
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	98 2f       	mov	r25, r24
     8bc:	88 27       	eor	r24, r24
     8be:	2a 81       	ldd	r18, Y+2	; 0x02
     8c0:	82 2b       	or	r24, r18
     8c2:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <bmp085_regac5+0x1>
     8c6:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <bmp085_regac5>
	bmp085_readmem(BMP085_REGAC6, buff, 2);
     8ca:	42 e0       	ldi	r20, 0x02	; 2
     8cc:	be 01       	movw	r22, r28
     8ce:	6f 5f       	subi	r22, 0xFF	; 255
     8d0:	7f 4f       	sbci	r23, 0xFF	; 255
     8d2:	84 eb       	ldi	r24, 0xB4	; 180
     8d4:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	98 2f       	mov	r25, r24
     8de:	88 27       	eor	r24, r24
     8e0:	2a 81       	ldd	r18, Y+2	; 0x02
     8e2:	82 2b       	or	r24, r18
     8e4:	90 93 90 01 	sts	0x0190, r25	; 0x800190 <bmp085_regac6+0x1>
     8e8:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <bmp085_regac6>
	bmp085_readmem(BMP085_REGB1, buff, 2);
     8ec:	42 e0       	ldi	r20, 0x02	; 2
     8ee:	be 01       	movw	r22, r28
     8f0:	6f 5f       	subi	r22, 0xFF	; 255
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	86 eb       	ldi	r24, 0xB6	; 182
     8f6:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	98 2f       	mov	r25, r24
     900:	88 27       	eor	r24, r24
     902:	2a 81       	ldd	r18, Y+2	; 0x02
     904:	82 2b       	or	r24, r18
     906:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <bmp085_regb1+0x1>
     90a:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <bmp085_regb1>
	bmp085_readmem(BMP085_REGB2, buff, 2);
     90e:	42 e0       	ldi	r20, 0x02	; 2
     910:	be 01       	movw	r22, r28
     912:	6f 5f       	subi	r22, 0xFF	; 255
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	88 eb       	ldi	r24, 0xB8	; 184
     918:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	98 2f       	mov	r25, r24
     922:	88 27       	eor	r24, r24
     924:	2a 81       	ldd	r18, Y+2	; 0x02
     926:	82 2b       	or	r24, r18
     928:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <bmp085_regb2+0x1>
     92c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <bmp085_regb2>
	bmp085_readmem(BMP085_REGMB, buff, 2);
     930:	42 e0       	ldi	r20, 0x02	; 2
     932:	be 01       	movw	r22, r28
     934:	6f 5f       	subi	r22, 0xFF	; 255
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	8a eb       	ldi	r24, 0xBA	; 186
     93a:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	98 2f       	mov	r25, r24
     944:	88 27       	eor	r24, r24
     946:	2a 81       	ldd	r18, Y+2	; 0x02
     948:	82 2b       	or	r24, r18
     94a:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <bmp085_regmb+0x1>
     94e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <bmp085_regmb>
	bmp085_readmem(BMP085_REGMC, buff, 2);
     952:	42 e0       	ldi	r20, 0x02	; 2
     954:	be 01       	movw	r22, r28
     956:	6f 5f       	subi	r22, 0xFF	; 255
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	8c eb       	ldi	r24, 0xBC	; 188
     95c:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	98 2f       	mov	r25, r24
     966:	88 27       	eor	r24, r24
     968:	2a 81       	ldd	r18, Y+2	; 0x02
     96a:	82 2b       	or	r24, r18
     96c:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <bmp085_regmc+0x1>
     970:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <bmp085_regmc>
	bmp085_readmem(BMP085_REGMD, buff, 2);
     974:	42 e0       	ldi	r20, 0x02	; 2
     976:	be 01       	movw	r22, r28
     978:	6f 5f       	subi	r22, 0xFF	; 255
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	8e eb       	ldi	r24, 0xBE	; 190
     97e:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	98 2f       	mov	r25, r24
     988:	88 27       	eor	r24, r24
     98a:	2a 81       	ldd	r18, Y+2	; 0x02
     98c:	82 2b       	or	r24, r18
     98e:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <bmp085_regmd+0x1>
     992:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <bmp085_regmd>
}
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <bmp085_getrawtemperature>:

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
     9a0:	cf 92       	push	r12
     9a2:	df 92       	push	r13
     9a4:	ef 92       	push	r14
     9a6:	ff 92       	push	r15
     9a8:	0f 93       	push	r16
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <bmp085_getrawtemperature+0x12>
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     9b6:	1a 82       	std	Y+2, r1	; 0x02
     9b8:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
     9ba:	6e e2       	ldi	r22, 0x2E	; 46
     9bc:	84 ef       	ldi	r24, 0xF4	; 244
     9be:	0e 94 77 03 	call	0x6ee	; 0x6ee <bmp085_writemem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c2:	8f e1       	ldi	r24, 0x1F	; 31
     9c4:	9e e4       	ldi	r25, 0x4E	; 78
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <bmp085_getrawtemperature+0x26>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <bmp085_getrawtemperature+0x2c>
     9cc:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
     9ce:	42 e0       	ldi	r20, 0x02	; 2
     9d0:	be 01       	movw	r22, r28
     9d2:	6f 5f       	subi	r22, 0xFF	; 255
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	86 ef       	ldi	r24, 0xF6	; 246
     9d8:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value
     9dc:	29 81       	ldd	r18, Y+1	; 0x01
     9de:	82 2f       	mov	r24, r18
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	44 27       	eor	r20, r20
     9e8:	58 2f       	mov	r21, r24
     9ea:	69 2f       	mov	r22, r25
     9ec:	7a 2f       	mov	r23, r26
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	48 2b       	or	r20, r24

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
     9f2:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <bmp085_regac6>
     9f6:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <bmp085_regac6+0x1>
     9fa:	9a 01       	movw	r18, r20
     9fc:	ab 01       	movw	r20, r22
     9fe:	28 1b       	sub	r18, r24
     a00:	39 0b       	sbc	r19, r25
     a02:	41 09       	sbc	r20, r1
     a04:	51 09       	sbc	r21, r1
     a06:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <bmp085_regac5>
     a0a:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <bmp085_regac5+0x1>
     a0e:	0e 94 ae 0b 	call	0x175c	; 0x175c <__muluhisi3>
     a12:	6b 01       	movw	r12, r22
     a14:	7c 01       	movw	r14, r24
     a16:	3f e0       	ldi	r19, 0x0F	; 15
     a18:	f5 94       	asr	r15
     a1a:	e7 94       	ror	r14
     a1c:	d7 94       	ror	r13
     a1e:	c7 94       	ror	r12
     a20:	3a 95       	dec	r19
     a22:	d1 f7       	brne	.-12     	; 0xa18 <bmp085_getrawtemperature+0x78>
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
     a24:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <bmp085_regmc>
     a28:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <bmp085_regmc+0x1>
     a2c:	cb 01       	movw	r24, r22
     a2e:	77 0f       	add	r23, r23
     a30:	aa 0b       	sbc	r26, r26
     a32:	bb 0b       	sbc	r27, r27
     a34:	bc 01       	movw	r22, r24
     a36:	cd 01       	movw	r24, r26
     a38:	4b e0       	ldi	r20, 0x0B	; 11
     a3a:	66 0f       	add	r22, r22
     a3c:	77 1f       	adc	r23, r23
     a3e:	88 1f       	adc	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	4a 95       	dec	r20
     a44:	d1 f7       	brne	.-12     	; 0xa3a <bmp085_getrawtemperature+0x9a>
     a46:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <bmp085_regmd>
     a4a:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <bmp085_regmd+0x1>
     a4e:	89 01       	movw	r16, r18
     a50:	33 0f       	add	r19, r19
     a52:	22 0b       	sbc	r18, r18
     a54:	33 0b       	sbc	r19, r19
     a56:	a9 01       	movw	r20, r18
     a58:	98 01       	movw	r18, r16
     a5a:	2c 0d       	add	r18, r12
     a5c:	3d 1d       	adc	r19, r13
     a5e:	4e 1d       	adc	r20, r14
     a60:	5f 1d       	adc	r21, r15
     a62:	0e 94 8f 0b 	call	0x171e	; 0x171e <__divmodsi4>
	bmp085_rawtemperature = (x1 + x2);
     a66:	c2 0e       	add	r12, r18
     a68:	d3 1e       	adc	r13, r19
     a6a:	e4 1e       	adc	r14, r20
     a6c:	f5 1e       	adc	r15, r21
     a6e:	c0 92 89 01 	sts	0x0189, r12	; 0x800189 <bmp085_rawtemperature>
     a72:	d0 92 8a 01 	sts	0x018A, r13	; 0x80018a <bmp085_rawtemperature+0x1>
     a76:	e0 92 8b 01 	sts	0x018B, r14	; 0x80018b <bmp085_rawtemperature+0x2>
     a7a:	f0 92 8c 01 	sts	0x018C, r15	; 0x80018c <bmp085_rawtemperature+0x3>
}
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	08 95       	ret

00000a94 <bmp085_getrawpressure>:

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
     a94:	4f 92       	push	r4
     a96:	5f 92       	push	r5
     a98:	6f 92       	push	r6
     a9a:	7f 92       	push	r7
     a9c:	8f 92       	push	r8
     a9e:	9f 92       	push	r9
     aa0:	af 92       	push	r10
     aa2:	bf 92       	push	r11
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	2b 97       	sbiw	r28, 0x0b	; 11
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
     ac4:	19 82       	std	Y+1, r1	; 0x01
     ac6:	1a 82       	std	Y+2, r1	; 0x02
     ac8:	1b 82       	std	Y+3, r1	; 0x03
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
     aca:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
     ace:	64 ef       	ldi	r22, 0xF4	; 244
     ad0:	84 ef       	ldi	r24, 0xF4	; 244
     ad2:	0e 94 77 03 	call	0x6ee	; 0x6ee <bmp085_writemem>
     ad6:	0f ef       	ldi	r16, 0xFF	; 255
     ad8:	14 e4       	ldi	r17, 0x44	; 68
     ada:	21 e0       	ldi	r18, 0x01	; 1
     adc:	01 50       	subi	r16, 0x01	; 1
     ade:	10 40       	sbci	r17, 0x00	; 0
     ae0:	20 40       	sbci	r18, 0x00	; 0
     ae2:	e1 f7       	brne	.-8      	; 0xadc <bmp085_getrawpressure+0x48>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <bmp085_getrawpressure+0x52>
     ae6:	00 00       	nop
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
     ae8:	43 e0       	ldi	r20, 0x03	; 3
     aea:	be 01       	movw	r22, r28
     aec:	6f 5f       	subi	r22, 0xFF	; 255
     aee:	7f 4f       	sbci	r23, 0xFF	; 255
     af0:	86 ef       	ldi	r24, 0xF6	; 246
     af2:	0e 94 8f 03 	call	0x71e	; 0x71e <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
     af6:	c0 90 89 01 	lds	r12, 0x0189	; 0x800189 <bmp085_rawtemperature>
     afa:	d0 90 8a 01 	lds	r13, 0x018A	; 0x80018a <bmp085_rawtemperature+0x1>
     afe:	e0 90 8b 01 	lds	r14, 0x018B	; 0x80018b <bmp085_rawtemperature+0x2>
     b02:	f0 90 8c 01 	lds	r15, 0x018C	; 0x80018c <bmp085_rawtemperature+0x3>
     b06:	30 ea       	ldi	r19, 0xA0	; 160
     b08:	c3 1a       	sub	r12, r19
     b0a:	3f e0       	ldi	r19, 0x0F	; 15
     b0c:	d3 0a       	sbc	r13, r19
     b0e:	e1 08       	sbc	r14, r1
     b10:	f1 08       	sbc	r15, r1
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
     b12:	a7 01       	movw	r20, r14
     b14:	96 01       	movw	r18, r12
     b16:	c7 01       	movw	r24, r14
     b18:	b6 01       	movw	r22, r12
     b1a:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsi3>
     b1e:	6c 83       	std	Y+4, r22	; 0x04
     b20:	7d 83       	std	Y+5, r23	; 0x05
     b22:	8e 83       	std	Y+6, r24	; 0x06
     b24:	9f 83       	std	Y+7, r25	; 0x07
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     b26:	80 90 93 01 	lds	r8, 0x0193	; 0x800193 <bmp085_regac1>
     b2a:	90 90 94 01 	lds	r9, 0x0194	; 0x800194 <bmp085_regac1+0x1>
	x1 = (bmp085_regac3 * b6) >> 13;
     b2e:	a0 91 7f 01 	lds	r26, 0x017F	; 0x80017f <bmp085_regac3>
     b32:	b0 91 80 01 	lds	r27, 0x0180	; 0x800180 <bmp085_regac3+0x1>
     b36:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__mulshisi3>
     b3a:	2b 01       	movw	r4, r22
     b3c:	3c 01       	movw	r6, r24
     b3e:	fd e0       	ldi	r31, 0x0D	; 13
     b40:	75 94       	asr	r7
     b42:	67 94       	ror	r6
     b44:	57 94       	ror	r5
     b46:	47 94       	ror	r4
     b48:	fa 95       	dec	r31
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <bmp085_getrawpressure+0xac>
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
     b4c:	a0 91 8d 01 	lds	r26, 0x018D	; 0x80018d <bmp085_regb1>
     b50:	b0 91 8e 01 	lds	r27, 0x018E	; 0x80018e <bmp085_regb1+0x1>
     b54:	2c 81       	ldd	r18, Y+4	; 0x04
     b56:	3d 81       	ldd	r19, Y+5	; 0x05
     b58:	4e 81       	ldd	r20, Y+6	; 0x06
     b5a:	5f 81       	ldd	r21, Y+7	; 0x07
     b5c:	1c e0       	ldi	r17, 0x0C	; 12
     b5e:	55 95       	asr	r21
     b60:	47 95       	ror	r20
     b62:	37 95       	ror	r19
     b64:	27 95       	ror	r18
     b66:	1a 95       	dec	r17
     b68:	d1 f7       	brne	.-12     	; 0xb5e <bmp085_getrawpressure+0xca>
     b6a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__mulshisi3>
     b6e:	bb 27       	eor	r27, r27
     b70:	97 fd       	sbrc	r25, 7
     b72:	b0 95       	com	r27
     b74:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
     b76:	84 0d       	add	r24, r4
     b78:	95 1d       	adc	r25, r5
     b7a:	a6 1d       	adc	r26, r6
     b7c:	b7 1d       	adc	r27, r7
     b7e:	02 96       	adiw	r24, 0x02	; 2
     b80:	a1 1d       	adc	r26, r1
     b82:	b1 1d       	adc	r27, r1
     b84:	22 e0       	ldi	r18, 0x02	; 2
     b86:	b5 95       	asr	r27
     b88:	a7 95       	ror	r26
     b8a:	97 95       	ror	r25
     b8c:	87 95       	ror	r24
     b8e:	2a 95       	dec	r18
     b90:	d1 f7       	brne	.-12     	; 0xb86 <bmp085_getrawpressure+0xf2>
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
     b92:	9c 01       	movw	r18, r24
     b94:	ad 01       	movw	r20, r26
     b96:	30 58       	subi	r19, 0x80	; 128
     b98:	4f 4f       	sbci	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <bmp085_regac4>
     ba0:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <bmp085_regac4+0x1>
     ba4:	0e 94 ae 0b 	call	0x175c	; 0x175c <__muluhisi3>
     ba8:	2b 01       	movw	r4, r22
     baa:	3c 01       	movw	r6, r24
     bac:	3f e0       	ldi	r19, 0x0F	; 15
     bae:	76 94       	lsr	r7
     bb0:	67 94       	ror	r6
     bb2:	57 94       	ror	r5
     bb4:	47 94       	ror	r4
     bb6:	3a 95       	dec	r19
     bb8:	d1 f7       	brne	.-12     	; 0xbae <bmp085_getrawpressure+0x11a>

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	2a 81       	ldd	r18, Y+2	; 0x02
     bbe:	42 2f       	mov	r20, r18
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	76 2f       	mov	r23, r22
     bc8:	65 2f       	mov	r22, r21
     bca:	54 2f       	mov	r21, r20
     bcc:	44 27       	eor	r20, r20
     bce:	68 2b       	or	r22, r24
     bd0:	8b 81       	ldd	r24, Y+3	; 0x03
     bd2:	8a 01       	movw	r16, r20
     bd4:	9b 01       	movw	r18, r22
     bd6:	08 2b       	or	r16, r24
     bd8:	f5 e0       	ldi	r31, 0x05	; 5
     bda:	35 95       	asr	r19
     bdc:	27 95       	ror	r18
     bde:	17 95       	ror	r17
     be0:	07 95       	ror	r16
     be2:	fa 95       	dec	r31
     be4:	d1 f7       	brne	.-12     	; 0xbda <bmp085_getrawpressure+0x146>
     be6:	08 87       	std	Y+8, r16	; 0x08
     be8:	19 87       	std	Y+9, r17	; 0x09
     bea:	2a 87       	std	Y+10, r18	; 0x0a
     bec:	3b 87       	std	Y+11, r19	; 0x0b
	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     bee:	09 2c       	mov	r0, r9
     bf0:	00 0c       	add	r0, r0
     bf2:	aa 08       	sbc	r10, r10
     bf4:	bb 08       	sbc	r11, r11
     bf6:	a2 e0       	ldi	r26, 0x02	; 2
     bf8:	88 0c       	add	r8, r8
     bfa:	99 1c       	adc	r9, r9
     bfc:	aa 1c       	adc	r10, r10
     bfe:	bb 1c       	adc	r11, r11
     c00:	aa 95       	dec	r26
     c02:	d1 f7       	brne	.-12     	; 0xbf8 <bmp085_getrawpressure+0x164>
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
     c04:	a0 91 79 01 	lds	r26, 0x0179	; 0x800179 <bmp085_regb2>
     c08:	b0 91 7a 01 	lds	r27, 0x017A	; 0x80017a <bmp085_regb2+0x1>
     c0c:	2c 81       	ldd	r18, Y+4	; 0x04
     c0e:	3d 81       	ldd	r19, Y+5	; 0x05
     c10:	4e 81       	ldd	r20, Y+6	; 0x06
     c12:	5f 81       	ldd	r21, Y+7	; 0x07
     c14:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__mulshisi3>
     c18:	8b 01       	movw	r16, r22
     c1a:	9c 01       	movw	r18, r24
     c1c:	b7 e1       	ldi	r27, 0x17	; 23
     c1e:	35 95       	asr	r19
     c20:	27 95       	ror	r18
     c22:	17 95       	ror	r17
     c24:	07 95       	ror	r16
     c26:	ba 95       	dec	r27
     c28:	d1 f7       	brne	.-12     	; 0xc1e <bmp085_getrawpressure+0x18a>
     c2a:	0c 83       	std	Y+4, r16	; 0x04
     c2c:	1d 83       	std	Y+5, r17	; 0x05
     c2e:	2e 83       	std	Y+6, r18	; 0x06
     c30:	3f 83       	std	Y+7, r19	; 0x07
	x2 = (bmp085_regac2 * b6) >> 11;
     c32:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <bmp085_regac2>
     c36:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <bmp085_regac2+0x1>
     c3a:	a7 01       	movw	r20, r14
     c3c:	96 01       	movw	r18, r12
     c3e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <__mulshisi3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	1b e0       	ldi	r17, 0x0B	; 11
     c48:	b5 95       	asr	r27
     c4a:	a7 95       	ror	r26
     c4c:	97 95       	ror	r25
     c4e:	87 95       	ror	r24
     c50:	1a 95       	dec	r17
     c52:	d1 f7       	brne	.-12     	; 0xc48 <bmp085_getrawpressure+0x1b4>
	x3 = x1 + x2;
     c54:	0c 81       	ldd	r16, Y+4	; 0x04
     c56:	1d 81       	ldd	r17, Y+5	; 0x05
     c58:	2e 81       	ldd	r18, Y+6	; 0x06
     c5a:	3f 81       	ldd	r19, Y+7	; 0x07
     c5c:	80 0f       	add	r24, r16
     c5e:	91 1f       	adc	r25, r17
     c60:	a2 1f       	adc	r26, r18
     c62:	b3 1f       	adc	r27, r19
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     c64:	88 0e       	add	r8, r24
     c66:	99 1e       	adc	r9, r25
     c68:	aa 1e       	adc	r10, r26
     c6a:	bb 1e       	adc	r11, r27
     c6c:	88 0c       	add	r8, r8
     c6e:	99 1c       	adc	r9, r9
     c70:	aa 1c       	adc	r10, r10
     c72:	bb 1c       	adc	r11, r11
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
     c74:	28 85       	ldd	r18, Y+8	; 0x08
     c76:	39 85       	ldd	r19, Y+9	; 0x09
     c78:	4a 85       	ldd	r20, Y+10	; 0x0a
     c7a:	5b 85       	ldd	r21, Y+11	; 0x0b
     c7c:	28 19       	sub	r18, r8
     c7e:	39 09       	sbc	r19, r9
     c80:	4a 09       	sbc	r20, r10
     c82:	5b 09       	sbc	r21, r11
     c84:	aa e6       	ldi	r26, 0x6A	; 106
     c86:	b8 e1       	ldi	r27, 0x18	; 24
     c88:	0e 94 ae 0b 	call	0x175c	; 0x175c <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
     c8c:	97 fd       	sbrc	r25, 7
     c8e:	0b c0       	rjmp	.+22     	; 0xca6 <bmp085_getrawpressure+0x212>
     c90:	66 0f       	add	r22, r22
     c92:	77 1f       	adc	r23, r23
     c94:	88 1f       	adc	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	a3 01       	movw	r20, r6
     c9a:	92 01       	movw	r18, r4
     c9c:	0e 94 6d 0b 	call	0x16da	; 0x16da <__udivmodsi4>
     ca0:	69 01       	movw	r12, r18
     ca2:	7a 01       	movw	r14, r20
     ca4:	0a c0       	rjmp	.+20     	; 0xcba <bmp085_getrawpressure+0x226>
     ca6:	a3 01       	movw	r20, r6
     ca8:	92 01       	movw	r18, r4
     caa:	0e 94 6d 0b 	call	0x16da	; 0x16da <__udivmodsi4>
     cae:	69 01       	movw	r12, r18
     cb0:	7a 01       	movw	r14, r20
     cb2:	cc 0c       	add	r12, r12
     cb4:	dd 1c       	adc	r13, r13
     cb6:	ee 1c       	adc	r14, r14
     cb8:	ff 1c       	adc	r15, r15
	x1 = (p >> 8) * (p >> 8);
     cba:	99 27       	eor	r25, r25
     cbc:	f7 fc       	sbrc	r15, 7
     cbe:	9a 95       	dec	r25
     cc0:	8f 2d       	mov	r24, r15
     cc2:	7e 2d       	mov	r23, r14
     cc4:	6d 2d       	mov	r22, r13
     cc6:	9b 01       	movw	r18, r22
     cc8:	ac 01       	movw	r20, r24
     cca:	0e 94 49 0b 	call	0x1692	; 0x1692 <__mulsi3>
     cce:	9b 01       	movw	r18, r22
     cd0:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
     cd2:	ae ed       	ldi	r26, 0xDE	; 222
     cd4:	bb e0       	ldi	r27, 0x0B	; 11
     cd6:	0e 94 ae 0b 	call	0x175c	; 0x175c <__muluhisi3>
     cda:	4c 01       	movw	r8, r24
     cdc:	bb 24       	eor	r11, r11
     cde:	97 fc       	sbrc	r9, 7
     ce0:	b0 94       	com	r11
     ce2:	ab 2c       	mov	r10, r11
	x2 = (-7357 * p) >> 16;
     ce4:	a3 e4       	ldi	r26, 0x43	; 67
     ce6:	b3 ee       	ldi	r27, 0xE3	; 227
     ce8:	a7 01       	movw	r20, r14
     cea:	96 01       	movw	r18, r12
     cec:	0e 94 bc 0b 	call	0x1778	; 0x1778 <__mulohisi3>
     cf0:	bb 27       	eor	r27, r27
     cf2:	97 fd       	sbrc	r25, 7
     cf4:	b0 95       	com	r27
     cf6:	ab 2f       	mov	r26, r27
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
     cf8:	88 0d       	add	r24, r8
     cfa:	99 1d       	adc	r25, r9
     cfc:	aa 1d       	adc	r26, r10
     cfe:	bb 1d       	adc	r27, r11
     d00:	81 53       	subi	r24, 0x31	; 49
     d02:	91 4f       	sbci	r25, 0xF1	; 241
     d04:	af 4f       	sbci	r26, 0xFF	; 255
     d06:	bf 4f       	sbci	r27, 0xFF	; 255
     d08:	44 e0       	ldi	r20, 0x04	; 4
     d0a:	b5 95       	asr	r27
     d0c:	a7 95       	ror	r26
     d0e:	97 95       	ror	r25
     d10:	87 95       	ror	r24
     d12:	4a 95       	dec	r20
     d14:	d1 f7       	brne	.-12     	; 0xd0a <bmp085_getrawpressure+0x276>
     d16:	bc 01       	movw	r22, r24
     d18:	cd 01       	movw	r24, r26
     d1a:	6c 0d       	add	r22, r12
     d1c:	7d 1d       	adc	r23, r13
     d1e:	8e 1d       	adc	r24, r14
     d20:	9f 1d       	adc	r25, r15
     d22:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <bmp085_rawpressure>
     d26:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <bmp085_rawpressure+0x1>
     d2a:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <bmp085_rawpressure+0x2>
     d2e:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <bmp085_rawpressure+0x3>

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
     d32:	0e 94 d6 03 	call	0x7ac	; 0x7ac <bmp085_avaragefilter>
     d36:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <bmp085_rawpressure>
     d3a:	70 93 7c 01 	sts	0x017C, r23	; 0x80017c <bmp085_rawpressure+0x1>
     d3e:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <bmp085_rawpressure+0x2>
     d42:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <bmp085_rawpressure+0x3>
	#endif
}
     d46:	2b 96       	adiw	r28, 0x0b	; 11
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	f8 94       	cli
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	cd bf       	out	0x3d, r28	; 61
     d52:	df 91       	pop	r29
     d54:	cf 91       	pop	r28
     d56:	1f 91       	pop	r17
     d58:	0f 91       	pop	r16
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	bf 90       	pop	r11
     d64:	af 90       	pop	r10
     d66:	9f 90       	pop	r9
     d68:	8f 90       	pop	r8
     d6a:	7f 90       	pop	r7
     d6c:	6f 90       	pop	r6
     d6e:	5f 90       	pop	r5
     d70:	4f 90       	pop	r4
     d72:	08 95       	ret

00000d74 <bmp085_gettemperature>:

/*
 * get celsius temperature
 */
double bmp085_gettemperature() {
	bmp085_getrawtemperature();
     d74:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <bmp085_getrawtemperature>
	double temperature = ((bmp085_rawtemperature + 8)>>4);
     d78:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <bmp085_rawtemperature>
     d7c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <bmp085_rawtemperature+0x1>
     d80:	a0 91 8b 01 	lds	r26, 0x018B	; 0x80018b <bmp085_rawtemperature+0x2>
     d84:	b0 91 8c 01 	lds	r27, 0x018C	; 0x80018c <bmp085_rawtemperature+0x3>
     d88:	08 96       	adiw	r24, 0x08	; 8
     d8a:	a1 1d       	adc	r26, r1
     d8c:	b1 1d       	adc	r27, r1
     d8e:	bc 01       	movw	r22, r24
     d90:	cd 01       	movw	r24, r26
     d92:	24 e0       	ldi	r18, 0x04	; 4
     d94:	95 95       	asr	r25
     d96:	87 95       	ror	r24
     d98:	77 95       	ror	r23
     d9a:	67 95       	ror	r22
     d9c:	2a 95       	dec	r18
     d9e:	d1 f7       	brne	.-12     	; 0xd94 <bmp085_gettemperature+0x20>
     da0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__floatsisf>
	//temperature = temperature /10;
	return temperature;
}
     da4:	08 95       	ret

00000da6 <bmp085_getpressure>:

/*
 * get pressure with offset in BMP085.h and user pressure corection
 */
int32_t bmp085_getpressure(int32_t gPressCorr) {
     da6:	cf 92       	push	r12
     da8:	df 92       	push	r13
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <bmp085_getpressure+0xe>
     db4:	00 d0       	rcall	.+0      	; 0xdb6 <bmp085_getpressure+0x10>
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
	bmp085_getrawpressure();
     dba:	69 83       	std	Y+1, r22	; 0x01
     dbc:	7a 83       	std	Y+2, r23	; 0x02
     dbe:	8b 83       	std	Y+3, r24	; 0x03
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	0e 94 4a 05 	call	0xa94	; 0xa94 <bmp085_getrawpressure>
	return bmp085_rawpressure + BMP085_UNITPAOFFSET + gPressCorr;
     dc6:	c0 90 7b 01 	lds	r12, 0x017B	; 0x80017b <bmp085_rawpressure>
     dca:	d0 90 7c 01 	lds	r13, 0x017C	; 0x80017c <bmp085_rawpressure+0x1>
     dce:	e0 90 7d 01 	lds	r14, 0x017D	; 0x80017d <bmp085_rawpressure+0x2>
     dd2:	f0 90 7e 01 	lds	r15, 0x017E	; 0x80017e <bmp085_rawpressure+0x3>
     dd6:	69 81       	ldd	r22, Y+1	; 0x01
     dd8:	7a 81       	ldd	r23, Y+2	; 0x02
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	9c 81       	ldd	r25, Y+4	; 0x04
     dde:	6c 0d       	add	r22, r12
     de0:	7d 1d       	adc	r23, r13
     de2:	8e 1d       	adc	r24, r14
     de4:	9f 1d       	adc	r25, r15
}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	08 95       	ret

00000dfc <bmp085_getaltitude>:

/*
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
     dfc:	0e 94 4a 05 	call	0xa94	; 0xa94 <bmp085_getrawpressure>
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
     e00:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <bmp085_rawpressure>
     e04:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <bmp085_rawpressure+0x1>
     e08:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <bmp085_rawpressure+0x2>
     e0c:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <bmp085_rawpressure+0x3>
     e10:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__floatsisf>
     e14:	20 e8       	ldi	r18, 0x80	; 128
     e16:	36 ee       	ldi	r19, 0xE6	; 230
     e18:	45 ec       	ldi	r20, 0xC5	; 197
     e1a:	57 e4       	ldi	r21, 0x47	; 71
     e1c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divsf3>
     e20:	21 e0       	ldi	r18, 0x01	; 1
     e22:	3e ed       	ldi	r19, 0xDE	; 222
     e24:	42 e4       	ldi	r20, 0x42	; 66
     e26:	5e e3       	ldi	r21, 0x3E	; 62
     e28:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <pow>
     e2c:	9b 01       	movw	r18, r22
     e2e:	ac 01       	movw	r20, r24
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	80 e8       	ldi	r24, 0x80	; 128
     e36:	9f e3       	ldi	r25, 0x3F	; 63
     e38:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__subsf3>
     e3c:	2b e4       	ldi	r18, 0x4B	; 75
     e3e:	3a e3       	ldi	r19, 0x3A	; 58
     e40:	4d eb       	ldi	r20, 0xBD	; 189
     e42:	57 e3       	ldi	r21, 0x37	; 55
     e44:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divsf3>
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	a9 01       	movw	r20, r18
     e4e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__addsf3>
}
     e52:	08 95       	ret

00000e54 <bmp085_init>:

/*
 * init bmp085
 */
void bmp085_init() {
     e54:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
     e56:	0e 94 3c 07 	call	0xe78	; 0xe78 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e5a:	85 e3       	ldi	r24, 0x35	; 53
     e5c:	8a 95       	dec	r24
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <bmp085_init+0x8>
     e60:	00 00       	nop
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
     e62:	0e 94 09 04 	call	0x812	; 0x812 <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
     e66:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <bmp085_getrawtemperature>
     e6a:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
     e6c:	0e 94 4a 05 	call	0xa94	; 0xa94 <bmp085_getrawpressure>
     e70:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     e72:	e1 f7       	brne	.-8      	; 0xe6c <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
     e74:	cf 91       	pop	r28
     e76:	08 95       	ret

00000e78 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     e78:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     e7c:	88 e4       	ldi	r24, 0x48	; 72
     e7e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     e82:	08 95       	ret

00000e84 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     e84:	94 ea       	ldi	r25, 0xA4	; 164
     e86:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     e8a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e8e:	97 ff       	sbrs	r25, 7
     e90:	fc cf       	rjmp	.-8      	; 0xe8a <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     e92:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     e96:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     e98:	98 30       	cpi	r25, 0x08	; 8
     e9a:	21 f0       	breq	.+8      	; 0xea4 <i2c_start+0x20>
     e9c:	90 31       	cpi	r25, 0x10	; 16
     e9e:	11 f0       	breq	.+4      	; 0xea4 <i2c_start+0x20>
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	08 95       	ret

	// send device address
	TWDR = address;
     ea4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     ea8:	84 e8       	ldi	r24, 0x84	; 132
     eaa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     eae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     eb2:	87 ff       	sbrs	r24, 7
     eb4:	fc cf       	rjmp	.-8      	; 0xeae <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     eb6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     eba:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     ebc:	88 31       	cpi	r24, 0x18	; 24
     ebe:	11 f0       	breq	.+4      	; 0xec4 <i2c_start+0x40>
     ec0:	80 34       	cpi	r24, 0x40	; 64
     ec2:	71 f7       	brne	.-36     	; 0xea0 <i2c_start+0x1c>

	return 0;
     ec4:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     ec6:	08 95       	ret

00000ec8 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     ec8:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
     eca:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     ecc:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     ece:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     ed2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ed6:	97 ff       	sbrs	r25, 7
     ed8:	fc cf       	rjmp	.-8      	; 0xed2 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     eda:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     ede:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     ee0:	98 30       	cpi	r25, 0x08	; 8
     ee2:	11 f0       	breq	.+4      	; 0xee8 <i2c_start_wait+0x20>
     ee4:	90 31       	cpi	r25, 0x10	; 16
     ee6:	99 f7       	brne	.-26     	; 0xece <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
     ee8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
     eec:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
     ef0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ef4:	97 ff       	sbrs	r25, 7
     ef6:	fc cf       	rjmp	.-8      	; 0xef0 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     ef8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     efc:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     efe:	90 32       	cpi	r25, 0x20	; 32
     f00:	11 f0       	breq	.+4      	; 0xf06 <i2c_start_wait+0x3e>
     f02:	98 35       	cpi	r25, 0x58	; 88
     f04:	39 f4       	brne	.+14     	; 0xf14 <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f06:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
     f0a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f0e:	94 fd       	sbrc	r25, 4
     f10:	fc cf       	rjmp	.-8      	; 0xf0a <i2c_start_wait+0x42>
     f12:	dd cf       	rjmp	.-70     	; 0xece <i2c_start_wait+0x6>
     f14:	08 95       	ret

00000f16 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     f16:	0c 94 42 07 	jmp	0xe84	; 0xe84 <i2c_start>

00000f1a <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     f1a:	84 e9       	ldi	r24, 0x94	; 148
     f1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     f20:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f24:	84 fd       	sbrc	r24, 4
     f26:	fc cf       	rjmp	.-8      	; 0xf20 <i2c_stop+0x6>

}/* i2c_stop */
     f28:	08 95       	ret

00000f2a <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     f2a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     f2e:	84 e8       	ldi	r24, 0x84	; 132
     f30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     f34:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f38:	87 ff       	sbrs	r24, 7
     f3a:	fc cf       	rjmp	.-8      	; 0xf34 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     f3c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f40:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	98 32       	cpi	r25, 0x28	; 40
     f46:	09 f4       	brne	.+2      	; 0xf4a <i2c_write+0x20>
     f48:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     f4a:	08 95       	ret

00000f4c <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     f4c:	84 ec       	ldi	r24, 0xC4	; 196
     f4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
     f52:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f56:	87 ff       	sbrs	r24, 7
     f58:	fc cf       	rjmp	.-8      	; 0xf52 <i2c_readAck+0x6>

    return TWDR;
     f5a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
     f5e:	08 95       	ret

00000f60 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     f60:	84 e8       	ldi	r24, 0x84	; 132
     f62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
     f66:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f6a:	87 ff       	sbrs	r24, 7
     f6c:	fc cf       	rjmp	.-8      	; 0xf66 <i2c_readNak+0x6>
	
    return TWDR;
     f6e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
     f72:	08 95       	ret

00000f74 <main>:
       
	   
	//DDRB |=(1<<PB3); //LED blink
	//PORTB|=(1<<PB3);
	// Port C initialization DS18b20 //
	DDRC &= ~(1 << PC0);   
     f74:	38 98       	cbi	0x07, 0	; 7
    PORTC &= ~(1 << PC0);   
     f76:	40 98       	cbi	0x08, 0	; 8
	DDRC &= ~(1 << PC1);   
     f78:	39 98       	cbi	0x07, 1	; 7
    PORTC &= ~(1 << PC1);   
     f7a:	41 98       	cbi	0x08, 1	; 8
	DDRC &= ~(1 << PC2);   
     f7c:	3a 98       	cbi	0x07, 2	; 7
    PORTC &= ~(1 << PC2);   
     f7e:	42 98       	cbi	0x08, 2	; 8
	DDRC &= ~(1 << PC3);   
     f80:	3b 98       	cbi	0x07, 3	; 7
    PORTC &= ~(1 << PC3);
     f82:	43 98       	cbi	0x08, 3	; 8
	DDRD &= ~(1 << PD3);   
     f84:	53 98       	cbi	0x0a, 3	; 10
    PORTD &= ~(1 << PD3);   
     f86:	5b 98       	cbi	0x0b, 3	; 11
	DDRD &= ~(1 << PD4);   
     f88:	54 98       	cbi	0x0a, 4	; 10
    PORTD &= ~(1 << PD4);   
     f8a:	5c 98       	cbi	0x0b, 4	; 11
	// enable interrupt
	sei();
     f8c:	78 94       	sei
	//deny interrupt
	//cli(); 
	//Watchdog initialization.
	wdt_reset();
     f8e:	a8 95       	wdr
	//wdt_enable(WDTO_8S); // for 5V supply,  At lower supply voltages, the times will increase 

	lcd_init( LCD_DISP_ON);
     f90:	8c e0       	ldi	r24, 0x0C	; 12
     f92:	0e 94 af 01 	call	0x35e	; 0x35e <lcd_init>
	 lcd_clrscr();
     f96:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clrscr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f9a:	2f ef       	ldi	r18, 0xFF	; 255
     f9c:	37 ee       	ldi	r19, 0xE7	; 231
     f9e:	43 e0       	ldi	r20, 0x03	; 3
     fa0:	21 50       	subi	r18, 0x01	; 1
     fa2:	30 40       	sbci	r19, 0x00	; 0
     fa4:	40 40       	sbci	r20, 0x00	; 0
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <main+0x2c>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <main+0x36>
     faa:	00 00       	nop
	 _delay_ms(80);
	
	 lcd_gotoxy( 1, 0);
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	 lcd_puts_P( " modbus temp 0.1");
     fb4:	84 e7       	ldi	r24, 0x74	; 116
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
     fbc:	5f ef       	ldi	r21, 0xFF	; 255
     fbe:	67 e9       	ldi	r22, 0x97	; 151
     fc0:	8a e3       	ldi	r24, 0x3A	; 58
     fc2:	51 50       	subi	r21, 0x01	; 1
     fc4:	60 40       	sbci	r22, 0x00	; 0
     fc6:	80 40       	sbci	r24, 0x00	; 0
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <main+0x4e>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <main+0x58>
     fcc:	00 00       	nop
	 _delay_ms(1200);
	 lcd_gotoxy( 2, 1);		//column , row
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	 lcd_puts_P( "kontrola snimacov");
     fd6:	82 e6       	ldi	r24, 0x62	; 98
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	 lcd_gotoxy( 3, 2);		//column , row
     fde:	62 e0       	ldi	r22, 0x02	; 2
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	 lcd_puts_P( "DS18b20"); // msg0
     fe6:	8a e5       	ldi	r24, 0x5A	; 90
     fe8:	91 e0       	ldi	r25, 0x01	; 1
     fea:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
     fee:	9f ef       	ldi	r25, 0xFF	; 255
     ff0:	a9 e6       	ldi	r26, 0x69	; 105
     ff2:	b8 e1       	ldi	r27, 0x18	; 24
     ff4:	91 50       	subi	r25, 0x01	; 1
     ff6:	a0 40       	sbci	r26, 0x00	; 0
     ff8:	b0 40       	sbci	r27, 0x00	; 0
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <main+0x80>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <main+0x8a>
     ffe:	00 00       	nop
	 _delay_ms(500);
	lcd_clrscr();
    1000:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clrscr>

	lcd_gotoxy( 0, 0); // stlpec-riadok
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "S1:");
    100c:	86 e5       	ldi	r24, 0x56	; 86
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	Device1Presence = ds18b20_reset(&PORTC,PC0);
    1014:	60 e0       	ldi	r22, 0x00	; 0
    1016:	88 e2       	ldi	r24, 0x28	; 40
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ds18b20_reset>
    101e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Device1Presence>
	lcd_gotoxy( 4, 0);
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	84 e0       	ldi	r24, 0x04	; 4
    1026:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	if(Device1Presence)
    102a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Device1Presence>
    102e:	88 23       	and	r24, r24
    1030:	31 f0       	breq	.+12     	; 0x103e <main+0xca>
			lcd_puts_P( "OK");
    1032:	83 e5       	ldi	r24, 0x53	; 83
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
char printbuff[10];

int main(void)
{
	int desatiny,cele;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    103a:	21 2c       	mov	r2, r1
    103c:	0a c0       	rjmp	.+20     	; 0x1052 <main+0xde>
	lcd_puts_P( "S1:");
	Device1Presence = ds18b20_reset(&PORTC,PC0);
	lcd_gotoxy( 4, 0);
	if(Device1Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 0);lcd_puts_P( "----");chyba1=1;}
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	84 e0       	ldi	r24, 0x04	; 4
    1042:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
    1046:	8e e4       	ldi	r24, 0x4E	; 78
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
    104e:	22 24       	eor	r2, r2
    1050:	23 94       	inc	r2
    1052:	ef ef       	ldi	r30, 0xFF	; 255
    1054:	f1 ee       	ldi	r31, 0xE1	; 225
    1056:	24 e0       	ldi	r18, 0x04	; 4
    1058:	e1 50       	subi	r30, 0x01	; 1
    105a:	f0 40       	sbci	r31, 0x00	; 0
    105c:	20 40       	sbci	r18, 0x00	; 0
    105e:	e1 f7       	brne	.-8      	; 0x1058 <main+0xe4>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <main+0xee>
    1062:	00 00       	nop
	_delay_ms(100);

	Device2Presence = ds18b20_reset(&PORTC,PC1);
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	88 e2       	ldi	r24, 0x28	; 40
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ds18b20_reset>
    106e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Device2Presence>
	lcd_gotoxy( 0, 1);
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "S2:");
    107a:	8a e4       	ldi	r24, 0x4A	; 74
    107c:	91 e0       	ldi	r25, 0x01	; 1
    107e:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 4, 1);
    1082:	61 e0       	ldi	r22, 0x01	; 1
    1084:	84 e0       	ldi	r24, 0x04	; 4
    1086:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	if(Device2Presence)
    108a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Device2Presence>
    108e:	88 23       	and	r24, r24
    1090:	31 f0       	breq	.+12     	; 0x109e <main+0x12a>
			lcd_puts_P( "OK");
    1092:	87 e4       	ldi	r24, 0x47	; 71
    1094:	91 e0       	ldi	r25, 0x01	; 1
    1096:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
char printbuff[10];

int main(void)
{
	int desatiny,cele;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    109a:	31 2c       	mov	r3, r1
    109c:	0a c0       	rjmp	.+20     	; 0x10b2 <main+0x13e>
	lcd_gotoxy( 0, 1);
	lcd_puts_P( "S2:");
	lcd_gotoxy( 4, 1);
	if(Device2Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 1);lcd_puts_P( "----");chyba2=1;}
    109e:	61 e0       	ldi	r22, 0x01	; 1
    10a0:	84 e0       	ldi	r24, 0x04	; 4
    10a2:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
    10a6:	82 e4       	ldi	r24, 0x42	; 66
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
    10ae:	33 24       	eor	r3, r3
    10b0:	33 94       	inc	r3
    10b2:	3f ef       	ldi	r19, 0xFF	; 255
    10b4:	41 ee       	ldi	r20, 0xE1	; 225
    10b6:	54 e0       	ldi	r21, 0x04	; 4
    10b8:	31 50       	subi	r19, 0x01	; 1
    10ba:	40 40       	sbci	r20, 0x00	; 0
    10bc:	50 40       	sbci	r21, 0x00	; 0
    10be:	e1 f7       	brne	.-8      	; 0x10b8 <main+0x144>
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <main+0x14e>
    10c2:	00 00       	nop
	_delay_ms(100);

	Device3Presence = ds18b20_reset(&PORTC,PC2);
    10c4:	62 e0       	ldi	r22, 0x02	; 2
    10c6:	88 e2       	ldi	r24, 0x28	; 40
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ds18b20_reset>
    10ce:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Device3Presence>
	lcd_gotoxy( 0, 2);
    10d2:	62 e0       	ldi	r22, 0x02	; 2
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "S3:");
    10da:	8e e3       	ldi	r24, 0x3E	; 62
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 4, 2);
    10e2:	62 e0       	ldi	r22, 0x02	; 2
    10e4:	84 e0       	ldi	r24, 0x04	; 4
    10e6:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	if(Device3Presence)
    10ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Device3Presence>
    10ee:	88 23       	and	r24, r24
    10f0:	31 f0       	breq	.+12     	; 0x10fe <main+0x18a>
			lcd_puts_P( "OK");
    10f2:	8b e3       	ldi	r24, 0x3B	; 59
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
char printbuff[10];

int main(void)
{
	int desatiny,cele;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    10fa:	c1 2c       	mov	r12, r1
    10fc:	0a c0       	rjmp	.+20     	; 0x1112 <main+0x19e>
	lcd_gotoxy( 0, 2);
	lcd_puts_P( "S3:");
	lcd_gotoxy( 4, 2);
	if(Device3Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 1);lcd_puts_P( "----");chyba3=1;}
    10fe:	61 e0       	ldi	r22, 0x01	; 1
    1100:	84 e0       	ldi	r24, 0x04	; 4
    1102:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
    1106:	86 e3       	ldi	r24, 0x36	; 54
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
    110e:	cc 24       	eor	r12, r12
    1110:	c3 94       	inc	r12
    1112:	6f ef       	ldi	r22, 0xFF	; 255
    1114:	81 ee       	ldi	r24, 0xE1	; 225
    1116:	94 e0       	ldi	r25, 0x04	; 4
    1118:	61 50       	subi	r22, 0x01	; 1
    111a:	80 40       	sbci	r24, 0x00	; 0
    111c:	90 40       	sbci	r25, 0x00	; 0
    111e:	e1 f7       	brne	.-8      	; 0x1118 <main+0x1a4>
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <main+0x1ae>
    1122:	00 00       	nop
	_delay_ms(100);

	Device4Presence = ds18b20_reset(&PORTC,PC3);
    1124:	63 e0       	ldi	r22, 0x03	; 3
    1126:	88 e2       	ldi	r24, 0x28	; 40
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <ds18b20_reset>
    112e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <Device4Presence>
	lcd_gotoxy( 0, 3);
    1132:	63 e0       	ldi	r22, 0x03	; 3
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "S4:");
    113a:	82 e3       	ldi	r24, 0x32	; 50
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 4, 3);
    1142:	63 e0       	ldi	r22, 0x03	; 3
    1144:	84 e0       	ldi	r24, 0x04	; 4
    1146:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>

	if(Device4Presence)
    114a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <Device4Presence>
    114e:	88 23       	and	r24, r24
    1150:	31 f0       	breq	.+12     	; 0x115e <main+0x1ea>
			lcd_puts_P( "OK");
    1152:	8f e2       	ldi	r24, 0x2F	; 47
    1154:	91 e0       	ldi	r25, 0x01	; 1
    1156:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
char printbuff[10];

int main(void)
{
	int desatiny,cele;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    115a:	d1 2c       	mov	r13, r1
    115c:	0a c0       	rjmp	.+20     	; 0x1172 <main+0x1fe>
	lcd_puts_P( "S4:");
	lcd_gotoxy( 4, 3);

	if(Device4Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 3);lcd_puts_P( "----");chyba4=1;}
    115e:	63 e0       	ldi	r22, 0x03	; 3
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
    1166:	8a e2       	ldi	r24, 0x2A	; 42
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
    116e:	dd 24       	eor	r13, r13
    1170:	d3 94       	inc	r13
    1172:	af ef       	ldi	r26, 0xFF	; 255
    1174:	b3 ed       	ldi	r27, 0xD3	; 211
    1176:	e0 e3       	ldi	r30, 0x30	; 48
    1178:	a1 50       	subi	r26, 0x01	; 1
    117a:	b0 40       	sbci	r27, 0x00	; 0
    117c:	e0 40       	sbci	r30, 0x00	; 0
    117e:	e1 f7       	brne	.-8      	; 0x1178 <main+0x204>
    1180:	00 c0       	rjmp	.+0      	; 0x1182 <main+0x20e>
    1182:	00 00       	nop
	//chyba2=0;
	//chyba3=0;
	//chyba4=0;
//-----------------------------------------

	lcd_gotoxy( 0, 0);
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "K1:");
    118c:	86 e2       	ldi	r24, 0x26	; 38
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 3, 0);
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	83 e0       	ldi	r24, 0x03	; 3
    1198:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>

	if(chyba1==0)
    119c:	21 10       	cpse	r2, r1
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <main+0x238>
		{	read_ROM_CODE(&PORTC,PC0); 
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	88 e2       	ldi	r24, 0x28	; 40
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 ae 02 	call	0x55c	; 0x55c <read_ROM_CODE>
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <main+0x240>
			
		}
		else {
			lcd_puts_P( "----");
    11ac:	81 e2       	ldi	r24, 0x21	; 33
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
			}
	lcd_gotoxy( 0, 1);
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "K2:");
    11bc:	8d e1       	ldi	r24, 0x1D	; 29
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 3, 1);
    11c4:	61 e0       	ldi	r22, 0x01	; 1
    11c6:	83 e0       	ldi	r24, 0x03	; 3
    11c8:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>

	if(chyba2==0)
    11cc:	31 10       	cpse	r3, r1
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <main+0x268>
		{	read_ROM_CODE(&PORTC,PC1); 
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	88 e2       	ldi	r24, 0x28	; 40
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 ae 02 	call	0x55c	; 0x55c <read_ROM_CODE>
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <main+0x270>
			
		}
		else {
			lcd_puts_P( "----");
    11dc:	88 e1       	ldi	r24, 0x18	; 24
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
			}
	
	lcd_gotoxy( 0, 2);
    11e4:	62 e0       	ldi	r22, 0x02	; 2
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "K3:");
    11ec:	84 e1       	ldi	r24, 0x14	; 20
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 3, 2);
    11f4:	62 e0       	ldi	r22, 0x02	; 2
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	
	if(chyba3==0)
    11fc:	c1 10       	cpse	r12, r1
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <main+0x298>
		{
			read_ROM_CODE(&PORTC,PC2);
    1200:	62 e0       	ldi	r22, 0x02	; 2
    1202:	88 e2       	ldi	r24, 0x28	; 40
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 94 ae 02 	call	0x55c	; 0x55c <read_ROM_CODE>
    120a:	04 c0       	rjmp	.+8      	; 0x1214 <main+0x2a0>
		}
		else {
			lcd_puts_P( "----");
    120c:	8f e0       	ldi	r24, 0x0F	; 15
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
			}
	lcd_gotoxy( 0, 3);
    1214:	63 e0       	ldi	r22, 0x03	; 3
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "K4:");
    121c:	8b e0       	ldi	r24, 0x0B	; 11
    121e:	91 e0       	ldi	r25, 0x01	; 1
    1220:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 3, 3);
    1224:	63 e0       	ldi	r22, 0x03	; 3
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	
	if(chyba4==0)
    122c:	d1 10       	cpse	r13, r1
    122e:	06 c0       	rjmp	.+12     	; 0x123c <main+0x2c8>
		{
			read_ROM_CODE(&PORTC,PC3);
    1230:	63 e0       	ldi	r22, 0x03	; 3
    1232:	88 e2       	ldi	r24, 0x28	; 40
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 ae 02 	call	0x55c	; 0x55c <read_ROM_CODE>
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <main+0x2d0>
		}
		else {
			lcd_puts_P( "----");
    123c:	86 e0       	ldi	r24, 0x06	; 6
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>

		/*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
    1244:	80 e4       	ldi	r24, 0x40	; 64
    1246:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_command>
    124a:	c5 e8       	ldi	r28, 0x85	; 133
    124c:	d1 e0       	ldi	r29, 0x01	; 1
    124e:	1c 2f       	mov	r17, r28
    1250:	18 5e       	subi	r17, 0xE8	; 232
       for(i=0; i<24; i++)
       {
          lcd_data(pgm_read_byte_near(&userChar[i]));
    1252:	fe 01       	movw	r30, r28
    1254:	84 91       	lpm	r24, Z
    1256:	0e 94 40 01 	call	0x280	; 0x280 <lcd_data>
    125a:	21 96       	adiw	r28, 0x01	; 1
		/*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
       for(i=0; i<24; i++)
    125c:	1c 13       	cpse	r17, r28
    125e:	f9 cf       	rjmp	.-14     	; 0x1252 <main+0x2de>
       {
          lcd_data(pgm_read_byte_near(&userChar[i]));
       }

// set up bmp085board
	bmp085_init();
    1260:	0e 94 2a 07 	call	0xe54	; 0xe54 <bmp085_init>
    1264:	2f ef       	ldi	r18, 0xFF	; 255
    1266:	39 e6       	ldi	r19, 0x69	; 105
    1268:	48 e1       	ldi	r20, 0x18	; 24
    126a:	21 50       	subi	r18, 0x01	; 1
    126c:	30 40       	sbci	r19, 0x00	; 0
    126e:	40 40       	sbci	r20, 0x00	; 0
    1270:	e1 f7       	brne	.-8      	; 0x126a <main+0x2f6>
    1272:	00 c0       	rjmp	.+0      	; 0x1274 <main+0x300>
    1274:	00 00       	nop

	_delay_ms(500);
	lcd_clrscr();
    1276:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_clrscr>

	lcd_gotoxy( 0, 0);
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "S1:");
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	91 e0       	ldi	r25, 0x01	; 1
    1286:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 0, 1);
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "S2:");
    1292:	8e ef       	ldi	r24, 0xFE	; 254
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 0, 2);
    129a:	62 e0       	ldi	r22, 0x02	; 2
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "S3:");
    12a2:	8a ef       	ldi	r24, 0xFA	; 250
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 0, 3);
    12aa:	63 e0       	ldi	r22, 0x03	; 3
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "S4:");
    12b2:	86 ef       	ldi	r24, 0xF6	; 246
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 11, 2);
    12ba:	62 e0       	ldi	r22, 0x02	; 2
    12bc:	8b e0       	ldi	r24, 0x0B	; 11
    12be:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "S5:");
    12c2:	82 ef       	ldi	r24, 0xF2	; 242
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
	lcd_gotoxy( 11, 3);
    12ca:	63 e0       	ldi	r22, 0x03	; 3
    12cc:	8b e0       	ldi	r24, 0x0B	; 11
    12ce:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
	lcd_puts_P( "S6:");
    12d2:	8e ee       	ldi	r24, 0xEE	; 238
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
		//wdt_reset(); 
		
		if(chyba1==0)
		{
		CurrentTemp1 = ds18b20_gettemp(&PORTC,PC0); // decicelsius
		cele = CurrentTemp1/10;
    12da:	8a e0       	ldi	r24, 0x0A	; 10
    12dc:	e8 2e       	mov	r14, r24
    12de:	f1 2c       	mov	r15, r1
		desatiny = ( CurrentTemp1 - (cele*10) );
		lcd_gotoxy( 3, 0);
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    12e0:	06 e0       	ldi	r16, 0x06	; 6
    12e2:	11 e0       	ldi	r17, 0x01	; 1
    12e4:	cb e9       	ldi	r28, 0x9B	; 155
    12e6:	d1 e0       	ldi	r29, 0x01	; 1

	//while(1)
	//{
		//wdt_reset(); 
		
		if(chyba1==0)
    12e8:	21 10       	cpse	r2, r1
    12ea:	30 c0       	rjmp	.+96     	; 0x134c <main+0x3d8>
		{
		CurrentTemp1 = ds18b20_gettemp(&PORTC,PC0); // decicelsius
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	88 e2       	ldi	r24, 0x28	; 40
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ds18b20_gettemp>
    12f6:	9c 01       	movw	r18, r24
    12f8:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <CurrentTemp1+0x1>
    12fc:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <CurrentTemp1>
		cele = CurrentTemp1/10;
    1300:	b7 01       	movw	r22, r14
    1302:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__divmodhi4>
    1306:	4b 01       	movw	r8, r22
		desatiny = ( CurrentTemp1 - (cele*10) );
    1308:	56 ef       	ldi	r21, 0xF6	; 246
    130a:	56 03       	mulsu	r21, r22
    130c:	50 01       	movw	r10, r0
    130e:	57 9f       	mul	r21, r23
    1310:	b0 0c       	add	r11, r0
    1312:	11 24       	eor	r1, r1
    1314:	a2 0e       	add	r10, r18
    1316:	b3 1e       	adc	r11, r19
		lcd_gotoxy( 3, 0);
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    1320:	bf 92       	push	r11
    1322:	af 92       	push	r10
    1324:	9f 92       	push	r9
    1326:	8f 92       	push	r8
    1328:	1f 93       	push	r17
    132a:	0f 93       	push	r16
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <sprintf>
		lcd_puts(CharBuffer);
    1334:	8b e9       	ldi	r24, 0x9B	; 155
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
    133c:	ad b7       	in	r26, 0x3d	; 61
    133e:	be b7       	in	r27, 0x3e	; 62
    1340:	18 96       	adiw	r26, 0x08	; 8
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	be bf       	out	0x3e, r27	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	ad bf       	out	0x3d, r26	; 61
		}
	//------------print user text------------------------------------
	
		lcd_gotoxy( 9, 0);
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	89 e0       	ldi	r24, 0x09	; 9
    1350:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putc>
		lcd_text("C");

		*/	
		//_delay_ms(200);
		
		if(chyba2==0)
    135a:	31 10       	cpse	r3, r1
    135c:	2f c0       	rjmp	.+94     	; 0x13bc <main+0x448>
		{
		CurrentTemp2 = ds18b20_gettemp(&PORTC,PC1);
    135e:	61 e0       	ldi	r22, 0x01	; 1
    1360:	88 e2       	ldi	r24, 0x28	; 40
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ds18b20_gettemp>
    1368:	9c 01       	movw	r18, r24
    136a:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <CurrentTemp2+0x1>
    136e:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <CurrentTemp2>
		cele = CurrentTemp2/10;
    1372:	b7 01       	movw	r22, r14
    1374:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__divmodhi4>
		desatiny = (CurrentTemp2 - (cele*10) );
    1378:	46 ef       	ldi	r20, 0xF6	; 246
    137a:	46 03       	mulsu	r20, r22
    137c:	c0 01       	movw	r24, r0
    137e:	47 9f       	mul	r20, r23
    1380:	90 0d       	add	r25, r0
    1382:	11 24       	eor	r1, r1
    1384:	28 0f       	add	r18, r24
    1386:	39 1f       	adc	r19, r25
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    1388:	3f 93       	push	r19
    138a:	2f 93       	push	r18
    138c:	7f 93       	push	r23
    138e:	6f 93       	push	r22
    1390:	1f 93       	push	r17
    1392:	0f 93       	push	r16
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <sprintf>
		//sprintf( CharBuffer, "%i \xC6\n",CurrentTemp2);
		lcd_gotoxy( 3, 1);
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    13a4:	8b e9       	ldi	r24, 0x9B	; 155
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
    13ac:	8d b7       	in	r24, 0x3d	; 61
    13ae:	9e b7       	in	r25, 0x3e	; 62
    13b0:	08 96       	adiw	r24, 0x08	; 8
    13b2:	0f b6       	in	r0, 0x3f	; 63
    13b4:	f8 94       	cli
    13b6:	9e bf       	out	0x3e, r25	; 62
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	8d bf       	out	0x3d, r24	; 61
		}
		lcd_gotoxy( 9, 1);
    13bc:	61 e0       	ldi	r22, 0x01	; 1
    13be:	89 e0       	ldi	r24, 0x09	; 9
    13c0:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putc>
    13ca:	9f ef       	ldi	r25, 0xFF	; 255
    13cc:	a1 ee       	ldi	r26, 0xE1	; 225
    13ce:	b4 e0       	ldi	r27, 0x04	; 4
    13d0:	91 50       	subi	r25, 0x01	; 1
    13d2:	a0 40       	sbci	r26, 0x00	; 0
    13d4:	b0 40       	sbci	r27, 0x00	; 0
    13d6:	e1 f7       	brne	.-8      	; 0x13d0 <main+0x45c>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <main+0x466>
    13da:	00 00       	nop
			
		_delay_ms(100);

		if(chyba3==0)
    13dc:	c1 10       	cpse	r12, r1
    13de:	2f c0       	rjmp	.+94     	; 0x143e <main+0x4ca>
		{
		CurrentTemp3 = ds18b20_gettemp(&PORTC,PC2);
    13e0:	62 e0       	ldi	r22, 0x02	; 2
    13e2:	88 e2       	ldi	r24, 0x28	; 40
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ds18b20_gettemp>
    13ea:	9c 01       	movw	r18, r24
    13ec:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <CurrentTemp3+0x1>
    13f0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <CurrentTemp3>
		cele = CurrentTemp3/10;
    13f4:	b7 01       	movw	r22, r14
    13f6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__divmodhi4>
		desatiny = (CurrentTemp3 - (cele*10) );
    13fa:	46 ef       	ldi	r20, 0xF6	; 246
    13fc:	46 03       	mulsu	r20, r22
    13fe:	c0 01       	movw	r24, r0
    1400:	47 9f       	mul	r20, r23
    1402:	90 0d       	add	r25, r0
    1404:	11 24       	eor	r1, r1
    1406:	28 0f       	add	r18, r24
    1408:	39 1f       	adc	r19, r25
		
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    140a:	3f 93       	push	r19
    140c:	2f 93       	push	r18
    140e:	7f 93       	push	r23
    1410:	6f 93       	push	r22
    1412:	1f 93       	push	r17
    1414:	0f 93       	push	r16
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <sprintf>
		lcd_gotoxy( 3, 2);
    141e:	62 e0       	ldi	r22, 0x02	; 2
    1420:	83 e0       	ldi	r24, 0x03	; 3
    1422:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1426:	8b e9       	ldi	r24, 0x9B	; 155
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
    142e:	8d b7       	in	r24, 0x3d	; 61
    1430:	9e b7       	in	r25, 0x3e	; 62
    1432:	08 96       	adiw	r24, 0x08	; 8
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	9e bf       	out	0x3e, r25	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	8d bf       	out	0x3d, r24	; 61
		}
		lcd_gotoxy( 9, 2);
    143e:	62 e0       	ldi	r22, 0x02	; 2
    1440:	89 e0       	ldi	r24, 0x09	; 9
    1442:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putc>
    144c:	9f ef       	ldi	r25, 0xFF	; 255
    144e:	a1 ee       	ldi	r26, 0xE1	; 225
    1450:	b4 e0       	ldi	r27, 0x04	; 4
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	a0 40       	sbci	r26, 0x00	; 0
    1456:	b0 40       	sbci	r27, 0x00	; 0
    1458:	e1 f7       	brne	.-8      	; 0x1452 <main+0x4de>
    145a:	00 c0       	rjmp	.+0      	; 0x145c <main+0x4e8>
    145c:	00 00       	nop
			
		_delay_ms(100);

		if(chyba4==0)
    145e:	d1 10       	cpse	r13, r1
    1460:	2f c0       	rjmp	.+94     	; 0x14c0 <main+0x54c>
		{
		CurrentTemp4 = ds18b20_gettemp(&PORTC,PC3);
    1462:	63 e0       	ldi	r22, 0x03	; 3
    1464:	88 e2       	ldi	r24, 0x28	; 40
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ds18b20_gettemp>
    146c:	9c 01       	movw	r18, r24
    146e:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <CurrentTemp4+0x1>
    1472:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <CurrentTemp4>
		cele = CurrentTemp4/10;
    1476:	b7 01       	movw	r22, r14
    1478:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__divmodhi4>
		desatiny = (CurrentTemp4 - (cele*10) );
    147c:	46 ef       	ldi	r20, 0xF6	; 246
    147e:	46 03       	mulsu	r20, r22
    1480:	c0 01       	movw	r24, r0
    1482:	47 9f       	mul	r20, r23
    1484:	90 0d       	add	r25, r0
    1486:	11 24       	eor	r1, r1
    1488:	28 0f       	add	r18, r24
    148a:	39 1f       	adc	r19, r25
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    148c:	3f 93       	push	r19
    148e:	2f 93       	push	r18
    1490:	7f 93       	push	r23
    1492:	6f 93       	push	r22
    1494:	1f 93       	push	r17
    1496:	0f 93       	push	r16
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <sprintf>
		lcd_gotoxy( 3, 3);
    14a0:	63 e0       	ldi	r22, 0x03	; 3
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    14a8:	8b e9       	ldi	r24, 0x9B	; 155
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
    14b0:	8d b7       	in	r24, 0x3d	; 61
    14b2:	9e b7       	in	r25, 0x3e	; 62
    14b4:	08 96       	adiw	r24, 0x08	; 8
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	9e bf       	out	0x3e, r25	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	8d bf       	out	0x3d, r24	; 61
		}
		lcd_gotoxy( 9, 3);
    14c0:	63 e0       	ldi	r22, 0x03	; 3
    14c2:	89 e0       	ldi	r24, 0x09	; 9
    14c4:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putc>
    14ce:	9f ef       	ldi	r25, 0xFF	; 255
    14d0:	a1 ee       	ldi	r26, 0xE1	; 225
    14d2:	b4 e0       	ldi	r27, 0x04	; 4
    14d4:	91 50       	subi	r25, 0x01	; 1
    14d6:	a0 40       	sbci	r26, 0x00	; 0
    14d8:	b0 40       	sbci	r27, 0x00	; 0
    14da:	e1 f7       	brne	.-8      	; 0x14d4 <main+0x560>
    14dc:	00 c0       	rjmp	.+0      	; 0x14de <main+0x56a>
    14de:	00 00       	nop
			
		_delay_ms(100);
		
		if(chyba4==0)
    14e0:	d1 10       	cpse	r13, r1
    14e2:	2f c0       	rjmp	.+94     	; 0x1542 <main+0x5ce>
		{
		CurrentTemp4 = ds18b20_gettemp(&PORTC,PC3);
    14e4:	63 e0       	ldi	r22, 0x03	; 3
    14e6:	88 e2       	ldi	r24, 0x28	; 40
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ds18b20_gettemp>
    14ee:	9c 01       	movw	r18, r24
    14f0:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <CurrentTemp4+0x1>
    14f4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <CurrentTemp4>
		cele = CurrentTemp4/10;
    14f8:	b7 01       	movw	r22, r14
    14fa:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__divmodhi4>
		desatiny = (CurrentTemp4 - (cele*10) );
    14fe:	46 ef       	ldi	r20, 0xF6	; 246
    1500:	46 03       	mulsu	r20, r22
    1502:	c0 01       	movw	r24, r0
    1504:	47 9f       	mul	r20, r23
    1506:	90 0d       	add	r25, r0
    1508:	11 24       	eor	r1, r1
    150a:	28 0f       	add	r18, r24
    150c:	39 1f       	adc	r19, r25
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    150e:	3f 93       	push	r19
    1510:	2f 93       	push	r18
    1512:	7f 93       	push	r23
    1514:	6f 93       	push	r22
    1516:	1f 93       	push	r17
    1518:	0f 93       	push	r16
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <sprintf>
		//sprintf( CharBuffer, "%i\xC6\n",CurrentTemp4);
		lcd_gotoxy( 14, 3);
    1522:	63 e0       	ldi	r22, 0x03	; 3
    1524:	8e e0       	ldi	r24, 0x0E	; 14
    1526:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    152a:	8b e9       	ldi	r24, 0x9B	; 155
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
    1532:	8d b7       	in	r24, 0x3d	; 61
    1534:	9e b7       	in	r25, 0x3e	; 62
    1536:	08 96       	adiw	r24, 0x08	; 8
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	9e bf       	out	0x3e, r25	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	8d bf       	out	0x3d, r24	; 61
		}
		lcd_gotoxy( 19, 3);
    1542:	63 e0       	ldi	r22, 0x03	; 3
    1544:	83 e1       	ldi	r24, 0x13	; 19
    1546:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putc>
    1550:	9f ef       	ldi	r25, 0xFF	; 255
    1552:	a1 ee       	ldi	r26, 0xE1	; 225
    1554:	b4 e0       	ldi	r27, 0x04	; 4
    1556:	91 50       	subi	r25, 0x01	; 1
    1558:	a0 40       	sbci	r26, 0x00	; 0
    155a:	b0 40       	sbci	r27, 0x00	; 0
    155c:	e1 f7       	brne	.-8      	; 0x1556 <main+0x5e2>
    155e:	00 c0       	rjmp	.+0      	; 0x1560 <main+0x5ec>
    1560:	00 00       	nop
			
		_delay_ms(100);


//get temperature BMP085
		d = bmp085_gettemperature();
    1562:	0e 94 ba 06 	call	0xd74	; 0xd74 <bmp085_gettemperature>
    1566:	2b 01       	movw	r4, r22
    1568:	3c 01       	movw	r6, r24
    156a:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <d>
    156e:	70 93 96 01 	sts	0x0196, r23	; 0x800196 <d+0x1>
    1572:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <d+0x2>
    1576:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <d+0x3>
		cele = d/10;
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e2       	ldi	r20, 0x20	; 32
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__divsf3>
    1586:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__fixsfsi>
    158a:	4b 01       	movw	r8, r22
    158c:	5c 01       	movw	r10, r24
		desatiny = d - cele*10;
    158e:	ea e0       	ldi	r30, 0x0A	; 10
    1590:	e8 9d       	mul	r30, r8
    1592:	b0 01       	movw	r22, r0
    1594:	e9 9d       	mul	r30, r9
    1596:	70 0d       	add	r23, r0
    1598:	11 24       	eor	r1, r1
    159a:	07 2e       	mov	r0, r23
    159c:	00 0c       	add	r0, r0
    159e:	88 0b       	sbc	r24, r24
    15a0:	99 0b       	sbc	r25, r25
    15a2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__floatsisf>
    15a6:	9b 01       	movw	r18, r22
    15a8:	ac 01       	movw	r20, r24
    15aa:	c3 01       	movw	r24, r6
    15ac:	b2 01       	movw	r22, r4
    15ae:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <__subsf3>
    15b2:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__fixsfsi>
		sprintf( CharBuffer, "%+i.%i",cele,desatiny);
    15b6:	7f 93       	push	r23
    15b8:	6f 93       	push	r22
    15ba:	9f 92       	push	r9
    15bc:	8f 92       	push	r8
    15be:	af e0       	ldi	r26, 0x0F	; 15
    15c0:	b1 e0       	ldi	r27, 0x01	; 1
    15c2:	bf 93       	push	r27
    15c4:	af 93       	push	r26
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <sprintf>
		//ltoa((d*10), printbuff, 10); // for long conversion function to string
		lcd_gotoxy( 14, 1);
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	8e e0       	ldi	r24, 0x0E	; 14
    15d2:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    15d6:	8b e9       	ldi	r24, 0x9B	; 155
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
		//lcd_puts( printbuff);
		lcd_putc(0); // print user character on LCD
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	0e 94 62 01 	call	0x2c4	; 0x2c4 <lcd_putc>
    15e4:	3f ef       	ldi	r19, 0xFF	; 255
    15e6:	43 ec       	ldi	r20, 0xC3	; 195
    15e8:	59 e0       	ldi	r21, 0x09	; 9
    15ea:	31 50       	subi	r19, 0x01	; 1
    15ec:	40 40       	sbci	r20, 0x00	; 0
    15ee:	50 40       	sbci	r21, 0x00	; 0
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <main+0x676>
    15f2:	00 c0       	rjmp	.+0      	; 0x15f4 <main+0x680>
    15f4:	00 00       	nop
		//uart_puts(" C deg"); 
		//uart_puts("\r\n");
		_delay_ms(200);

//get pressure BMP085
		l = bmp085_getpressure(gAltitudeCorr);			// in Pa
    15f6:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <gAltitudeCorr>
    15fa:	70 91 82 01 	lds	r23, 0x0182	; 0x800182 <gAltitudeCorr+0x1>
    15fe:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <gAltitudeCorr+0x2>
    1602:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <gAltitudeCorr+0x3>
    1606:	0e 94 d3 06 	call	0xda6	; 0xda6 <bmp085_getpressure>
    160a:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <l>
    160e:	70 93 86 01 	sts	0x0186, r23	; 0x800186 <l+0x1>
    1612:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <l+0x2>
    1616:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <l+0x3>
		//ltoa(l, printbuff, 10);  				// convert long to string , for UART
		//uart_puts("rel.pressure:   "); 
		//uart_puts(printbuff);
		//uart_puts(" Pa");
		//uart_puts("\r\n");
		lcd_gotoxy( 17, 0);
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	81 e1       	ldi	r24, 0x11	; 17
    161e:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
		lcd_puts_P( "hPa");
    1622:	8a ee       	ldi	r24, 0xEA	; 234
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 8e 01 	call	0x31c	; 0x31c <lcd_puts_p>
		lcd_gotoxy( 13, 0);
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	8d e0       	ldi	r24, 0x0D	; 13
    162e:	0e 94 49 01 	call	0x292	; 0x292 <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    1632:	60 91 85 01 	lds	r22, 0x0185	; 0x800185 <l>
    1636:	70 91 86 01 	lds	r23, 0x0186	; 0x800186 <l+0x1>
    163a:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <l+0x2>
    163e:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <l+0x3>
    1642:	2a e0       	ldi	r18, 0x0A	; 10
    1644:	46 eb       	ldi	r20, 0xB6	; 182
    1646:	51 e0       	ldi	r21, 0x01	; 1
    1648:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <__ltoa_ncheck>
		ltoa((l) , printbuff, 10); // in hPa (/100) in relative pressure to sea level, bmp085.h , for LCD
		lcd_puts( printbuff);
    164c:	86 eb       	ldi	r24, 0xB6	; 182
    164e:	91 e0       	ldi	r25, 0x01	; 1
    1650:	0e 94 82 01 	call	0x304	; 0x304 <lcd_puts>
    1654:	6f ef       	ldi	r22, 0xFF	; 255
    1656:	83 ed       	ldi	r24, 0xD3	; 211
    1658:	90 e3       	ldi	r25, 0x30	; 48
    165a:	61 50       	subi	r22, 0x01	; 1
    165c:	80 40       	sbci	r24, 0x00	; 0
    165e:	90 40       	sbci	r25, 0x00	; 0
    1660:	e1 f7       	brne	.-8      	; 0x165a <main+0x6e6>
    1662:	00 c0       	rjmp	.+0      	; 0x1664 <main+0x6f0>
    1664:	00 00       	nop
    1666:	af ef       	ldi	r26, 0xFF	; 255
    1668:	bc e2       	ldi	r27, 0x2C	; 44
    166a:	e1 e3       	ldi	r30, 0x31	; 49
    166c:	f1 e0       	ldi	r31, 0x01	; 1
    166e:	a1 50       	subi	r26, 0x01	; 1
    1670:	b0 40       	sbci	r27, 0x00	; 0
    1672:	e0 40       	sbci	r30, 0x00	; 0
    1674:	f0 40       	sbci	r31, 0x00	; 0
    1676:	d9 f7       	brne	.-10     	; 0x166e <main+0x6fa>
    1678:	00 c0       	rjmp	.+0      	; 0x167a <main+0x706>
    167a:	00 00       	nop
    167c:	2d b7       	in	r18, 0x3d	; 61
    167e:	3e b7       	in	r19, 0x3e	; 62
    1680:	28 5f       	subi	r18, 0xF8	; 248
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	3e bf       	out	0x3e, r19	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	2d bf       	out	0x3d, r18	; 61
		
		
		_delay_ms(1000); 
		_delay_ms(7500);
		
		wdt_reset();
    168e:	a8 95       	wdr

	}
    1690:	2b ce       	rjmp	.-938    	; 0x12e8 <main+0x374>

00001692 <__mulsi3>:
    1692:	db 01       	movw	r26, r22
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	0e 94 ae 0b 	call	0x175c	; 0x175c <__muluhisi3>
    169c:	bf 91       	pop	r27
    169e:	af 91       	pop	r26
    16a0:	a2 9f       	mul	r26, r18
    16a2:	80 0d       	add	r24, r0
    16a4:	91 1d       	adc	r25, r1
    16a6:	a3 9f       	mul	r26, r19
    16a8:	90 0d       	add	r25, r0
    16aa:	b2 9f       	mul	r27, r18
    16ac:	90 0d       	add	r25, r0
    16ae:	11 24       	eor	r1, r1
    16b0:	08 95       	ret

000016b2 <__divmodhi4>:
    16b2:	97 fb       	bst	r25, 7
    16b4:	07 2e       	mov	r0, r23
    16b6:	16 f4       	brtc	.+4      	; 0x16bc <__divmodhi4+0xa>
    16b8:	00 94       	com	r0
    16ba:	07 d0       	rcall	.+14     	; 0x16ca <__divmodhi4_neg1>
    16bc:	77 fd       	sbrc	r23, 7
    16be:	09 d0       	rcall	.+18     	; 0x16d2 <__divmodhi4_neg2>
    16c0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__udivmodhi4>
    16c4:	07 fc       	sbrc	r0, 7
    16c6:	05 d0       	rcall	.+10     	; 0x16d2 <__divmodhi4_neg2>
    16c8:	3e f4       	brtc	.+14     	; 0x16d8 <__divmodhi4_exit>

000016ca <__divmodhi4_neg1>:
    16ca:	90 95       	com	r25
    16cc:	81 95       	neg	r24
    16ce:	9f 4f       	sbci	r25, 0xFF	; 255
    16d0:	08 95       	ret

000016d2 <__divmodhi4_neg2>:
    16d2:	70 95       	com	r23
    16d4:	61 95       	neg	r22
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255

000016d8 <__divmodhi4_exit>:
    16d8:	08 95       	ret

000016da <__udivmodsi4>:
    16da:	a1 e2       	ldi	r26, 0x21	; 33
    16dc:	1a 2e       	mov	r1, r26
    16de:	aa 1b       	sub	r26, r26
    16e0:	bb 1b       	sub	r27, r27
    16e2:	fd 01       	movw	r30, r26
    16e4:	0d c0       	rjmp	.+26     	; 0x1700 <__udivmodsi4_ep>

000016e6 <__udivmodsi4_loop>:
    16e6:	aa 1f       	adc	r26, r26
    16e8:	bb 1f       	adc	r27, r27
    16ea:	ee 1f       	adc	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	a2 17       	cp	r26, r18
    16f0:	b3 07       	cpc	r27, r19
    16f2:	e4 07       	cpc	r30, r20
    16f4:	f5 07       	cpc	r31, r21
    16f6:	20 f0       	brcs	.+8      	; 0x1700 <__udivmodsi4_ep>
    16f8:	a2 1b       	sub	r26, r18
    16fa:	b3 0b       	sbc	r27, r19
    16fc:	e4 0b       	sbc	r30, r20
    16fe:	f5 0b       	sbc	r31, r21

00001700 <__udivmodsi4_ep>:
    1700:	66 1f       	adc	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	88 1f       	adc	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	1a 94       	dec	r1
    170a:	69 f7       	brne	.-38     	; 0x16e6 <__udivmodsi4_loop>
    170c:	60 95       	com	r22
    170e:	70 95       	com	r23
    1710:	80 95       	com	r24
    1712:	90 95       	com	r25
    1714:	9b 01       	movw	r18, r22
    1716:	ac 01       	movw	r20, r24
    1718:	bd 01       	movw	r22, r26
    171a:	cf 01       	movw	r24, r30
    171c:	08 95       	ret

0000171e <__divmodsi4>:
    171e:	05 2e       	mov	r0, r21
    1720:	97 fb       	bst	r25, 7
    1722:	1e f4       	brtc	.+6      	; 0x172a <__divmodsi4+0xc>
    1724:	00 94       	com	r0
    1726:	0e 94 a6 0b 	call	0x174c	; 0x174c <__negsi2>
    172a:	57 fd       	sbrc	r21, 7
    172c:	07 d0       	rcall	.+14     	; 0x173c <__divmodsi4_neg2>
    172e:	0e 94 6d 0b 	call	0x16da	; 0x16da <__udivmodsi4>
    1732:	07 fc       	sbrc	r0, 7
    1734:	03 d0       	rcall	.+6      	; 0x173c <__divmodsi4_neg2>
    1736:	4e f4       	brtc	.+18     	; 0x174a <__divmodsi4_exit>
    1738:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__negsi2>

0000173c <__divmodsi4_neg2>:
    173c:	50 95       	com	r21
    173e:	40 95       	com	r20
    1740:	30 95       	com	r19
    1742:	21 95       	neg	r18
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	4f 4f       	sbci	r20, 0xFF	; 255
    1748:	5f 4f       	sbci	r21, 0xFF	; 255

0000174a <__divmodsi4_exit>:
    174a:	08 95       	ret

0000174c <__negsi2>:
    174c:	90 95       	com	r25
    174e:	80 95       	com	r24
    1750:	70 95       	com	r23
    1752:	61 95       	neg	r22
    1754:	7f 4f       	sbci	r23, 0xFF	; 255
    1756:	8f 4f       	sbci	r24, 0xFF	; 255
    1758:	9f 4f       	sbci	r25, 0xFF	; 255
    175a:	08 95       	ret

0000175c <__muluhisi3>:
    175c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__umulhisi3>
    1760:	a5 9f       	mul	r26, r21
    1762:	90 0d       	add	r25, r0
    1764:	b4 9f       	mul	r27, r20
    1766:	90 0d       	add	r25, r0
    1768:	a4 9f       	mul	r26, r20
    176a:	80 0d       	add	r24, r0
    176c:	91 1d       	adc	r25, r1
    176e:	11 24       	eor	r1, r1
    1770:	08 95       	ret

00001772 <__mulshisi3>:
    1772:	b7 ff       	sbrs	r27, 7
    1774:	0c 94 ae 0b 	jmp	0x175c	; 0x175c <__muluhisi3>

00001778 <__mulohisi3>:
    1778:	0e 94 ae 0b 	call	0x175c	; 0x175c <__muluhisi3>
    177c:	82 1b       	sub	r24, r18
    177e:	93 0b       	sbc	r25, r19
    1780:	08 95       	ret

00001782 <__udivmodhi4>:
    1782:	aa 1b       	sub	r26, r26
    1784:	bb 1b       	sub	r27, r27
    1786:	51 e1       	ldi	r21, 0x11	; 17
    1788:	07 c0       	rjmp	.+14     	; 0x1798 <__udivmodhi4_ep>

0000178a <__udivmodhi4_loop>:
    178a:	aa 1f       	adc	r26, r26
    178c:	bb 1f       	adc	r27, r27
    178e:	a6 17       	cp	r26, r22
    1790:	b7 07       	cpc	r27, r23
    1792:	10 f0       	brcs	.+4      	; 0x1798 <__udivmodhi4_ep>
    1794:	a6 1b       	sub	r26, r22
    1796:	b7 0b       	sbc	r27, r23

00001798 <__udivmodhi4_ep>:
    1798:	88 1f       	adc	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	5a 95       	dec	r21
    179e:	a9 f7       	brne	.-22     	; 0x178a <__udivmodhi4_loop>
    17a0:	80 95       	com	r24
    17a2:	90 95       	com	r25
    17a4:	bc 01       	movw	r22, r24
    17a6:	cd 01       	movw	r24, r26
    17a8:	08 95       	ret

000017aa <__umulhisi3>:
    17aa:	a2 9f       	mul	r26, r18
    17ac:	b0 01       	movw	r22, r0
    17ae:	b3 9f       	mul	r27, r19
    17b0:	c0 01       	movw	r24, r0
    17b2:	a3 9f       	mul	r26, r19
    17b4:	70 0d       	add	r23, r0
    17b6:	81 1d       	adc	r24, r1
    17b8:	11 24       	eor	r1, r1
    17ba:	91 1d       	adc	r25, r1
    17bc:	b2 9f       	mul	r27, r18
    17be:	70 0d       	add	r23, r0
    17c0:	81 1d       	adc	r24, r1
    17c2:	11 24       	eor	r1, r1
    17c4:	91 1d       	adc	r25, r1
    17c6:	08 95       	ret

000017c8 <__subsf3>:
    17c8:	50 58       	subi	r21, 0x80	; 128

000017ca <__addsf3>:
    17ca:	bb 27       	eor	r27, r27
    17cc:	aa 27       	eor	r26, r26
    17ce:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3x>
    17d2:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_round>
    17d6:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__fp_pscA>
    17da:	38 f0       	brcs	.+14     	; 0x17ea <__addsf3+0x20>
    17dc:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fp_pscB>
    17e0:	20 f0       	brcs	.+8      	; 0x17ea <__addsf3+0x20>
    17e2:	39 f4       	brne	.+14     	; 0x17f2 <__addsf3+0x28>
    17e4:	9f 3f       	cpi	r25, 0xFF	; 255
    17e6:	19 f4       	brne	.+6      	; 0x17ee <__addsf3+0x24>
    17e8:	26 f4       	brtc	.+8      	; 0x17f2 <__addsf3+0x28>
    17ea:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__fp_nan>
    17ee:	0e f4       	brtc	.+2      	; 0x17f2 <__addsf3+0x28>
    17f0:	e0 95       	com	r30
    17f2:	e7 fb       	bst	r30, 7
    17f4:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_inf>

000017f8 <__addsf3x>:
    17f8:	e9 2f       	mov	r30, r25
    17fa:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__fp_split3>
    17fe:	58 f3       	brcs	.-42     	; 0x17d6 <__addsf3+0xc>
    1800:	ba 17       	cp	r27, r26
    1802:	62 07       	cpc	r22, r18
    1804:	73 07       	cpc	r23, r19
    1806:	84 07       	cpc	r24, r20
    1808:	95 07       	cpc	r25, r21
    180a:	20 f0       	brcs	.+8      	; 0x1814 <__addsf3x+0x1c>
    180c:	79 f4       	brne	.+30     	; 0x182c <__addsf3x+0x34>
    180e:	a6 f5       	brtc	.+104    	; 0x1878 <__addsf3x+0x80>
    1810:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__fp_zero>
    1814:	0e f4       	brtc	.+2      	; 0x1818 <__addsf3x+0x20>
    1816:	e0 95       	com	r30
    1818:	0b 2e       	mov	r0, r27
    181a:	ba 2f       	mov	r27, r26
    181c:	a0 2d       	mov	r26, r0
    181e:	0b 01       	movw	r0, r22
    1820:	b9 01       	movw	r22, r18
    1822:	90 01       	movw	r18, r0
    1824:	0c 01       	movw	r0, r24
    1826:	ca 01       	movw	r24, r20
    1828:	a0 01       	movw	r20, r0
    182a:	11 24       	eor	r1, r1
    182c:	ff 27       	eor	r31, r31
    182e:	59 1b       	sub	r21, r25
    1830:	99 f0       	breq	.+38     	; 0x1858 <__addsf3x+0x60>
    1832:	59 3f       	cpi	r21, 0xF9	; 249
    1834:	50 f4       	brcc	.+20     	; 0x184a <__addsf3x+0x52>
    1836:	50 3e       	cpi	r21, 0xE0	; 224
    1838:	68 f1       	brcs	.+90     	; 0x1894 <__addsf3x+0x9c>
    183a:	1a 16       	cp	r1, r26
    183c:	f0 40       	sbci	r31, 0x00	; 0
    183e:	a2 2f       	mov	r26, r18
    1840:	23 2f       	mov	r18, r19
    1842:	34 2f       	mov	r19, r20
    1844:	44 27       	eor	r20, r20
    1846:	58 5f       	subi	r21, 0xF8	; 248
    1848:	f3 cf       	rjmp	.-26     	; 0x1830 <__addsf3x+0x38>
    184a:	46 95       	lsr	r20
    184c:	37 95       	ror	r19
    184e:	27 95       	ror	r18
    1850:	a7 95       	ror	r26
    1852:	f0 40       	sbci	r31, 0x00	; 0
    1854:	53 95       	inc	r21
    1856:	c9 f7       	brne	.-14     	; 0x184a <__addsf3x+0x52>
    1858:	7e f4       	brtc	.+30     	; 0x1878 <__addsf3x+0x80>
    185a:	1f 16       	cp	r1, r31
    185c:	ba 0b       	sbc	r27, r26
    185e:	62 0b       	sbc	r22, r18
    1860:	73 0b       	sbc	r23, r19
    1862:	84 0b       	sbc	r24, r20
    1864:	ba f0       	brmi	.+46     	; 0x1894 <__addsf3x+0x9c>
    1866:	91 50       	subi	r25, 0x01	; 1
    1868:	a1 f0       	breq	.+40     	; 0x1892 <__addsf3x+0x9a>
    186a:	ff 0f       	add	r31, r31
    186c:	bb 1f       	adc	r27, r27
    186e:	66 1f       	adc	r22, r22
    1870:	77 1f       	adc	r23, r23
    1872:	88 1f       	adc	r24, r24
    1874:	c2 f7       	brpl	.-16     	; 0x1866 <__addsf3x+0x6e>
    1876:	0e c0       	rjmp	.+28     	; 0x1894 <__addsf3x+0x9c>
    1878:	ba 0f       	add	r27, r26
    187a:	62 1f       	adc	r22, r18
    187c:	73 1f       	adc	r23, r19
    187e:	84 1f       	adc	r24, r20
    1880:	48 f4       	brcc	.+18     	; 0x1894 <__addsf3x+0x9c>
    1882:	87 95       	ror	r24
    1884:	77 95       	ror	r23
    1886:	67 95       	ror	r22
    1888:	b7 95       	ror	r27
    188a:	f7 95       	ror	r31
    188c:	9e 3f       	cpi	r25, 0xFE	; 254
    188e:	08 f0       	brcs	.+2      	; 0x1892 <__addsf3x+0x9a>
    1890:	b0 cf       	rjmp	.-160    	; 0x17f2 <__addsf3+0x28>
    1892:	93 95       	inc	r25
    1894:	88 0f       	add	r24, r24
    1896:	08 f0       	brcs	.+2      	; 0x189a <__addsf3x+0xa2>
    1898:	99 27       	eor	r25, r25
    189a:	ee 0f       	add	r30, r30
    189c:	97 95       	ror	r25
    189e:	87 95       	ror	r24
    18a0:	08 95       	ret

000018a2 <__divsf3>:
    18a2:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__divsf3x>
    18a6:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_round>
    18aa:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fp_pscB>
    18ae:	58 f0       	brcs	.+22     	; 0x18c6 <__divsf3+0x24>
    18b0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__fp_pscA>
    18b4:	40 f0       	brcs	.+16     	; 0x18c6 <__divsf3+0x24>
    18b6:	29 f4       	brne	.+10     	; 0x18c2 <__divsf3+0x20>
    18b8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ba:	29 f0       	breq	.+10     	; 0x18c6 <__divsf3+0x24>
    18bc:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_inf>
    18c0:	51 11       	cpse	r21, r1
    18c2:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_szero>
    18c6:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__fp_nan>

000018ca <__divsf3x>:
    18ca:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__fp_split3>
    18ce:	68 f3       	brcs	.-38     	; 0x18aa <__divsf3+0x8>

000018d0 <__divsf3_pse>:
    18d0:	99 23       	and	r25, r25
    18d2:	b1 f3       	breq	.-20     	; 0x18c0 <__divsf3+0x1e>
    18d4:	55 23       	and	r21, r21
    18d6:	91 f3       	breq	.-28     	; 0x18bc <__divsf3+0x1a>
    18d8:	95 1b       	sub	r25, r21
    18da:	55 0b       	sbc	r21, r21
    18dc:	bb 27       	eor	r27, r27
    18de:	aa 27       	eor	r26, r26
    18e0:	62 17       	cp	r22, r18
    18e2:	73 07       	cpc	r23, r19
    18e4:	84 07       	cpc	r24, r20
    18e6:	38 f0       	brcs	.+14     	; 0x18f6 <__divsf3_pse+0x26>
    18e8:	9f 5f       	subi	r25, 0xFF	; 255
    18ea:	5f 4f       	sbci	r21, 0xFF	; 255
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	44 1f       	adc	r20, r20
    18f2:	aa 1f       	adc	r26, r26
    18f4:	a9 f3       	breq	.-22     	; 0x18e0 <__divsf3_pse+0x10>
    18f6:	35 d0       	rcall	.+106    	; 0x1962 <__divsf3_pse+0x92>
    18f8:	0e 2e       	mov	r0, r30
    18fa:	3a f0       	brmi	.+14     	; 0x190a <__divsf3_pse+0x3a>
    18fc:	e0 e8       	ldi	r30, 0x80	; 128
    18fe:	32 d0       	rcall	.+100    	; 0x1964 <__divsf3_pse+0x94>
    1900:	91 50       	subi	r25, 0x01	; 1
    1902:	50 40       	sbci	r21, 0x00	; 0
    1904:	e6 95       	lsr	r30
    1906:	00 1c       	adc	r0, r0
    1908:	ca f7       	brpl	.-14     	; 0x18fc <__divsf3_pse+0x2c>
    190a:	2b d0       	rcall	.+86     	; 0x1962 <__divsf3_pse+0x92>
    190c:	fe 2f       	mov	r31, r30
    190e:	29 d0       	rcall	.+82     	; 0x1962 <__divsf3_pse+0x92>
    1910:	66 0f       	add	r22, r22
    1912:	77 1f       	adc	r23, r23
    1914:	88 1f       	adc	r24, r24
    1916:	bb 1f       	adc	r27, r27
    1918:	26 17       	cp	r18, r22
    191a:	37 07       	cpc	r19, r23
    191c:	48 07       	cpc	r20, r24
    191e:	ab 07       	cpc	r26, r27
    1920:	b0 e8       	ldi	r27, 0x80	; 128
    1922:	09 f0       	breq	.+2      	; 0x1926 <__divsf3_pse+0x56>
    1924:	bb 0b       	sbc	r27, r27
    1926:	80 2d       	mov	r24, r0
    1928:	bf 01       	movw	r22, r30
    192a:	ff 27       	eor	r31, r31
    192c:	93 58       	subi	r25, 0x83	; 131
    192e:	5f 4f       	sbci	r21, 0xFF	; 255
    1930:	3a f0       	brmi	.+14     	; 0x1940 <__divsf3_pse+0x70>
    1932:	9e 3f       	cpi	r25, 0xFE	; 254
    1934:	51 05       	cpc	r21, r1
    1936:	78 f0       	brcs	.+30     	; 0x1956 <__divsf3_pse+0x86>
    1938:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_inf>
    193c:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_szero>
    1940:	5f 3f       	cpi	r21, 0xFF	; 255
    1942:	e4 f3       	brlt	.-8      	; 0x193c <__divsf3_pse+0x6c>
    1944:	98 3e       	cpi	r25, 0xE8	; 232
    1946:	d4 f3       	brlt	.-12     	; 0x193c <__divsf3_pse+0x6c>
    1948:	86 95       	lsr	r24
    194a:	77 95       	ror	r23
    194c:	67 95       	ror	r22
    194e:	b7 95       	ror	r27
    1950:	f7 95       	ror	r31
    1952:	9f 5f       	subi	r25, 0xFF	; 255
    1954:	c9 f7       	brne	.-14     	; 0x1948 <__divsf3_pse+0x78>
    1956:	88 0f       	add	r24, r24
    1958:	91 1d       	adc	r25, r1
    195a:	96 95       	lsr	r25
    195c:	87 95       	ror	r24
    195e:	97 f9       	bld	r25, 7
    1960:	08 95       	ret
    1962:	e1 e0       	ldi	r30, 0x01	; 1
    1964:	66 0f       	add	r22, r22
    1966:	77 1f       	adc	r23, r23
    1968:	88 1f       	adc	r24, r24
    196a:	bb 1f       	adc	r27, r27
    196c:	62 17       	cp	r22, r18
    196e:	73 07       	cpc	r23, r19
    1970:	84 07       	cpc	r24, r20
    1972:	ba 07       	cpc	r27, r26
    1974:	20 f0       	brcs	.+8      	; 0x197e <__divsf3_pse+0xae>
    1976:	62 1b       	sub	r22, r18
    1978:	73 0b       	sbc	r23, r19
    197a:	84 0b       	sbc	r24, r20
    197c:	ba 0b       	sbc	r27, r26
    197e:	ee 1f       	adc	r30, r30
    1980:	88 f7       	brcc	.-30     	; 0x1964 <__divsf3_pse+0x94>
    1982:	e0 95       	com	r30
    1984:	08 95       	ret

00001986 <__fixsfsi>:
    1986:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__fixunssfsi>
    198a:	68 94       	set
    198c:	b1 11       	cpse	r27, r1
    198e:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_szero>
    1992:	08 95       	ret

00001994 <__fixunssfsi>:
    1994:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_splitA>
    1998:	88 f0       	brcs	.+34     	; 0x19bc <__fixunssfsi+0x28>
    199a:	9f 57       	subi	r25, 0x7F	; 127
    199c:	98 f0       	brcs	.+38     	; 0x19c4 <__fixunssfsi+0x30>
    199e:	b9 2f       	mov	r27, r25
    19a0:	99 27       	eor	r25, r25
    19a2:	b7 51       	subi	r27, 0x17	; 23
    19a4:	b0 f0       	brcs	.+44     	; 0x19d2 <__fixunssfsi+0x3e>
    19a6:	e1 f0       	breq	.+56     	; 0x19e0 <__fixunssfsi+0x4c>
    19a8:	66 0f       	add	r22, r22
    19aa:	77 1f       	adc	r23, r23
    19ac:	88 1f       	adc	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	1a f0       	brmi	.+6      	; 0x19b8 <__fixunssfsi+0x24>
    19b2:	ba 95       	dec	r27
    19b4:	c9 f7       	brne	.-14     	; 0x19a8 <__fixunssfsi+0x14>
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <__fixunssfsi+0x4c>
    19b8:	b1 30       	cpi	r27, 0x01	; 1
    19ba:	91 f0       	breq	.+36     	; 0x19e0 <__fixunssfsi+0x4c>
    19bc:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <__fp_zero>
    19c0:	b1 e0       	ldi	r27, 0x01	; 1
    19c2:	08 95       	ret
    19c4:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__fp_zero>
    19c8:	67 2f       	mov	r22, r23
    19ca:	78 2f       	mov	r23, r24
    19cc:	88 27       	eor	r24, r24
    19ce:	b8 5f       	subi	r27, 0xF8	; 248
    19d0:	39 f0       	breq	.+14     	; 0x19e0 <__fixunssfsi+0x4c>
    19d2:	b9 3f       	cpi	r27, 0xF9	; 249
    19d4:	cc f3       	brlt	.-14     	; 0x19c8 <__fixunssfsi+0x34>
    19d6:	86 95       	lsr	r24
    19d8:	77 95       	ror	r23
    19da:	67 95       	ror	r22
    19dc:	b3 95       	inc	r27
    19de:	d9 f7       	brne	.-10     	; 0x19d6 <__fixunssfsi+0x42>
    19e0:	3e f4       	brtc	.+14     	; 0x19f0 <__fixunssfsi+0x5c>
    19e2:	90 95       	com	r25
    19e4:	80 95       	com	r24
    19e6:	70 95       	com	r23
    19e8:	61 95       	neg	r22
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	8f 4f       	sbci	r24, 0xFF	; 255
    19ee:	9f 4f       	sbci	r25, 0xFF	; 255
    19f0:	08 95       	ret

000019f2 <__floatunsisf>:
    19f2:	e8 94       	clt
    19f4:	09 c0       	rjmp	.+18     	; 0x1a08 <__floatsisf+0x12>

000019f6 <__floatsisf>:
    19f6:	97 fb       	bst	r25, 7
    19f8:	3e f4       	brtc	.+14     	; 0x1a08 <__floatsisf+0x12>
    19fa:	90 95       	com	r25
    19fc:	80 95       	com	r24
    19fe:	70 95       	com	r23
    1a00:	61 95       	neg	r22
    1a02:	7f 4f       	sbci	r23, 0xFF	; 255
    1a04:	8f 4f       	sbci	r24, 0xFF	; 255
    1a06:	9f 4f       	sbci	r25, 0xFF	; 255
    1a08:	99 23       	and	r25, r25
    1a0a:	a9 f0       	breq	.+42     	; 0x1a36 <__floatsisf+0x40>
    1a0c:	f9 2f       	mov	r31, r25
    1a0e:	96 e9       	ldi	r25, 0x96	; 150
    1a10:	bb 27       	eor	r27, r27
    1a12:	93 95       	inc	r25
    1a14:	f6 95       	lsr	r31
    1a16:	87 95       	ror	r24
    1a18:	77 95       	ror	r23
    1a1a:	67 95       	ror	r22
    1a1c:	b7 95       	ror	r27
    1a1e:	f1 11       	cpse	r31, r1
    1a20:	f8 cf       	rjmp	.-16     	; 0x1a12 <__floatsisf+0x1c>
    1a22:	fa f4       	brpl	.+62     	; 0x1a62 <__floatsisf+0x6c>
    1a24:	bb 0f       	add	r27, r27
    1a26:	11 f4       	brne	.+4      	; 0x1a2c <__floatsisf+0x36>
    1a28:	60 ff       	sbrs	r22, 0
    1a2a:	1b c0       	rjmp	.+54     	; 0x1a62 <__floatsisf+0x6c>
    1a2c:	6f 5f       	subi	r22, 0xFF	; 255
    1a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a30:	8f 4f       	sbci	r24, 0xFF	; 255
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	16 c0       	rjmp	.+44     	; 0x1a62 <__floatsisf+0x6c>
    1a36:	88 23       	and	r24, r24
    1a38:	11 f0       	breq	.+4      	; 0x1a3e <__floatsisf+0x48>
    1a3a:	96 e9       	ldi	r25, 0x96	; 150
    1a3c:	11 c0       	rjmp	.+34     	; 0x1a60 <__floatsisf+0x6a>
    1a3e:	77 23       	and	r23, r23
    1a40:	21 f0       	breq	.+8      	; 0x1a4a <__floatsisf+0x54>
    1a42:	9e e8       	ldi	r25, 0x8E	; 142
    1a44:	87 2f       	mov	r24, r23
    1a46:	76 2f       	mov	r23, r22
    1a48:	05 c0       	rjmp	.+10     	; 0x1a54 <__floatsisf+0x5e>
    1a4a:	66 23       	and	r22, r22
    1a4c:	71 f0       	breq	.+28     	; 0x1a6a <__floatsisf+0x74>
    1a4e:	96 e8       	ldi	r25, 0x86	; 134
    1a50:	86 2f       	mov	r24, r22
    1a52:	70 e0       	ldi	r23, 0x00	; 0
    1a54:	60 e0       	ldi	r22, 0x00	; 0
    1a56:	2a f0       	brmi	.+10     	; 0x1a62 <__floatsisf+0x6c>
    1a58:	9a 95       	dec	r25
    1a5a:	66 0f       	add	r22, r22
    1a5c:	77 1f       	adc	r23, r23
    1a5e:	88 1f       	adc	r24, r24
    1a60:	da f7       	brpl	.-10     	; 0x1a58 <__floatsisf+0x62>
    1a62:	88 0f       	add	r24, r24
    1a64:	96 95       	lsr	r25
    1a66:	87 95       	ror	r24
    1a68:	97 f9       	bld	r25, 7
    1a6a:	08 95       	ret

00001a6c <__fp_inf>:
    1a6c:	97 f9       	bld	r25, 7
    1a6e:	9f 67       	ori	r25, 0x7F	; 127
    1a70:	80 e8       	ldi	r24, 0x80	; 128
    1a72:	70 e0       	ldi	r23, 0x00	; 0
    1a74:	60 e0       	ldi	r22, 0x00	; 0
    1a76:	08 95       	ret

00001a78 <__fp_nan>:
    1a78:	9f ef       	ldi	r25, 0xFF	; 255
    1a7a:	80 ec       	ldi	r24, 0xC0	; 192
    1a7c:	08 95       	ret

00001a7e <__fp_pscA>:
    1a7e:	00 24       	eor	r0, r0
    1a80:	0a 94       	dec	r0
    1a82:	16 16       	cp	r1, r22
    1a84:	17 06       	cpc	r1, r23
    1a86:	18 06       	cpc	r1, r24
    1a88:	09 06       	cpc	r0, r25
    1a8a:	08 95       	ret

00001a8c <__fp_pscB>:
    1a8c:	00 24       	eor	r0, r0
    1a8e:	0a 94       	dec	r0
    1a90:	12 16       	cp	r1, r18
    1a92:	13 06       	cpc	r1, r19
    1a94:	14 06       	cpc	r1, r20
    1a96:	05 06       	cpc	r0, r21
    1a98:	08 95       	ret

00001a9a <__fp_round>:
    1a9a:	09 2e       	mov	r0, r25
    1a9c:	03 94       	inc	r0
    1a9e:	00 0c       	add	r0, r0
    1aa0:	11 f4       	brne	.+4      	; 0x1aa6 <__fp_round+0xc>
    1aa2:	88 23       	and	r24, r24
    1aa4:	52 f0       	brmi	.+20     	; 0x1aba <__fp_round+0x20>
    1aa6:	bb 0f       	add	r27, r27
    1aa8:	40 f4       	brcc	.+16     	; 0x1aba <__fp_round+0x20>
    1aaa:	bf 2b       	or	r27, r31
    1aac:	11 f4       	brne	.+4      	; 0x1ab2 <__fp_round+0x18>
    1aae:	60 ff       	sbrs	r22, 0
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <__fp_round+0x20>
    1ab2:	6f 5f       	subi	r22, 0xFF	; 255
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	08 95       	ret

00001abc <__fp_split3>:
    1abc:	57 fd       	sbrc	r21, 7
    1abe:	90 58       	subi	r25, 0x80	; 128
    1ac0:	44 0f       	add	r20, r20
    1ac2:	55 1f       	adc	r21, r21
    1ac4:	59 f0       	breq	.+22     	; 0x1adc <__fp_splitA+0x10>
    1ac6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac8:	71 f0       	breq	.+28     	; 0x1ae6 <__fp_splitA+0x1a>
    1aca:	47 95       	ror	r20

00001acc <__fp_splitA>:
    1acc:	88 0f       	add	r24, r24
    1ace:	97 fb       	bst	r25, 7
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	61 f0       	breq	.+24     	; 0x1aec <__fp_splitA+0x20>
    1ad4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ad6:	79 f0       	breq	.+30     	; 0x1af6 <__fp_splitA+0x2a>
    1ad8:	87 95       	ror	r24
    1ada:	08 95       	ret
    1adc:	12 16       	cp	r1, r18
    1ade:	13 06       	cpc	r1, r19
    1ae0:	14 06       	cpc	r1, r20
    1ae2:	55 1f       	adc	r21, r21
    1ae4:	f2 cf       	rjmp	.-28     	; 0x1aca <__fp_split3+0xe>
    1ae6:	46 95       	lsr	r20
    1ae8:	f1 df       	rcall	.-30     	; 0x1acc <__fp_splitA>
    1aea:	08 c0       	rjmp	.+16     	; 0x1afc <__fp_splitA+0x30>
    1aec:	16 16       	cp	r1, r22
    1aee:	17 06       	cpc	r1, r23
    1af0:	18 06       	cpc	r1, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	f1 cf       	rjmp	.-30     	; 0x1ad8 <__fp_splitA+0xc>
    1af6:	86 95       	lsr	r24
    1af8:	71 05       	cpc	r23, r1
    1afa:	61 05       	cpc	r22, r1
    1afc:	08 94       	sec
    1afe:	08 95       	ret

00001b00 <__fp_zero>:
    1b00:	e8 94       	clt

00001b02 <__fp_szero>:
    1b02:	bb 27       	eor	r27, r27
    1b04:	66 27       	eor	r22, r22
    1b06:	77 27       	eor	r23, r23
    1b08:	cb 01       	movw	r24, r22
    1b0a:	97 f9       	bld	r25, 7
    1b0c:	08 95       	ret

00001b0e <__mulsf3>:
    1b0e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3x>
    1b12:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_round>
    1b16:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <__fp_pscA>
    1b1a:	38 f0       	brcs	.+14     	; 0x1b2a <__mulsf3+0x1c>
    1b1c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__fp_pscB>
    1b20:	20 f0       	brcs	.+8      	; 0x1b2a <__mulsf3+0x1c>
    1b22:	95 23       	and	r25, r21
    1b24:	11 f0       	breq	.+4      	; 0x1b2a <__mulsf3+0x1c>
    1b26:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_inf>
    1b2a:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__fp_nan>
    1b2e:	11 24       	eor	r1, r1
    1b30:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_szero>

00001b34 <__mulsf3x>:
    1b34:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <__fp_split3>
    1b38:	70 f3       	brcs	.-36     	; 0x1b16 <__mulsf3+0x8>

00001b3a <__mulsf3_pse>:
    1b3a:	95 9f       	mul	r25, r21
    1b3c:	c1 f3       	breq	.-16     	; 0x1b2e <__mulsf3+0x20>
    1b3e:	95 0f       	add	r25, r21
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	55 1f       	adc	r21, r21
    1b44:	62 9f       	mul	r22, r18
    1b46:	f0 01       	movw	r30, r0
    1b48:	72 9f       	mul	r23, r18
    1b4a:	bb 27       	eor	r27, r27
    1b4c:	f0 0d       	add	r31, r0
    1b4e:	b1 1d       	adc	r27, r1
    1b50:	63 9f       	mul	r22, r19
    1b52:	aa 27       	eor	r26, r26
    1b54:	f0 0d       	add	r31, r0
    1b56:	b1 1d       	adc	r27, r1
    1b58:	aa 1f       	adc	r26, r26
    1b5a:	64 9f       	mul	r22, r20
    1b5c:	66 27       	eor	r22, r22
    1b5e:	b0 0d       	add	r27, r0
    1b60:	a1 1d       	adc	r26, r1
    1b62:	66 1f       	adc	r22, r22
    1b64:	82 9f       	mul	r24, r18
    1b66:	22 27       	eor	r18, r18
    1b68:	b0 0d       	add	r27, r0
    1b6a:	a1 1d       	adc	r26, r1
    1b6c:	62 1f       	adc	r22, r18
    1b6e:	73 9f       	mul	r23, r19
    1b70:	b0 0d       	add	r27, r0
    1b72:	a1 1d       	adc	r26, r1
    1b74:	62 1f       	adc	r22, r18
    1b76:	83 9f       	mul	r24, r19
    1b78:	a0 0d       	add	r26, r0
    1b7a:	61 1d       	adc	r22, r1
    1b7c:	22 1f       	adc	r18, r18
    1b7e:	74 9f       	mul	r23, r20
    1b80:	33 27       	eor	r19, r19
    1b82:	a0 0d       	add	r26, r0
    1b84:	61 1d       	adc	r22, r1
    1b86:	23 1f       	adc	r18, r19
    1b88:	84 9f       	mul	r24, r20
    1b8a:	60 0d       	add	r22, r0
    1b8c:	21 1d       	adc	r18, r1
    1b8e:	82 2f       	mov	r24, r18
    1b90:	76 2f       	mov	r23, r22
    1b92:	6a 2f       	mov	r22, r26
    1b94:	11 24       	eor	r1, r1
    1b96:	9f 57       	subi	r25, 0x7F	; 127
    1b98:	50 40       	sbci	r21, 0x00	; 0
    1b9a:	9a f0       	brmi	.+38     	; 0x1bc2 <__mulsf3_pse+0x88>
    1b9c:	f1 f0       	breq	.+60     	; 0x1bda <__mulsf3_pse+0xa0>
    1b9e:	88 23       	and	r24, r24
    1ba0:	4a f0       	brmi	.+18     	; 0x1bb4 <__mulsf3_pse+0x7a>
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	bb 1f       	adc	r27, r27
    1ba8:	66 1f       	adc	r22, r22
    1baa:	77 1f       	adc	r23, r23
    1bac:	88 1f       	adc	r24, r24
    1bae:	91 50       	subi	r25, 0x01	; 1
    1bb0:	50 40       	sbci	r21, 0x00	; 0
    1bb2:	a9 f7       	brne	.-22     	; 0x1b9e <__mulsf3_pse+0x64>
    1bb4:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb6:	51 05       	cpc	r21, r1
    1bb8:	80 f0       	brcs	.+32     	; 0x1bda <__mulsf3_pse+0xa0>
    1bba:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_inf>
    1bbe:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_szero>
    1bc2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bc4:	e4 f3       	brlt	.-8      	; 0x1bbe <__mulsf3_pse+0x84>
    1bc6:	98 3e       	cpi	r25, 0xE8	; 232
    1bc8:	d4 f3       	brlt	.-12     	; 0x1bbe <__mulsf3_pse+0x84>
    1bca:	86 95       	lsr	r24
    1bcc:	77 95       	ror	r23
    1bce:	67 95       	ror	r22
    1bd0:	b7 95       	ror	r27
    1bd2:	f7 95       	ror	r31
    1bd4:	e7 95       	ror	r30
    1bd6:	9f 5f       	subi	r25, 0xFF	; 255
    1bd8:	c1 f7       	brne	.-16     	; 0x1bca <__mulsf3_pse+0x90>
    1bda:	fe 2b       	or	r31, r30
    1bdc:	88 0f       	add	r24, r24
    1bde:	91 1d       	adc	r25, r1
    1be0:	96 95       	lsr	r25
    1be2:	87 95       	ror	r24
    1be4:	97 f9       	bld	r25, 7
    1be6:	08 95       	ret

00001be8 <pow>:
    1be8:	fa 01       	movw	r30, r20
    1bea:	ee 0f       	add	r30, r30
    1bec:	ff 1f       	adc	r31, r31
    1bee:	30 96       	adiw	r30, 0x00	; 0
    1bf0:	21 05       	cpc	r18, r1
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	a1 f1       	breq	.+104    	; 0x1c5e <pow+0x76>
    1bf6:	61 15       	cp	r22, r1
    1bf8:	71 05       	cpc	r23, r1
    1bfa:	61 f4       	brne	.+24     	; 0x1c14 <pow+0x2c>
    1bfc:	80 38       	cpi	r24, 0x80	; 128
    1bfe:	bf e3       	ldi	r27, 0x3F	; 63
    1c00:	9b 07       	cpc	r25, r27
    1c02:	49 f1       	breq	.+82     	; 0x1c56 <pow+0x6e>
    1c04:	68 94       	set
    1c06:	90 38       	cpi	r25, 0x80	; 128
    1c08:	81 05       	cpc	r24, r1
    1c0a:	61 f0       	breq	.+24     	; 0x1c24 <pow+0x3c>
    1c0c:	80 38       	cpi	r24, 0x80	; 128
    1c0e:	bf ef       	ldi	r27, 0xFF	; 255
    1c10:	9b 07       	cpc	r25, r27
    1c12:	41 f0       	breq	.+16     	; 0x1c24 <pow+0x3c>
    1c14:	99 23       	and	r25, r25
    1c16:	4a f5       	brpl	.+82     	; 0x1c6a <pow+0x82>
    1c18:	ff 3f       	cpi	r31, 0xFF	; 255
    1c1a:	e1 05       	cpc	r30, r1
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	21 05       	cpc	r18, r1
    1c20:	19 f1       	breq	.+70     	; 0x1c68 <pow+0x80>
    1c22:	e8 94       	clt
    1c24:	08 94       	sec
    1c26:	e7 95       	ror	r30
    1c28:	d9 01       	movw	r26, r18
    1c2a:	aa 23       	and	r26, r26
    1c2c:	29 f4       	brne	.+10     	; 0x1c38 <pow+0x50>
    1c2e:	ab 2f       	mov	r26, r27
    1c30:	be 2f       	mov	r27, r30
    1c32:	f8 5f       	subi	r31, 0xF8	; 248
    1c34:	d0 f3       	brcs	.-12     	; 0x1c2a <pow+0x42>
    1c36:	10 c0       	rjmp	.+32     	; 0x1c58 <pow+0x70>
    1c38:	ff 5f       	subi	r31, 0xFF	; 255
    1c3a:	70 f4       	brcc	.+28     	; 0x1c58 <pow+0x70>
    1c3c:	a6 95       	lsr	r26
    1c3e:	e0 f7       	brcc	.-8      	; 0x1c38 <pow+0x50>
    1c40:	f7 39       	cpi	r31, 0x97	; 151
    1c42:	50 f0       	brcs	.+20     	; 0x1c58 <pow+0x70>
    1c44:	19 f0       	breq	.+6      	; 0x1c4c <pow+0x64>
    1c46:	ff 3a       	cpi	r31, 0xAF	; 175
    1c48:	38 f4       	brcc	.+14     	; 0x1c58 <pow+0x70>
    1c4a:	9f 77       	andi	r25, 0x7F	; 127
    1c4c:	9f 93       	push	r25
    1c4e:	0d d0       	rcall	.+26     	; 0x1c6a <pow+0x82>
    1c50:	0f 90       	pop	r0
    1c52:	07 fc       	sbrc	r0, 7
    1c54:	90 58       	subi	r25, 0x80	; 128
    1c56:	08 95       	ret
    1c58:	46 f0       	brts	.+16     	; 0x1c6a <pow+0x82>
    1c5a:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__fp_nan>
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	80 e8       	ldi	r24, 0x80	; 128
    1c64:	9f e3       	ldi	r25, 0x3F	; 63
    1c66:	08 95       	ret
    1c68:	4f e7       	ldi	r20, 0x7F	; 127
    1c6a:	9f 77       	andi	r25, 0x7F	; 127
    1c6c:	5f 93       	push	r21
    1c6e:	4f 93       	push	r20
    1c70:	3f 93       	push	r19
    1c72:	2f 93       	push	r18
    1c74:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <log>
    1c78:	2f 91       	pop	r18
    1c7a:	3f 91       	pop	r19
    1c7c:	4f 91       	pop	r20
    1c7e:	5f 91       	pop	r21
    1c80:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <__mulsf3>
    1c84:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <exp>
    1c88:	29 f4       	brne	.+10     	; 0x1c94 <pow+0xac>
    1c8a:	16 f0       	brts	.+4      	; 0x1c90 <pow+0xa8>
    1c8c:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_inf>
    1c90:	0c 94 80 0d 	jmp	0x1b00	; 0x1b00 <__fp_zero>
    1c94:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__fp_nan>

00001c98 <exp>:
    1c98:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_splitA>
    1c9c:	a8 f3       	brcs	.-22     	; 0x1c88 <pow+0xa0>
    1c9e:	96 38       	cpi	r25, 0x86	; 134
    1ca0:	a0 f7       	brcc	.-24     	; 0x1c8a <pow+0xa2>
    1ca2:	07 f8       	bld	r0, 7
    1ca4:	0f 92       	push	r0
    1ca6:	e8 94       	clt
    1ca8:	2b e3       	ldi	r18, 0x3B	; 59
    1caa:	3a ea       	ldi	r19, 0xAA	; 170
    1cac:	48 eb       	ldi	r20, 0xB8	; 184
    1cae:	5f e7       	ldi	r21, 0x7F	; 127
    1cb0:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__mulsf3_pse>
    1cb4:	0f 92       	push	r0
    1cb6:	0f 92       	push	r0
    1cb8:	0f 92       	push	r0
    1cba:	4d b7       	in	r20, 0x3d	; 61
    1cbc:	5e b7       	in	r21, 0x3e	; 62
    1cbe:	0f 92       	push	r0
    1cc0:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <modf>
    1cc4:	e8 e6       	ldi	r30, 0x68	; 104
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__fp_powser>
    1ccc:	4f 91       	pop	r20
    1cce:	5f 91       	pop	r21
    1cd0:	ef 91       	pop	r30
    1cd2:	ff 91       	pop	r31
    1cd4:	e5 95       	asr	r30
    1cd6:	ee 1f       	adc	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	49 f0       	breq	.+18     	; 0x1cee <exp+0x56>
    1cdc:	fe 57       	subi	r31, 0x7E	; 126
    1cde:	e0 68       	ori	r30, 0x80	; 128
    1ce0:	44 27       	eor	r20, r20
    1ce2:	ee 0f       	add	r30, r30
    1ce4:	44 1f       	adc	r20, r20
    1ce6:	fa 95       	dec	r31
    1ce8:	e1 f7       	brne	.-8      	; 0x1ce2 <exp+0x4a>
    1cea:	41 95       	neg	r20
    1cec:	55 0b       	sbc	r21, r21
    1cee:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <ldexp>
    1cf2:	0f 90       	pop	r0
    1cf4:	07 fe       	sbrs	r0, 7
    1cf6:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <inverse>
    1cfa:	08 95       	ret

00001cfc <__fp_powser>:
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	1f 93       	push	r17
    1d02:	0f 93       	push	r16
    1d04:	ff 92       	push	r15
    1d06:	ef 92       	push	r14
    1d08:	df 92       	push	r13
    1d0a:	7b 01       	movw	r14, r22
    1d0c:	8c 01       	movw	r16, r24
    1d0e:	68 94       	set
    1d10:	06 c0       	rjmp	.+12     	; 0x1d1e <__fp_powser+0x22>
    1d12:	da 2e       	mov	r13, r26
    1d14:	ef 01       	movw	r28, r30
    1d16:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3x>
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e8 94       	clt
    1d1e:	a5 91       	lpm	r26, Z+
    1d20:	25 91       	lpm	r18, Z+
    1d22:	35 91       	lpm	r19, Z+
    1d24:	45 91       	lpm	r20, Z+
    1d26:	55 91       	lpm	r21, Z+
    1d28:	a6 f3       	brts	.-24     	; 0x1d12 <__fp_powser+0x16>
    1d2a:	ef 01       	movw	r28, r30
    1d2c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3x>
    1d30:	fe 01       	movw	r30, r28
    1d32:	97 01       	movw	r18, r14
    1d34:	a8 01       	movw	r20, r16
    1d36:	da 94       	dec	r13
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <__fp_powser+0x18>
    1d3a:	df 90       	pop	r13
    1d3c:	ef 90       	pop	r14
    1d3e:	ff 90       	pop	r15
    1d40:	0f 91       	pop	r16
    1d42:	1f 91       	pop	r17
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <inverse>:
    1d4a:	9b 01       	movw	r18, r22
    1d4c:	ac 01       	movw	r20, r24
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	80 e8       	ldi	r24, 0x80	; 128
    1d54:	9f e3       	ldi	r25, 0x3F	; 63
    1d56:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__divsf3>
    1d5a:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_inf>
    1d5e:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__fp_mpack>

00001d62 <ldexp>:
    1d62:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_splitA>
    1d66:	d8 f3       	brcs	.-10     	; 0x1d5e <inverse+0x14>
    1d68:	99 23       	and	r25, r25
    1d6a:	c9 f3       	breq	.-14     	; 0x1d5e <inverse+0x14>
    1d6c:	94 0f       	add	r25, r20
    1d6e:	51 1d       	adc	r21, r1
    1d70:	a3 f3       	brvs	.-24     	; 0x1d5a <inverse+0x10>
    1d72:	91 50       	subi	r25, 0x01	; 1
    1d74:	50 40       	sbci	r21, 0x00	; 0
    1d76:	94 f0       	brlt	.+36     	; 0x1d9c <ldexp+0x3a>
    1d78:	59 f0       	breq	.+22     	; 0x1d90 <ldexp+0x2e>
    1d7a:	88 23       	and	r24, r24
    1d7c:	32 f0       	brmi	.+12     	; 0x1d8a <ldexp+0x28>
    1d7e:	66 0f       	add	r22, r22
    1d80:	77 1f       	adc	r23, r23
    1d82:	88 1f       	adc	r24, r24
    1d84:	91 50       	subi	r25, 0x01	; 1
    1d86:	50 40       	sbci	r21, 0x00	; 0
    1d88:	c1 f7       	brne	.-16     	; 0x1d7a <ldexp+0x18>
    1d8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d8c:	51 05       	cpc	r21, r1
    1d8e:	2c f7       	brge	.-54     	; 0x1d5a <inverse+0x10>
    1d90:	88 0f       	add	r24, r24
    1d92:	91 1d       	adc	r25, r1
    1d94:	96 95       	lsr	r25
    1d96:	87 95       	ror	r24
    1d98:	97 f9       	bld	r25, 7
    1d9a:	08 95       	ret
    1d9c:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9e:	ac f0       	brlt	.+42     	; 0x1dca <ldexp+0x68>
    1da0:	98 3e       	cpi	r25, 0xE8	; 232
    1da2:	9c f0       	brlt	.+38     	; 0x1dca <ldexp+0x68>
    1da4:	bb 27       	eor	r27, r27
    1da6:	86 95       	lsr	r24
    1da8:	77 95       	ror	r23
    1daa:	67 95       	ror	r22
    1dac:	b7 95       	ror	r27
    1dae:	08 f4       	brcc	.+2      	; 0x1db2 <ldexp+0x50>
    1db0:	b1 60       	ori	r27, 0x01	; 1
    1db2:	93 95       	inc	r25
    1db4:	c1 f7       	brne	.-16     	; 0x1da6 <ldexp+0x44>
    1db6:	bb 0f       	add	r27, r27
    1db8:	58 f7       	brcc	.-42     	; 0x1d90 <ldexp+0x2e>
    1dba:	11 f4       	brne	.+4      	; 0x1dc0 <ldexp+0x5e>
    1dbc:	60 ff       	sbrs	r22, 0
    1dbe:	e8 cf       	rjmp	.-48     	; 0x1d90 <ldexp+0x2e>
    1dc0:	6f 5f       	subi	r22, 0xFF	; 255
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc8:	e3 cf       	rjmp	.-58     	; 0x1d90 <ldexp+0x2e>
    1dca:	0c 94 81 0d 	jmp	0x1b02	; 0x1b02 <__fp_szero>
    1dce:	16 f0       	brts	.+4      	; 0x1dd4 <ldexp+0x72>
    1dd0:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__fp_mpack>
    1dd4:	0c 94 3c 0d 	jmp	0x1a78	; 0x1a78 <__fp_nan>
    1dd8:	68 94       	set
    1dda:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__fp_inf>

00001dde <log>:
    1dde:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__fp_splitA>
    1de2:	a8 f3       	brcs	.-22     	; 0x1dce <ldexp+0x6c>
    1de4:	99 23       	and	r25, r25
    1de6:	c1 f3       	breq	.-16     	; 0x1dd8 <ldexp+0x76>
    1de8:	ae f3       	brts	.-22     	; 0x1dd4 <ldexp+0x72>
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	1f 93       	push	r17
    1df0:	0f 93       	push	r16
    1df2:	ff 92       	push	r15
    1df4:	c9 2f       	mov	r28, r25
    1df6:	dd 27       	eor	r29, r29
    1df8:	88 23       	and	r24, r24
    1dfa:	2a f0       	brmi	.+10     	; 0x1e06 <log+0x28>
    1dfc:	21 97       	sbiw	r28, 0x01	; 1
    1dfe:	66 0f       	add	r22, r22
    1e00:	77 1f       	adc	r23, r23
    1e02:	88 1f       	adc	r24, r24
    1e04:	da f7       	brpl	.-10     	; 0x1dfc <log+0x1e>
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f eb       	ldi	r21, 0xBF	; 191
    1e0e:	9f e3       	ldi	r25, 0x3F	; 63
    1e10:	88 39       	cpi	r24, 0x98	; 152
    1e12:	20 f0       	brcs	.+8      	; 0x1e1c <log+0x3e>
    1e14:	80 3e       	cpi	r24, 0xE0	; 224
    1e16:	38 f0       	brcs	.+14     	; 0x1e26 <log+0x48>
    1e18:	21 96       	adiw	r28, 0x01	; 1
    1e1a:	8f 77       	andi	r24, 0x7F	; 127
    1e1c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__addsf3>
    1e20:	e0 e9       	ldi	r30, 0x90	; 144
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	04 c0       	rjmp	.+8      	; 0x1e2e <log+0x50>
    1e26:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <__addsf3>
    1e2a:	ed eb       	ldi	r30, 0xBD	; 189
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <__fp_powser>
    1e32:	8b 01       	movw	r16, r22
    1e34:	be 01       	movw	r22, r28
    1e36:	ec 01       	movw	r28, r24
    1e38:	fb 2e       	mov	r15, r27
    1e3a:	6f 57       	subi	r22, 0x7F	; 127
    1e3c:	71 09       	sbc	r23, r1
    1e3e:	75 95       	asr	r23
    1e40:	77 1f       	adc	r23, r23
    1e42:	88 0b       	sbc	r24, r24
    1e44:	99 0b       	sbc	r25, r25
    1e46:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__floatsisf>
    1e4a:	28 e1       	ldi	r18, 0x18	; 24
    1e4c:	32 e7       	ldi	r19, 0x72	; 114
    1e4e:	41 e3       	ldi	r20, 0x31	; 49
    1e50:	5f e3       	ldi	r21, 0x3F	; 63
    1e52:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__mulsf3x>
    1e56:	af 2d       	mov	r26, r15
    1e58:	98 01       	movw	r18, r16
    1e5a:	ae 01       	movw	r20, r28
    1e5c:	ff 90       	pop	r15
    1e5e:	0f 91       	pop	r16
    1e60:	1f 91       	pop	r17
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__addsf3x>
    1e6a:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <__fp_round>

00001e6e <modf>:
    1e6e:	fa 01       	movw	r30, r20
    1e70:	dc 01       	movw	r26, r24
    1e72:	aa 0f       	add	r26, r26
    1e74:	bb 1f       	adc	r27, r27
    1e76:	9b 01       	movw	r18, r22
    1e78:	ac 01       	movw	r20, r24
    1e7a:	bf 57       	subi	r27, 0x7F	; 127
    1e7c:	28 f4       	brcc	.+10     	; 0x1e88 <modf+0x1a>
    1e7e:	22 27       	eor	r18, r18
    1e80:	33 27       	eor	r19, r19
    1e82:	44 27       	eor	r20, r20
    1e84:	50 78       	andi	r21, 0x80	; 128
    1e86:	20 c0       	rjmp	.+64     	; 0x1ec8 <modf+0x5a>
    1e88:	b7 51       	subi	r27, 0x17	; 23
    1e8a:	90 f4       	brcc	.+36     	; 0x1eb0 <modf+0x42>
    1e8c:	ab 2f       	mov	r26, r27
    1e8e:	00 24       	eor	r0, r0
    1e90:	46 95       	lsr	r20
    1e92:	37 95       	ror	r19
    1e94:	27 95       	ror	r18
    1e96:	01 1c       	adc	r0, r1
    1e98:	a3 95       	inc	r26
    1e9a:	d2 f3       	brmi	.-12     	; 0x1e90 <modf+0x22>
    1e9c:	00 20       	and	r0, r0
    1e9e:	71 f0       	breq	.+28     	; 0x1ebc <modf+0x4e>
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	44 1f       	adc	r20, r20
    1ea6:	b3 95       	inc	r27
    1ea8:	da f3       	brmi	.-10     	; 0x1ea0 <modf+0x32>
    1eaa:	0e d0       	rcall	.+28     	; 0x1ec8 <modf+0x5a>
    1eac:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__subsf3>
    1eb0:	61 30       	cpi	r22, 0x01	; 1
    1eb2:	71 05       	cpc	r23, r1
    1eb4:	a0 e8       	ldi	r26, 0x80	; 128
    1eb6:	8a 07       	cpc	r24, r26
    1eb8:	b9 46       	sbci	r27, 0x69	; 105
    1eba:	30 f4       	brcc	.+12     	; 0x1ec8 <modf+0x5a>
    1ebc:	9b 01       	movw	r18, r22
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	66 27       	eor	r22, r22
    1ec2:	77 27       	eor	r23, r23
    1ec4:	88 27       	eor	r24, r24
    1ec6:	90 78       	andi	r25, 0x80	; 128
    1ec8:	30 96       	adiw	r30, 0x00	; 0
    1eca:	21 f0       	breq	.+8      	; 0x1ed4 <modf+0x66>
    1ecc:	20 83       	st	Z, r18
    1ece:	31 83       	std	Z+1, r19	; 0x01
    1ed0:	42 83       	std	Z+2, r20	; 0x02
    1ed2:	53 83       	std	Z+3, r21	; 0x03
    1ed4:	08 95       	ret

00001ed6 <__fp_mpack>:
    1ed6:	9f 3f       	cpi	r25, 0xFF	; 255
    1ed8:	31 f0       	breq	.+12     	; 0x1ee6 <__fp_mpack_finite+0xc>

00001eda <__fp_mpack_finite>:
    1eda:	91 50       	subi	r25, 0x01	; 1
    1edc:	20 f4       	brcc	.+8      	; 0x1ee6 <__fp_mpack_finite+0xc>
    1ede:	87 95       	ror	r24
    1ee0:	77 95       	ror	r23
    1ee2:	67 95       	ror	r22
    1ee4:	b7 95       	ror	r27
    1ee6:	88 0f       	add	r24, r24
    1ee8:	91 1d       	adc	r25, r1
    1eea:	96 95       	lsr	r25
    1eec:	87 95       	ror	r24
    1eee:	97 f9       	bld	r25, 7
    1ef0:	08 95       	ret

00001ef2 <__ltoa_ncheck>:
    1ef2:	bb 27       	eor	r27, r27
    1ef4:	2a 30       	cpi	r18, 0x0A	; 10
    1ef6:	51 f4       	brne	.+20     	; 0x1f0c <__ltoa_ncheck+0x1a>
    1ef8:	99 23       	and	r25, r25
    1efa:	42 f4       	brpl	.+16     	; 0x1f0c <__ltoa_ncheck+0x1a>
    1efc:	bd e2       	ldi	r27, 0x2D	; 45
    1efe:	90 95       	com	r25
    1f00:	80 95       	com	r24
    1f02:	70 95       	com	r23
    1f04:	61 95       	neg	r22
    1f06:	7f 4f       	sbci	r23, 0xFF	; 255
    1f08:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0c:	0c 94 89 0f 	jmp	0x1f12	; 0x1f12 <__ultoa_common>

00001f10 <__ultoa_ncheck>:
    1f10:	bb 27       	eor	r27, r27

00001f12 <__ultoa_common>:
    1f12:	fa 01       	movw	r30, r20
    1f14:	a6 2f       	mov	r26, r22
    1f16:	62 17       	cp	r22, r18
    1f18:	71 05       	cpc	r23, r1
    1f1a:	81 05       	cpc	r24, r1
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	33 0b       	sbc	r19, r19
    1f20:	30 fb       	bst	r19, 0
    1f22:	66 f0       	brts	.+24     	; 0x1f3c <__ultoa_common+0x2a>
    1f24:	aa 27       	eor	r26, r26
    1f26:	66 0f       	add	r22, r22
    1f28:	77 1f       	adc	r23, r23
    1f2a:	88 1f       	adc	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	aa 1f       	adc	r26, r26
    1f30:	a2 17       	cp	r26, r18
    1f32:	10 f0       	brcs	.+4      	; 0x1f38 <__ultoa_common+0x26>
    1f34:	a2 1b       	sub	r26, r18
    1f36:	63 95       	inc	r22
    1f38:	38 50       	subi	r19, 0x08	; 8
    1f3a:	a9 f7       	brne	.-22     	; 0x1f26 <__ultoa_common+0x14>
    1f3c:	a0 5d       	subi	r26, 0xD0	; 208
    1f3e:	aa 33       	cpi	r26, 0x3A	; 58
    1f40:	08 f0       	brcs	.+2      	; 0x1f44 <__ultoa_common+0x32>
    1f42:	a9 5d       	subi	r26, 0xD9	; 217
    1f44:	a1 93       	st	Z+, r26
    1f46:	36 f7       	brtc	.-52     	; 0x1f14 <__ultoa_common+0x2>
    1f48:	b1 11       	cpse	r27, r1
    1f4a:	b1 93       	st	Z+, r27
    1f4c:	10 82       	st	Z, r1
    1f4e:	ca 01       	movw	r24, r20
    1f50:	0c 94 b5 11 	jmp	0x236a	; 0x236a <strrev>

00001f54 <sprintf>:
    1f54:	ae e0       	ldi	r26, 0x0E	; 14
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e0 eb       	ldi	r30, 0xB0	; 176
    1f5a:	ff e0       	ldi	r31, 0x0F	; 15
    1f5c:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__prologue_saves__+0x1c>
    1f60:	0d 89       	ldd	r16, Y+21	; 0x15
    1f62:	1e 89       	ldd	r17, Y+22	; 0x16
    1f64:	86 e0       	ldi	r24, 0x06	; 6
    1f66:	8c 83       	std	Y+4, r24	; 0x04
    1f68:	1a 83       	std	Y+2, r17	; 0x02
    1f6a:	09 83       	std	Y+1, r16	; 0x01
    1f6c:	8f ef       	ldi	r24, 0xFF	; 255
    1f6e:	9f e7       	ldi	r25, 0x7F	; 127
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	ae 01       	movw	r20, r28
    1f76:	47 5e       	subi	r20, 0xE7	; 231
    1f78:	5f 4f       	sbci	r21, 0xFF	; 255
    1f7a:	6f 89       	ldd	r22, Y+23	; 0x17
    1f7c:	78 8d       	ldd	r23, Y+24	; 0x18
    1f7e:	ce 01       	movw	r24, r28
    1f80:	01 96       	adiw	r24, 0x01	; 1
    1f82:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <vfprintf>
    1f86:	2f 81       	ldd	r18, Y+7	; 0x07
    1f88:	38 85       	ldd	r19, Y+8	; 0x08
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	e2 0f       	add	r30, r18
    1f8e:	f3 1f       	adc	r31, r19
    1f90:	10 82       	st	Z, r1
    1f92:	2e 96       	adiw	r28, 0x0e	; 14
    1f94:	e4 e0       	ldi	r30, 0x04	; 4
    1f96:	0c 94 85 12 	jmp	0x250a	; 0x250a <__epilogue_restores__+0x1c>

00001f9a <vfprintf>:
    1f9a:	ac e0       	ldi	r26, 0x0C	; 12
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e3 ed       	ldi	r30, 0xD3	; 211
    1fa0:	ff e0       	ldi	r31, 0x0F	; 15
    1fa2:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__prologue_saves__>
    1fa6:	7c 01       	movw	r14, r24
    1fa8:	6b 01       	movw	r12, r22
    1faa:	8a 01       	movw	r16, r20
    1fac:	fc 01       	movw	r30, r24
    1fae:	17 82       	std	Z+7, r1	; 0x07
    1fb0:	16 82       	std	Z+6, r1	; 0x06
    1fb2:	83 81       	ldd	r24, Z+3	; 0x03
    1fb4:	81 ff       	sbrs	r24, 1
    1fb6:	bd c1       	rjmp	.+890    	; 0x2332 <vfprintf+0x398>
    1fb8:	ce 01       	movw	r24, r28
    1fba:	01 96       	adiw	r24, 0x01	; 1
    1fbc:	4c 01       	movw	r8, r24
    1fbe:	f7 01       	movw	r30, r14
    1fc0:	93 81       	ldd	r25, Z+3	; 0x03
    1fc2:	f6 01       	movw	r30, r12
    1fc4:	93 fd       	sbrc	r25, 3
    1fc6:	85 91       	lpm	r24, Z+
    1fc8:	93 ff       	sbrs	r25, 3
    1fca:	81 91       	ld	r24, Z+
    1fcc:	6f 01       	movw	r12, r30
    1fce:	88 23       	and	r24, r24
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <vfprintf+0x3a>
    1fd2:	ab c1       	rjmp	.+854    	; 0x232a <vfprintf+0x390>
    1fd4:	85 32       	cpi	r24, 0x25	; 37
    1fd6:	39 f4       	brne	.+14     	; 0x1fe6 <vfprintf+0x4c>
    1fd8:	93 fd       	sbrc	r25, 3
    1fda:	85 91       	lpm	r24, Z+
    1fdc:	93 ff       	sbrs	r25, 3
    1fde:	81 91       	ld	r24, Z+
    1fe0:	6f 01       	movw	r12, r30
    1fe2:	85 32       	cpi	r24, 0x25	; 37
    1fe4:	29 f4       	brne	.+10     	; 0x1ff0 <vfprintf+0x56>
    1fe6:	b7 01       	movw	r22, r14
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    1fee:	e7 cf       	rjmp	.-50     	; 0x1fbe <vfprintf+0x24>
    1ff0:	51 2c       	mov	r5, r1
    1ff2:	31 2c       	mov	r3, r1
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	20 32       	cpi	r18, 0x20	; 32
    1ff8:	a0 f4       	brcc	.+40     	; 0x2022 <vfprintf+0x88>
    1ffa:	8b 32       	cpi	r24, 0x2B	; 43
    1ffc:	69 f0       	breq	.+26     	; 0x2018 <vfprintf+0x7e>
    1ffe:	30 f4       	brcc	.+12     	; 0x200c <vfprintf+0x72>
    2000:	80 32       	cpi	r24, 0x20	; 32
    2002:	59 f0       	breq	.+22     	; 0x201a <vfprintf+0x80>
    2004:	83 32       	cpi	r24, 0x23	; 35
    2006:	69 f4       	brne	.+26     	; 0x2022 <vfprintf+0x88>
    2008:	20 61       	ori	r18, 0x10	; 16
    200a:	2c c0       	rjmp	.+88     	; 0x2064 <vfprintf+0xca>
    200c:	8d 32       	cpi	r24, 0x2D	; 45
    200e:	39 f0       	breq	.+14     	; 0x201e <vfprintf+0x84>
    2010:	80 33       	cpi	r24, 0x30	; 48
    2012:	39 f4       	brne	.+14     	; 0x2022 <vfprintf+0x88>
    2014:	21 60       	ori	r18, 0x01	; 1
    2016:	26 c0       	rjmp	.+76     	; 0x2064 <vfprintf+0xca>
    2018:	22 60       	ori	r18, 0x02	; 2
    201a:	24 60       	ori	r18, 0x04	; 4
    201c:	23 c0       	rjmp	.+70     	; 0x2064 <vfprintf+0xca>
    201e:	28 60       	ori	r18, 0x08	; 8
    2020:	21 c0       	rjmp	.+66     	; 0x2064 <vfprintf+0xca>
    2022:	27 fd       	sbrc	r18, 7
    2024:	27 c0       	rjmp	.+78     	; 0x2074 <vfprintf+0xda>
    2026:	30 ed       	ldi	r19, 0xD0	; 208
    2028:	38 0f       	add	r19, r24
    202a:	3a 30       	cpi	r19, 0x0A	; 10
    202c:	78 f4       	brcc	.+30     	; 0x204c <vfprintf+0xb2>
    202e:	26 ff       	sbrs	r18, 6
    2030:	06 c0       	rjmp	.+12     	; 0x203e <vfprintf+0xa4>
    2032:	fa e0       	ldi	r31, 0x0A	; 10
    2034:	5f 9e       	mul	r5, r31
    2036:	30 0d       	add	r19, r0
    2038:	11 24       	eor	r1, r1
    203a:	53 2e       	mov	r5, r19
    203c:	13 c0       	rjmp	.+38     	; 0x2064 <vfprintf+0xca>
    203e:	8a e0       	ldi	r24, 0x0A	; 10
    2040:	38 9e       	mul	r3, r24
    2042:	30 0d       	add	r19, r0
    2044:	11 24       	eor	r1, r1
    2046:	33 2e       	mov	r3, r19
    2048:	20 62       	ori	r18, 0x20	; 32
    204a:	0c c0       	rjmp	.+24     	; 0x2064 <vfprintf+0xca>
    204c:	8e 32       	cpi	r24, 0x2E	; 46
    204e:	21 f4       	brne	.+8      	; 0x2058 <vfprintf+0xbe>
    2050:	26 fd       	sbrc	r18, 6
    2052:	6b c1       	rjmp	.+726    	; 0x232a <vfprintf+0x390>
    2054:	20 64       	ori	r18, 0x40	; 64
    2056:	06 c0       	rjmp	.+12     	; 0x2064 <vfprintf+0xca>
    2058:	8c 36       	cpi	r24, 0x6C	; 108
    205a:	11 f4       	brne	.+4      	; 0x2060 <vfprintf+0xc6>
    205c:	20 68       	ori	r18, 0x80	; 128
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <vfprintf+0xca>
    2060:	88 36       	cpi	r24, 0x68	; 104
    2062:	41 f4       	brne	.+16     	; 0x2074 <vfprintf+0xda>
    2064:	f6 01       	movw	r30, r12
    2066:	93 fd       	sbrc	r25, 3
    2068:	85 91       	lpm	r24, Z+
    206a:	93 ff       	sbrs	r25, 3
    206c:	81 91       	ld	r24, Z+
    206e:	6f 01       	movw	r12, r30
    2070:	81 11       	cpse	r24, r1
    2072:	c1 cf       	rjmp	.-126    	; 0x1ff6 <vfprintf+0x5c>
    2074:	98 2f       	mov	r25, r24
    2076:	9f 7d       	andi	r25, 0xDF	; 223
    2078:	95 54       	subi	r25, 0x45	; 69
    207a:	93 30       	cpi	r25, 0x03	; 3
    207c:	28 f4       	brcc	.+10     	; 0x2088 <vfprintf+0xee>
    207e:	0c 5f       	subi	r16, 0xFC	; 252
    2080:	1f 4f       	sbci	r17, 0xFF	; 255
    2082:	ff e3       	ldi	r31, 0x3F	; 63
    2084:	f9 83       	std	Y+1, r31	; 0x01
    2086:	0d c0       	rjmp	.+26     	; 0x20a2 <vfprintf+0x108>
    2088:	83 36       	cpi	r24, 0x63	; 99
    208a:	31 f0       	breq	.+12     	; 0x2098 <vfprintf+0xfe>
    208c:	83 37       	cpi	r24, 0x73	; 115
    208e:	71 f0       	breq	.+28     	; 0x20ac <vfprintf+0x112>
    2090:	83 35       	cpi	r24, 0x53	; 83
    2092:	09 f0       	breq	.+2      	; 0x2096 <vfprintf+0xfc>
    2094:	5b c0       	rjmp	.+182    	; 0x214c <vfprintf+0x1b2>
    2096:	22 c0       	rjmp	.+68     	; 0x20dc <vfprintf+0x142>
    2098:	f8 01       	movw	r30, r16
    209a:	80 81       	ld	r24, Z
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	0e 5f       	subi	r16, 0xFE	; 254
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	44 24       	eor	r4, r4
    20a4:	43 94       	inc	r4
    20a6:	51 2c       	mov	r5, r1
    20a8:	54 01       	movw	r10, r8
    20aa:	15 c0       	rjmp	.+42     	; 0x20d6 <vfprintf+0x13c>
    20ac:	38 01       	movw	r6, r16
    20ae:	f2 e0       	ldi	r31, 0x02	; 2
    20b0:	6f 0e       	add	r6, r31
    20b2:	71 1c       	adc	r7, r1
    20b4:	f8 01       	movw	r30, r16
    20b6:	a0 80       	ld	r10, Z
    20b8:	b1 80       	ldd	r11, Z+1	; 0x01
    20ba:	26 ff       	sbrs	r18, 6
    20bc:	03 c0       	rjmp	.+6      	; 0x20c4 <vfprintf+0x12a>
    20be:	65 2d       	mov	r22, r5
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <vfprintf+0x12e>
    20c4:	6f ef       	ldi	r22, 0xFF	; 255
    20c6:	7f ef       	ldi	r23, 0xFF	; 255
    20c8:	c5 01       	movw	r24, r10
    20ca:	2c 87       	std	Y+12, r18	; 0x0c
    20cc:	0e 94 aa 11 	call	0x2354	; 0x2354 <strnlen>
    20d0:	2c 01       	movw	r4, r24
    20d2:	83 01       	movw	r16, r6
    20d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    20d6:	2f 77       	andi	r18, 0x7F	; 127
    20d8:	22 2e       	mov	r2, r18
    20da:	17 c0       	rjmp	.+46     	; 0x210a <vfprintf+0x170>
    20dc:	38 01       	movw	r6, r16
    20de:	f2 e0       	ldi	r31, 0x02	; 2
    20e0:	6f 0e       	add	r6, r31
    20e2:	71 1c       	adc	r7, r1
    20e4:	f8 01       	movw	r30, r16
    20e6:	a0 80       	ld	r10, Z
    20e8:	b1 80       	ldd	r11, Z+1	; 0x01
    20ea:	26 ff       	sbrs	r18, 6
    20ec:	03 c0       	rjmp	.+6      	; 0x20f4 <vfprintf+0x15a>
    20ee:	65 2d       	mov	r22, r5
    20f0:	70 e0       	ldi	r23, 0x00	; 0
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <vfprintf+0x15e>
    20f4:	6f ef       	ldi	r22, 0xFF	; 255
    20f6:	7f ef       	ldi	r23, 0xFF	; 255
    20f8:	c5 01       	movw	r24, r10
    20fa:	2c 87       	std	Y+12, r18	; 0x0c
    20fc:	0e 94 9f 11 	call	0x233e	; 0x233e <strnlen_P>
    2100:	2c 01       	movw	r4, r24
    2102:	2c 85       	ldd	r18, Y+12	; 0x0c
    2104:	20 68       	ori	r18, 0x80	; 128
    2106:	22 2e       	mov	r2, r18
    2108:	83 01       	movw	r16, r6
    210a:	23 fc       	sbrc	r2, 3
    210c:	1b c0       	rjmp	.+54     	; 0x2144 <vfprintf+0x1aa>
    210e:	83 2d       	mov	r24, r3
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	48 16       	cp	r4, r24
    2114:	59 06       	cpc	r5, r25
    2116:	b0 f4       	brcc	.+44     	; 0x2144 <vfprintf+0x1aa>
    2118:	b7 01       	movw	r22, r14
    211a:	80 e2       	ldi	r24, 0x20	; 32
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    2122:	3a 94       	dec	r3
    2124:	f4 cf       	rjmp	.-24     	; 0x210e <vfprintf+0x174>
    2126:	f5 01       	movw	r30, r10
    2128:	27 fc       	sbrc	r2, 7
    212a:	85 91       	lpm	r24, Z+
    212c:	27 fe       	sbrs	r2, 7
    212e:	81 91       	ld	r24, Z+
    2130:	5f 01       	movw	r10, r30
    2132:	b7 01       	movw	r22, r14
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    213a:	31 10       	cpse	r3, r1
    213c:	3a 94       	dec	r3
    213e:	f1 e0       	ldi	r31, 0x01	; 1
    2140:	4f 1a       	sub	r4, r31
    2142:	51 08       	sbc	r5, r1
    2144:	41 14       	cp	r4, r1
    2146:	51 04       	cpc	r5, r1
    2148:	71 f7       	brne	.-36     	; 0x2126 <vfprintf+0x18c>
    214a:	e5 c0       	rjmp	.+458    	; 0x2316 <vfprintf+0x37c>
    214c:	84 36       	cpi	r24, 0x64	; 100
    214e:	11 f0       	breq	.+4      	; 0x2154 <vfprintf+0x1ba>
    2150:	89 36       	cpi	r24, 0x69	; 105
    2152:	39 f5       	brne	.+78     	; 0x21a2 <vfprintf+0x208>
    2154:	f8 01       	movw	r30, r16
    2156:	27 ff       	sbrs	r18, 7
    2158:	07 c0       	rjmp	.+14     	; 0x2168 <vfprintf+0x1ce>
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	0c 5f       	subi	r16, 0xFC	; 252
    2164:	1f 4f       	sbci	r17, 0xFF	; 255
    2166:	08 c0       	rjmp	.+16     	; 0x2178 <vfprintf+0x1de>
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	07 2e       	mov	r0, r23
    216e:	00 0c       	add	r0, r0
    2170:	88 0b       	sbc	r24, r24
    2172:	99 0b       	sbc	r25, r25
    2174:	0e 5f       	subi	r16, 0xFE	; 254
    2176:	1f 4f       	sbci	r17, 0xFF	; 255
    2178:	2f 76       	andi	r18, 0x6F	; 111
    217a:	72 2e       	mov	r7, r18
    217c:	97 ff       	sbrs	r25, 7
    217e:	09 c0       	rjmp	.+18     	; 0x2192 <vfprintf+0x1f8>
    2180:	90 95       	com	r25
    2182:	80 95       	com	r24
    2184:	70 95       	com	r23
    2186:	61 95       	neg	r22
    2188:	7f 4f       	sbci	r23, 0xFF	; 255
    218a:	8f 4f       	sbci	r24, 0xFF	; 255
    218c:	9f 4f       	sbci	r25, 0xFF	; 255
    218e:	20 68       	ori	r18, 0x80	; 128
    2190:	72 2e       	mov	r7, r18
    2192:	2a e0       	ldi	r18, 0x0A	; 10
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	a4 01       	movw	r20, r8
    2198:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__ultoa_invert>
    219c:	a8 2e       	mov	r10, r24
    219e:	a8 18       	sub	r10, r8
    21a0:	44 c0       	rjmp	.+136    	; 0x222a <vfprintf+0x290>
    21a2:	85 37       	cpi	r24, 0x75	; 117
    21a4:	29 f4       	brne	.+10     	; 0x21b0 <vfprintf+0x216>
    21a6:	2f 7e       	andi	r18, 0xEF	; 239
    21a8:	b2 2e       	mov	r11, r18
    21aa:	2a e0       	ldi	r18, 0x0A	; 10
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	25 c0       	rjmp	.+74     	; 0x21fa <vfprintf+0x260>
    21b0:	f2 2f       	mov	r31, r18
    21b2:	f9 7f       	andi	r31, 0xF9	; 249
    21b4:	bf 2e       	mov	r11, r31
    21b6:	8f 36       	cpi	r24, 0x6F	; 111
    21b8:	c1 f0       	breq	.+48     	; 0x21ea <vfprintf+0x250>
    21ba:	18 f4       	brcc	.+6      	; 0x21c2 <vfprintf+0x228>
    21bc:	88 35       	cpi	r24, 0x58	; 88
    21be:	79 f0       	breq	.+30     	; 0x21de <vfprintf+0x244>
    21c0:	b4 c0       	rjmp	.+360    	; 0x232a <vfprintf+0x390>
    21c2:	80 37       	cpi	r24, 0x70	; 112
    21c4:	19 f0       	breq	.+6      	; 0x21cc <vfprintf+0x232>
    21c6:	88 37       	cpi	r24, 0x78	; 120
    21c8:	21 f0       	breq	.+8      	; 0x21d2 <vfprintf+0x238>
    21ca:	af c0       	rjmp	.+350    	; 0x232a <vfprintf+0x390>
    21cc:	2f 2f       	mov	r18, r31
    21ce:	20 61       	ori	r18, 0x10	; 16
    21d0:	b2 2e       	mov	r11, r18
    21d2:	b4 fe       	sbrs	r11, 4
    21d4:	0d c0       	rjmp	.+26     	; 0x21f0 <vfprintf+0x256>
    21d6:	8b 2d       	mov	r24, r11
    21d8:	84 60       	ori	r24, 0x04	; 4
    21da:	b8 2e       	mov	r11, r24
    21dc:	09 c0       	rjmp	.+18     	; 0x21f0 <vfprintf+0x256>
    21de:	24 ff       	sbrs	r18, 4
    21e0:	0a c0       	rjmp	.+20     	; 0x21f6 <vfprintf+0x25c>
    21e2:	9f 2f       	mov	r25, r31
    21e4:	96 60       	ori	r25, 0x06	; 6
    21e6:	b9 2e       	mov	r11, r25
    21e8:	06 c0       	rjmp	.+12     	; 0x21f6 <vfprintf+0x25c>
    21ea:	28 e0       	ldi	r18, 0x08	; 8
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	05 c0       	rjmp	.+10     	; 0x21fa <vfprintf+0x260>
    21f0:	20 e1       	ldi	r18, 0x10	; 16
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <vfprintf+0x260>
    21f6:	20 e1       	ldi	r18, 0x10	; 16
    21f8:	32 e0       	ldi	r19, 0x02	; 2
    21fa:	f8 01       	movw	r30, r16
    21fc:	b7 fe       	sbrs	r11, 7
    21fe:	07 c0       	rjmp	.+14     	; 0x220e <vfprintf+0x274>
    2200:	60 81       	ld	r22, Z
    2202:	71 81       	ldd	r23, Z+1	; 0x01
    2204:	82 81       	ldd	r24, Z+2	; 0x02
    2206:	93 81       	ldd	r25, Z+3	; 0x03
    2208:	0c 5f       	subi	r16, 0xFC	; 252
    220a:	1f 4f       	sbci	r17, 0xFF	; 255
    220c:	06 c0       	rjmp	.+12     	; 0x221a <vfprintf+0x280>
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 5f       	subi	r16, 0xFE	; 254
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	a4 01       	movw	r20, r8
    221c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <__ultoa_invert>
    2220:	a8 2e       	mov	r10, r24
    2222:	a8 18       	sub	r10, r8
    2224:	fb 2d       	mov	r31, r11
    2226:	ff 77       	andi	r31, 0x7F	; 127
    2228:	7f 2e       	mov	r7, r31
    222a:	76 fe       	sbrs	r7, 6
    222c:	0b c0       	rjmp	.+22     	; 0x2244 <vfprintf+0x2aa>
    222e:	37 2d       	mov	r19, r7
    2230:	3e 7f       	andi	r19, 0xFE	; 254
    2232:	a5 14       	cp	r10, r5
    2234:	50 f4       	brcc	.+20     	; 0x224a <vfprintf+0x2b0>
    2236:	74 fe       	sbrs	r7, 4
    2238:	0a c0       	rjmp	.+20     	; 0x224e <vfprintf+0x2b4>
    223a:	72 fc       	sbrc	r7, 2
    223c:	08 c0       	rjmp	.+16     	; 0x224e <vfprintf+0x2b4>
    223e:	37 2d       	mov	r19, r7
    2240:	3e 7e       	andi	r19, 0xEE	; 238
    2242:	05 c0       	rjmp	.+10     	; 0x224e <vfprintf+0x2b4>
    2244:	ba 2c       	mov	r11, r10
    2246:	37 2d       	mov	r19, r7
    2248:	03 c0       	rjmp	.+6      	; 0x2250 <vfprintf+0x2b6>
    224a:	ba 2c       	mov	r11, r10
    224c:	01 c0       	rjmp	.+2      	; 0x2250 <vfprintf+0x2b6>
    224e:	b5 2c       	mov	r11, r5
    2250:	34 ff       	sbrs	r19, 4
    2252:	0d c0       	rjmp	.+26     	; 0x226e <vfprintf+0x2d4>
    2254:	fe 01       	movw	r30, r28
    2256:	ea 0d       	add	r30, r10
    2258:	f1 1d       	adc	r31, r1
    225a:	80 81       	ld	r24, Z
    225c:	80 33       	cpi	r24, 0x30	; 48
    225e:	11 f4       	brne	.+4      	; 0x2264 <vfprintf+0x2ca>
    2260:	39 7e       	andi	r19, 0xE9	; 233
    2262:	09 c0       	rjmp	.+18     	; 0x2276 <vfprintf+0x2dc>
    2264:	32 ff       	sbrs	r19, 2
    2266:	06 c0       	rjmp	.+12     	; 0x2274 <vfprintf+0x2da>
    2268:	b3 94       	inc	r11
    226a:	b3 94       	inc	r11
    226c:	04 c0       	rjmp	.+8      	; 0x2276 <vfprintf+0x2dc>
    226e:	83 2f       	mov	r24, r19
    2270:	86 78       	andi	r24, 0x86	; 134
    2272:	09 f0       	breq	.+2      	; 0x2276 <vfprintf+0x2dc>
    2274:	b3 94       	inc	r11
    2276:	33 fd       	sbrc	r19, 3
    2278:	13 c0       	rjmp	.+38     	; 0x22a0 <vfprintf+0x306>
    227a:	30 ff       	sbrs	r19, 0
    227c:	06 c0       	rjmp	.+12     	; 0x228a <vfprintf+0x2f0>
    227e:	5a 2c       	mov	r5, r10
    2280:	b3 14       	cp	r11, r3
    2282:	18 f4       	brcc	.+6      	; 0x228a <vfprintf+0x2f0>
    2284:	53 0c       	add	r5, r3
    2286:	5b 18       	sub	r5, r11
    2288:	b3 2c       	mov	r11, r3
    228a:	b3 14       	cp	r11, r3
    228c:	68 f4       	brcc	.+26     	; 0x22a8 <vfprintf+0x30e>
    228e:	b7 01       	movw	r22, r14
    2290:	80 e2       	ldi	r24, 0x20	; 32
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	3c 87       	std	Y+12, r19	; 0x0c
    2296:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    229a:	b3 94       	inc	r11
    229c:	3c 85       	ldd	r19, Y+12	; 0x0c
    229e:	f5 cf       	rjmp	.-22     	; 0x228a <vfprintf+0x2f0>
    22a0:	b3 14       	cp	r11, r3
    22a2:	10 f4       	brcc	.+4      	; 0x22a8 <vfprintf+0x30e>
    22a4:	3b 18       	sub	r3, r11
    22a6:	01 c0       	rjmp	.+2      	; 0x22aa <vfprintf+0x310>
    22a8:	31 2c       	mov	r3, r1
    22aa:	34 ff       	sbrs	r19, 4
    22ac:	12 c0       	rjmp	.+36     	; 0x22d2 <vfprintf+0x338>
    22ae:	b7 01       	movw	r22, r14
    22b0:	80 e3       	ldi	r24, 0x30	; 48
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	3c 87       	std	Y+12, r19	; 0x0c
    22b6:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    22ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    22bc:	32 ff       	sbrs	r19, 2
    22be:	17 c0       	rjmp	.+46     	; 0x22ee <vfprintf+0x354>
    22c0:	31 fd       	sbrc	r19, 1
    22c2:	03 c0       	rjmp	.+6      	; 0x22ca <vfprintf+0x330>
    22c4:	88 e7       	ldi	r24, 0x78	; 120
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <vfprintf+0x334>
    22ca:	88 e5       	ldi	r24, 0x58	; 88
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	b7 01       	movw	r22, r14
    22d0:	0c c0       	rjmp	.+24     	; 0x22ea <vfprintf+0x350>
    22d2:	83 2f       	mov	r24, r19
    22d4:	86 78       	andi	r24, 0x86	; 134
    22d6:	59 f0       	breq	.+22     	; 0x22ee <vfprintf+0x354>
    22d8:	31 ff       	sbrs	r19, 1
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <vfprintf+0x346>
    22dc:	8b e2       	ldi	r24, 0x2B	; 43
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <vfprintf+0x348>
    22e0:	80 e2       	ldi	r24, 0x20	; 32
    22e2:	37 fd       	sbrc	r19, 7
    22e4:	8d e2       	ldi	r24, 0x2D	; 45
    22e6:	b7 01       	movw	r22, r14
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    22ee:	a5 14       	cp	r10, r5
    22f0:	38 f4       	brcc	.+14     	; 0x2300 <vfprintf+0x366>
    22f2:	b7 01       	movw	r22, r14
    22f4:	80 e3       	ldi	r24, 0x30	; 48
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    22fc:	5a 94       	dec	r5
    22fe:	f7 cf       	rjmp	.-18     	; 0x22ee <vfprintf+0x354>
    2300:	aa 94       	dec	r10
    2302:	f4 01       	movw	r30, r8
    2304:	ea 0d       	add	r30, r10
    2306:	f1 1d       	adc	r31, r1
    2308:	80 81       	ld	r24, Z
    230a:	b7 01       	movw	r22, r14
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    2312:	a1 10       	cpse	r10, r1
    2314:	f5 cf       	rjmp	.-22     	; 0x2300 <vfprintf+0x366>
    2316:	33 20       	and	r3, r3
    2318:	09 f4       	brne	.+2      	; 0x231c <vfprintf+0x382>
    231a:	51 ce       	rjmp	.-862    	; 0x1fbe <vfprintf+0x24>
    231c:	b7 01       	movw	r22, r14
    231e:	80 e2       	ldi	r24, 0x20	; 32
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 c5 11 	call	0x238a	; 0x238a <fputc>
    2326:	3a 94       	dec	r3
    2328:	f6 cf       	rjmp	.-20     	; 0x2316 <vfprintf+0x37c>
    232a:	f7 01       	movw	r30, r14
    232c:	86 81       	ldd	r24, Z+6	; 0x06
    232e:	97 81       	ldd	r25, Z+7	; 0x07
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <vfprintf+0x39c>
    2332:	8f ef       	ldi	r24, 0xFF	; 255
    2334:	9f ef       	ldi	r25, 0xFF	; 255
    2336:	2c 96       	adiw	r28, 0x0c	; 12
    2338:	e2 e1       	ldi	r30, 0x12	; 18
    233a:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <__epilogue_restores__>

0000233e <strnlen_P>:
    233e:	fc 01       	movw	r30, r24
    2340:	05 90       	lpm	r0, Z+
    2342:	61 50       	subi	r22, 0x01	; 1
    2344:	70 40       	sbci	r23, 0x00	; 0
    2346:	01 10       	cpse	r0, r1
    2348:	d8 f7       	brcc	.-10     	; 0x2340 <strnlen_P+0x2>
    234a:	80 95       	com	r24
    234c:	90 95       	com	r25
    234e:	8e 0f       	add	r24, r30
    2350:	9f 1f       	adc	r25, r31
    2352:	08 95       	ret

00002354 <strnlen>:
    2354:	fc 01       	movw	r30, r24
    2356:	61 50       	subi	r22, 0x01	; 1
    2358:	70 40       	sbci	r23, 0x00	; 0
    235a:	01 90       	ld	r0, Z+
    235c:	01 10       	cpse	r0, r1
    235e:	d8 f7       	brcc	.-10     	; 0x2356 <strnlen+0x2>
    2360:	80 95       	com	r24
    2362:	90 95       	com	r25
    2364:	8e 0f       	add	r24, r30
    2366:	9f 1f       	adc	r25, r31
    2368:	08 95       	ret

0000236a <strrev>:
    236a:	dc 01       	movw	r26, r24
    236c:	fc 01       	movw	r30, r24
    236e:	67 2f       	mov	r22, r23
    2370:	71 91       	ld	r23, Z+
    2372:	77 23       	and	r23, r23
    2374:	e1 f7       	brne	.-8      	; 0x236e <strrev+0x4>
    2376:	32 97       	sbiw	r30, 0x02	; 2
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <strrev+0x18>
    237a:	7c 91       	ld	r23, X
    237c:	6d 93       	st	X+, r22
    237e:	70 83       	st	Z, r23
    2380:	62 91       	ld	r22, -Z
    2382:	ae 17       	cp	r26, r30
    2384:	bf 07       	cpc	r27, r31
    2386:	c8 f3       	brcs	.-14     	; 0x237a <strrev+0x10>
    2388:	08 95       	ret

0000238a <fputc>:
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	fb 01       	movw	r30, r22
    2394:	23 81       	ldd	r18, Z+3	; 0x03
    2396:	21 fd       	sbrc	r18, 1
    2398:	03 c0       	rjmp	.+6      	; 0x23a0 <fputc+0x16>
    239a:	8f ef       	ldi	r24, 0xFF	; 255
    239c:	9f ef       	ldi	r25, 0xFF	; 255
    239e:	28 c0       	rjmp	.+80     	; 0x23f0 <fputc+0x66>
    23a0:	22 ff       	sbrs	r18, 2
    23a2:	16 c0       	rjmp	.+44     	; 0x23d0 <fputc+0x46>
    23a4:	46 81       	ldd	r20, Z+6	; 0x06
    23a6:	57 81       	ldd	r21, Z+7	; 0x07
    23a8:	24 81       	ldd	r18, Z+4	; 0x04
    23aa:	35 81       	ldd	r19, Z+5	; 0x05
    23ac:	42 17       	cp	r20, r18
    23ae:	53 07       	cpc	r21, r19
    23b0:	44 f4       	brge	.+16     	; 0x23c2 <fputc+0x38>
    23b2:	a0 81       	ld	r26, Z
    23b4:	b1 81       	ldd	r27, Z+1	; 0x01
    23b6:	9d 01       	movw	r18, r26
    23b8:	2f 5f       	subi	r18, 0xFF	; 255
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	31 83       	std	Z+1, r19	; 0x01
    23be:	20 83       	st	Z, r18
    23c0:	8c 93       	st	X, r24
    23c2:	26 81       	ldd	r18, Z+6	; 0x06
    23c4:	37 81       	ldd	r19, Z+7	; 0x07
    23c6:	2f 5f       	subi	r18, 0xFF	; 255
    23c8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ca:	37 83       	std	Z+7, r19	; 0x07
    23cc:	26 83       	std	Z+6, r18	; 0x06
    23ce:	10 c0       	rjmp	.+32     	; 0x23f0 <fputc+0x66>
    23d0:	eb 01       	movw	r28, r22
    23d2:	09 2f       	mov	r16, r25
    23d4:	18 2f       	mov	r17, r24
    23d6:	00 84       	ldd	r0, Z+8	; 0x08
    23d8:	f1 85       	ldd	r31, Z+9	; 0x09
    23da:	e0 2d       	mov	r30, r0
    23dc:	09 95       	icall
    23de:	89 2b       	or	r24, r25
    23e0:	e1 f6       	brne	.-72     	; 0x239a <fputc+0x10>
    23e2:	8e 81       	ldd	r24, Y+6	; 0x06
    23e4:	9f 81       	ldd	r25, Y+7	; 0x07
    23e6:	01 96       	adiw	r24, 0x01	; 1
    23e8:	9f 83       	std	Y+7, r25	; 0x07
    23ea:	8e 83       	std	Y+6, r24	; 0x06
    23ec:	81 2f       	mov	r24, r17
    23ee:	90 2f       	mov	r25, r16
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	08 95       	ret

000023fa <__ultoa_invert>:
    23fa:	fa 01       	movw	r30, r20
    23fc:	aa 27       	eor	r26, r26
    23fe:	28 30       	cpi	r18, 0x08	; 8
    2400:	51 f1       	breq	.+84     	; 0x2456 <__ultoa_invert+0x5c>
    2402:	20 31       	cpi	r18, 0x10	; 16
    2404:	81 f1       	breq	.+96     	; 0x2466 <__ultoa_invert+0x6c>
    2406:	e8 94       	clt
    2408:	6f 93       	push	r22
    240a:	6e 7f       	andi	r22, 0xFE	; 254
    240c:	6e 5f       	subi	r22, 0xFE	; 254
    240e:	7f 4f       	sbci	r23, 0xFF	; 255
    2410:	8f 4f       	sbci	r24, 0xFF	; 255
    2412:	9f 4f       	sbci	r25, 0xFF	; 255
    2414:	af 4f       	sbci	r26, 0xFF	; 255
    2416:	b1 e0       	ldi	r27, 0x01	; 1
    2418:	3e d0       	rcall	.+124    	; 0x2496 <__ultoa_invert+0x9c>
    241a:	b4 e0       	ldi	r27, 0x04	; 4
    241c:	3c d0       	rcall	.+120    	; 0x2496 <__ultoa_invert+0x9c>
    241e:	67 0f       	add	r22, r23
    2420:	78 1f       	adc	r23, r24
    2422:	89 1f       	adc	r24, r25
    2424:	9a 1f       	adc	r25, r26
    2426:	a1 1d       	adc	r26, r1
    2428:	68 0f       	add	r22, r24
    242a:	79 1f       	adc	r23, r25
    242c:	8a 1f       	adc	r24, r26
    242e:	91 1d       	adc	r25, r1
    2430:	a1 1d       	adc	r26, r1
    2432:	6a 0f       	add	r22, r26
    2434:	71 1d       	adc	r23, r1
    2436:	81 1d       	adc	r24, r1
    2438:	91 1d       	adc	r25, r1
    243a:	a1 1d       	adc	r26, r1
    243c:	20 d0       	rcall	.+64     	; 0x247e <__ultoa_invert+0x84>
    243e:	09 f4       	brne	.+2      	; 0x2442 <__ultoa_invert+0x48>
    2440:	68 94       	set
    2442:	3f 91       	pop	r19
    2444:	2a e0       	ldi	r18, 0x0A	; 10
    2446:	26 9f       	mul	r18, r22
    2448:	11 24       	eor	r1, r1
    244a:	30 19       	sub	r19, r0
    244c:	30 5d       	subi	r19, 0xD0	; 208
    244e:	31 93       	st	Z+, r19
    2450:	de f6       	brtc	.-74     	; 0x2408 <__ultoa_invert+0xe>
    2452:	cf 01       	movw	r24, r30
    2454:	08 95       	ret
    2456:	46 2f       	mov	r20, r22
    2458:	47 70       	andi	r20, 0x07	; 7
    245a:	40 5d       	subi	r20, 0xD0	; 208
    245c:	41 93       	st	Z+, r20
    245e:	b3 e0       	ldi	r27, 0x03	; 3
    2460:	0f d0       	rcall	.+30     	; 0x2480 <__ultoa_invert+0x86>
    2462:	c9 f7       	brne	.-14     	; 0x2456 <__ultoa_invert+0x5c>
    2464:	f6 cf       	rjmp	.-20     	; 0x2452 <__ultoa_invert+0x58>
    2466:	46 2f       	mov	r20, r22
    2468:	4f 70       	andi	r20, 0x0F	; 15
    246a:	40 5d       	subi	r20, 0xD0	; 208
    246c:	4a 33       	cpi	r20, 0x3A	; 58
    246e:	18 f0       	brcs	.+6      	; 0x2476 <__ultoa_invert+0x7c>
    2470:	49 5d       	subi	r20, 0xD9	; 217
    2472:	31 fd       	sbrc	r19, 1
    2474:	40 52       	subi	r20, 0x20	; 32
    2476:	41 93       	st	Z+, r20
    2478:	02 d0       	rcall	.+4      	; 0x247e <__ultoa_invert+0x84>
    247a:	a9 f7       	brne	.-22     	; 0x2466 <__ultoa_invert+0x6c>
    247c:	ea cf       	rjmp	.-44     	; 0x2452 <__ultoa_invert+0x58>
    247e:	b4 e0       	ldi	r27, 0x04	; 4
    2480:	a6 95       	lsr	r26
    2482:	97 95       	ror	r25
    2484:	87 95       	ror	r24
    2486:	77 95       	ror	r23
    2488:	67 95       	ror	r22
    248a:	ba 95       	dec	r27
    248c:	c9 f7       	brne	.-14     	; 0x2480 <__ultoa_invert+0x86>
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	61 05       	cpc	r22, r1
    2492:	71 05       	cpc	r23, r1
    2494:	08 95       	ret
    2496:	9b 01       	movw	r18, r22
    2498:	ac 01       	movw	r20, r24
    249a:	0a 2e       	mov	r0, r26
    249c:	06 94       	lsr	r0
    249e:	57 95       	ror	r21
    24a0:	47 95       	ror	r20
    24a2:	37 95       	ror	r19
    24a4:	27 95       	ror	r18
    24a6:	ba 95       	dec	r27
    24a8:	c9 f7       	brne	.-14     	; 0x249c <__ultoa_invert+0xa2>
    24aa:	62 0f       	add	r22, r18
    24ac:	73 1f       	adc	r23, r19
    24ae:	84 1f       	adc	r24, r20
    24b0:	95 1f       	adc	r25, r21
    24b2:	a0 1d       	adc	r26, r0
    24b4:	08 95       	ret

000024b6 <__prologue_saves__>:
    24b6:	2f 92       	push	r2
    24b8:	3f 92       	push	r3
    24ba:	4f 92       	push	r4
    24bc:	5f 92       	push	r5
    24be:	6f 92       	push	r6
    24c0:	7f 92       	push	r7
    24c2:	8f 92       	push	r8
    24c4:	9f 92       	push	r9
    24c6:	af 92       	push	r10
    24c8:	bf 92       	push	r11
    24ca:	cf 92       	push	r12
    24cc:	df 92       	push	r13
    24ce:	ef 92       	push	r14
    24d0:	ff 92       	push	r15
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	ca 1b       	sub	r28, r26
    24e0:	db 0b       	sbc	r29, r27
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	09 94       	ijmp

000024ee <__epilogue_restores__>:
    24ee:	2a 88       	ldd	r2, Y+18	; 0x12
    24f0:	39 88       	ldd	r3, Y+17	; 0x11
    24f2:	48 88       	ldd	r4, Y+16	; 0x10
    24f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    24fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    24fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2500:	b9 84       	ldd	r11, Y+9	; 0x09
    2502:	c8 84       	ldd	r12, Y+8	; 0x08
    2504:	df 80       	ldd	r13, Y+7	; 0x07
    2506:	ee 80       	ldd	r14, Y+6	; 0x06
    2508:	fd 80       	ldd	r15, Y+5	; 0x05
    250a:	0c 81       	ldd	r16, Y+4	; 0x04
    250c:	1b 81       	ldd	r17, Y+3	; 0x03
    250e:	aa 81       	ldd	r26, Y+2	; 0x02
    2510:	b9 81       	ldd	r27, Y+1	; 0x01
    2512:	ce 0f       	add	r28, r30
    2514:	d1 1d       	adc	r29, r1
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	0f be       	out	0x3f, r0	; 63
    251e:	cd bf       	out	0x3d, r28	; 61
    2520:	ed 01       	movw	r28, r26
    2522:	08 95       	ret

00002524 <_exit>:
    2524:	f8 94       	cli

00002526 <__stop_program>:
    2526:	ff cf       	rjmp	.-2      	; 0x2526 <__stop_program>
