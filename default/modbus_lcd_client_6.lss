
modbus_lcd_client_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00002e7a  00002f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bd  00800128  00800128  00002f36  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e2d  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013bf  00000000  00000000  00006ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017cf  00000000  00000000  00008288  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000850  00000000  00000000  00009a58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb7  00000000  00000000  0000a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ce0  00000000  00000000  0000ae5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000db3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__ctors_end>
       4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
       8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
       c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      14:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      40:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <__vector_16>
      44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      48:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_18>
      4c:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__vector_19>
      50:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_20>
      54:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      68:	3d 01       	movw	r6, r26
      6a:	44 01       	movw	r8, r8
      6c:	60 01       	movw	r12, r0
      6e:	4e 01       	movw	r8, r28
      70:	55 01       	movw	r10, r10
      72:	60 01       	movw	r12, r0
      74:	69 01       	movw	r12, r18
      76:	69 01       	movw	r12, r18
      78:	69 01       	movw	r12, r18
      7a:	69 01       	movw	r12, r18
      7c:	69 01       	movw	r12, r18
      7e:	69 01       	movw	r12, r18
      80:	69 01       	movw	r12, r18
      82:	69 01       	movw	r12, r18
      84:	55 01       	movw	r10, r10
      86:	60 01       	movw	r12, r0
      88:	07 63       	ori	r16, 0x37	; 55
      8a:	42 36       	cpi	r20, 0x62	; 98
      8c:	b7 9b       	sbis	0x16, 7	; 22
      8e:	d8 a7       	std	Y+40, r29	; 0x28
      90:	1a 39       	cpi	r17, 0x9A	; 154
      92:	68 56       	subi	r22, 0x68	; 104
      94:	18 ae       	std	Y+56, r1	; 0x38
      96:	ba ab       	std	Y+50, r27	; 0x32
      98:	55 8c       	ldd	r5, Z+29	; 0x1d
      9a:	1d 3c       	cpi	r17, 0xCD	; 205
      9c:	b7 cc       	rjmp	.-1682   	; 0xfffffa0c <__eeprom_end+0xff7efa0c>
      9e:	57 63       	ori	r21, 0x37	; 55
      a0:	bd 6d       	ori	r27, 0xDD	; 221
      a2:	ed fd       	.word	0xfded	; ????
      a4:	75 3e       	cpi	r23, 0xE5	; 229
      a6:	f6 17       	cp	r31, r22
      a8:	72 31       	cpi	r23, 0x12	; 18
      aa:	bf 00       	.word	0x00bf	; ????
      ac:	00 00       	nop
      ae:	80 3f       	cpi	r24, 0xF0	; 240
      b0:	08 00       	.word	0x0008	; ????
      b2:	00 00       	nop
      b4:	be 92       	st	-X, r11
      b6:	24 49       	sbci	r18, 0x94	; 148
      b8:	12 3e       	cpi	r17, 0xE2	; 226
      ba:	ab aa       	std	Y+51, r10	; 0x33
      bc:	aa 2a       	or	r10, r26
      be:	be cd       	rjmp	.-1156   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
      c0:	cc cc       	rjmp	.-1640   	; 0xfffffa5a <__eeprom_end+0xff7efa5a>
      c2:	4c 3e       	cpi	r20, 0xEC	; 236
      c4:	00 00       	nop
      c6:	00 80       	ld	r0, Z
      c8:	be ab       	std	Y+54, r27	; 0x36
      ca:	aa aa       	std	Y+50, r10	; 0x32
      cc:	aa 3e       	cpi	r26, 0xEA	; 234
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	bf 00       	.word	0x00bf	; ????
      d4:	00 00       	nop
      d6:	80 3f       	cpi	r24, 0xF0	; 240
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	00 08       	sbc	r0, r0
      de:	41 78       	andi	r20, 0x81	; 129
      e0:	d3 bb       	out	0x13, r29	; 19
      e2:	43 87       	std	Z+11, r20	; 0x0b
      e4:	d1 13       	cpse	r29, r17
      e6:	3d 19       	sub	r19, r13
      e8:	0e 3c       	cpi	r16, 0xCE	; 206
      ea:	c3 bd       	out	0x23, r28	; 35
      ec:	42 82       	std	Z+2, r4	; 0x02
      ee:	ad 2b       	or	r26, r29
      f0:	3e 68       	ori	r19, 0x8E	; 142
      f2:	ec 82       	std	Y+4, r14	; 0x04
      f4:	76 be       	out	0x36, r7	; 54
      f6:	d9 8f       	std	Y+25, r29	; 0x19
      f8:	e1 a9       	ldd	r30, Z+49	; 0x31
      fa:	3e 4c       	sbci	r19, 0xCE	; 206
      fc:	80 ef       	ldi	r24, 0xF0	; 240
      fe:	ff be       	out	0x3f, r15	; 63
     100:	01 c4       	rjmp	.+2050   	; 0x904 <__stack+0x5>
     102:	ff 7f       	andi	r31, 0xFF	; 255
     104:	3f 00       	.word	0x003f	; ????
     106:	00 00       	nop
	...

0000010a <__trampolines_end>:
     10a:	68 50       	subi	r22, 0x08	; 8
     10c:	61 00       	.word	0x0061	; ????

0000010e <__c.2581>:
     10e:	53 36 3a 00                                         S6:.

00000112 <__c.2579>:
     112:	53 35 3a 00                                         S5:.

00000116 <__c.2577>:
     116:	53 34 3a 00                                         S4:.

0000011a <__c.2575>:
     11a:	53 33 3a 00                                         S3:.

0000011e <__c.2573>:
     11e:	53 32 3a 00                                         S2:.

00000122 <__c.2571>:
     122:	53 31 3a 00                                         S1:.

00000126 <__c.2563>:
     126:	2d 2d 2d 2d 00                                      ----.

0000012b <__c.2561>:
     12b:	4b 34 3a 00                                         K4:.

0000012f <__c.2559>:
     12f:	2d 2d 2d 2d 00                                      ----.

00000134 <__c.2557>:
     134:	4b 33 3a 00                                         K3:.

00000138 <__c.2555>:
     138:	2d 2d 2d 2d 00                                      ----.

0000013d <__c.2553>:
     13d:	4b 32 3a 00                                         K2:.

00000141 <__c.2551>:
     141:	2d 2d 2d 2d 00                                      ----.

00000146 <__c.2549>:
     146:	4b 31 3a 00                                         K1:.

0000014a <__c.2547>:
     14a:	2d 2d 2d 2d 00                                      ----.

0000014f <__c.2545>:
     14f:	4f 4b 00                                            OK.

00000152 <__c.2543>:
     152:	53 36 3a 00                                         S6:.

00000156 <__c.2541>:
     156:	2d 2d 2d 2d 00                                      ----.

0000015b <__c.2539>:
     15b:	4f 4b 00                                            OK.

0000015e <__c.2537>:
     15e:	53 35 3a 00                                         S5:.

00000162 <__c.2535>:
     162:	2d 2d 2d 2d 00                                      ----.

00000167 <__c.2533>:
     167:	4f 4b 00                                            OK.

0000016a <__c.2531>:
     16a:	53 34 3a 00                                         S4:.

0000016e <__c.2529>:
     16e:	2d 2d 2d 2d 00                                      ----.

00000173 <__c.2527>:
     173:	4f 4b 00                                            OK.

00000176 <__c.2525>:
     176:	53 33 3a 00                                         S3:.

0000017a <__c.2523>:
     17a:	2d 2d 2d 2d 00                                      ----.

0000017f <__c.2521>:
     17f:	4f 4b 00                                            OK.

00000182 <__c.2519>:
     182:	53 32 3a 00                                         S2:.

00000186 <__c.2517>:
     186:	2d 2d 2d 2d 00                                      ----.

0000018b <__c.2515>:
     18b:	4f 4b 00                                            OK.

0000018e <__c.2513>:
     18e:	53 31 3a 00                                         S1:.

00000192 <__c.2511>:
     192:	44 53 31 38 62 32 30 00                             DS18b20.

0000019a <__c.2509>:
     19a:	6b 6f 6e 74 72 6f 6c 61 20 73 6e 69 6d 61 63 6f     kontrola snimaco
     1aa:	76 00                                               v.

000001ac <__c.2507>:
     1ac:	20 6d 6f 64 62 75 73 20 74 65 6d 70 20 30 2e 31      modbus temp 0.1
	...

000001bd <userChar>:
     1bd:	18 18 06 09 08 08 09 06 07 08 13 14 14 13 08 07     ................
     1cd:	00 10 08 08 08 08 10 00 00                          .........

000001d6 <__ctors_end>:
     1d6:	11 24       	eor	r1, r1
     1d8:	1f be       	out	0x3f, r1	; 63
     1da:	cf ef       	ldi	r28, 0xFF	; 255
     1dc:	d8 e0       	ldi	r29, 0x08	; 8
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	cd bf       	out	0x3d, r28	; 61

000001e2 <__do_copy_data>:
     1e2:	11 e0       	ldi	r17, 0x01	; 1
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	ea e7       	ldi	r30, 0x7A	; 122
     1ea:	fe e2       	ldi	r31, 0x2E	; 46
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__do_copy_data+0x10>
     1ee:	05 90       	lpm	r0, Z+
     1f0:	0d 92       	st	X+, r0
     1f2:	a8 32       	cpi	r26, 0x28	; 40
     1f4:	b1 07       	cpc	r27, r17
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <__do_copy_data+0xc>

000001f8 <__do_clear_bss>:
     1f8:	22 e0       	ldi	r18, 0x02	; 2
     1fa:	a8 e2       	ldi	r26, 0x28	; 40
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <.do_clear_bss_start>

00000200 <.do_clear_bss_loop>:
     200:	1d 92       	st	X+, r1

00000202 <.do_clear_bss_start>:
     202:	a5 3e       	cpi	r26, 0xE5	; 229
     204:	b2 07       	cpc	r27, r18
     206:	e1 f7       	brne	.-8      	; 0x200 <.do_clear_bss_loop>
     208:	0e 94 b4 0b 	call	0x1768	; 0x1768 <main>
     20c:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <_exit>

00000210 <__bad_interrupt>:
     210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <timer0100us_start>:
volatile uint8_t outstate = 0;
volatile uint16_t inputRegisters[4];
volatile uint16_t holdingRegisters[8]= {40,41,42,43,44,45,47,48};

void timer0100us_start(void) {
	TCCR0B|=(1<<CS01); //prescaler 8
     214:	85 b5       	in	r24, 0x25	; 37
     216:	82 60       	ori	r24, 0x02	; 2
     218:	85 bd       	out	0x25, r24	; 37
	TIMSK0|=(1<<TOIE0);
     21a:	ee e6       	ldi	r30, 0x6E	; 110
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	81 60       	ori	r24, 0x01	; 1
     222:	80 83       	st	Z, r24
     224:	08 95       	ret

00000226 <SetOuts>:

/*
*   Modify the following 3 functions to implement your own pin configurations...
*/
// output bits
void SetOuts(volatile uint8_t in) {
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	1f 92       	push	r1
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	89 83       	std	Y+1, r24	; 0x01
	//PORTD|= (((in & (1<<3))<<4) | ((in & (1<<4))<<1) | ((in & (1<<5))<<1));
	//PORTB|= (((in & (1<<0))<<2) | ((in & (1<<1))) | ((in & (1<<2))>>2));
	in=~in;
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	80 95       	com	r24
     236:	89 83       	std	Y+1, r24	; 0x01
	//PORTB&= ~(((in & (1<<0))<<2) | ((in & (1<<1))) | ((in & (1<<2))>>2));
	//PORTD&= ~(((in & (1<<3))<<4) | ((in & (1<<4))<<1) | ((in & (1<<5))<<1));
}
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <ReadIns>:
uint8_t ReadIns(void) {
	uint8_t ins=0x00;
	//ins|=(PINC&((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)));
	//ins|=(((PIND&(1<<4))<<2)|((PIND&(1<<3))<<4));
	return ins;
}
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	08 95       	ret

00000244 <io_conf>:
void io_conf(void) { 
	/*
	 Outputs: PB2,PB1,PB0,PD5,PD6,PD7
	 Inputs: PC0, PC1, PC2, PC3, PC4, PC6, PD4, PD3
	*/
	DDRD=0x00;
     244:	1a b8       	out	0x0a, r1	; 10
	//DDRB=0x00;
	//DDRC=0x00;
	PORTD=0x00;
     246:	1b b8       	out	0x0b, r1	; 11
	//PORTB=0x00;
	//PORTC=0x00;
	PORTD|=(1<<0);
     248:	58 9a       	sbi	0x0b, 0	; 11
	//DDRD |= (1<<2)|(1<<5)|(1<<6)|(1<<7);
	DDRD |= (1<<2);
     24a:	52 9a       	sbi	0x0a, 2	; 10
     24c:	08 95       	ret

0000024e <modbusGet>:
}




void modbusGet(void) {
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	1f 92       	push	r1
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
	if (modbusGetBusState() & (1<<ReceiveCompleted))
     258:	0e 94 60 08 	call	0x10c0	; 0x10c0 <modbusGetBusState>
     25c:	83 ff       	sbrs	r24, 3
     25e:	3c c0       	rjmp	.+120    	; 0x2d8 <modbusGet+0x8a>
	{
		switch(rxbuffer[1]) {
     260:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <rxbuffer+0x1>
     264:	8e 2f       	mov	r24, r30
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	fc 01       	movw	r30, r24
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	e0 31       	cpi	r30, 0x10	; 16
     26e:	f1 05       	cpc	r31, r1
     270:	80 f5       	brcc	.+96     	; 0x2d2 <modbusGet+0x84>
     272:	ec 5c       	subi	r30, 0xCC	; 204
     274:	ff 4f       	sbci	r31, 0xFF	; 255
     276:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <__tablejump2__>
			case fcReadCoilStatus: {
				modbusExchangeBits(&outstate,0,8);
     27a:	48 e0       	ldi	r20, 0x08	; 8
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	88 e2       	ldi	r24, 0x28	; 40
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	07 c0       	rjmp	.+14     	; 0x296 <modbusGet+0x48>
			}
			break;
			
			case fcReadInputStatus: {
				volatile uint8_t inps = ReadIns();
     288:	19 82       	std	Y+1, r1	; 0x01
				modbusExchangeBits(&inps,0,8);
     28a:	48 e0       	ldi	r20, 0x08	; 8
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	70 e0       	ldi	r23, 0x00	; 0
     292:	ce 01       	movw	r24, r28
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	0e 94 04 0b 	call	0x1608	; 0x1608 <modbusExchangeBits>
     29a:	1e c0       	rjmp	.+60     	; 0x2d8 <modbusGet+0x8a>
				modbusExchangeRegisters(holdingRegisters,0,8);
			}
			break;
			
			case fcReadInputRegisters: {
				modbusExchangeRegisters(inputRegisters,0,4);
     29c:	44 e0       	ldi	r20, 0x04	; 4
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	86 eb       	ldi	r24, 0xB6	; 182
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	11 c0       	rjmp	.+34     	; 0x2cc <modbusGet+0x7e>
				modbusExchangeRegisters(holdingRegisters,0,8);
			}
			break;
			
			case fcForceMultipleCoils: {
				modbusExchangeBits(&outstate,0,8);
     2aa:	48 e0       	ldi	r20, 0x08	; 8
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	88 e2       	ldi	r24, 0x28	; 40
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 04 0b 	call	0x1608	; 0x1608 <modbusExchangeBits>
				SetOuts(outstate);
     2ba:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
     2be:	0c c0       	rjmp	.+24     	; 0x2d8 <modbusGet+0x8a>
			}
			break;
			
			case fcPresetMultipleRegisters: {
				modbusExchangeRegisters(holdingRegisters,0,8);
     2c0:	48 e0       	ldi	r20, 0x08	; 8
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	60 e0       	ldi	r22, 0x00	; 0
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <modbusExchangeRegisters>
     2d0:	03 c0       	rjmp	.+6      	; 0x2d8 <modbusGet+0x8a>
			}
			break;
			
			default: {
				modbusSendException(ecIllegalFunction);
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	0e 94 41 0a 	call	0x1482	; 0x1482 <modbusSendException>
			}
			break;
		}
	}
}
     2d8:	0f 90       	pop	r0
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
     2de:	08 95       	ret

000002e0 <__vector_16>:
}


/// INTERRUPT ///

ISR(TIMER0_OVF_vect) { //this ISR is called 9765.625 times per second, CPU-20MHz
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	2f 93       	push	r18
     2ec:	3f 93       	push	r19
     2ee:	4f 93       	push	r20
     2f0:	5f 93       	push	r21
     2f2:	6f 93       	push	r22
     2f4:	7f 93       	push	r23
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
     2fe:	ef 93       	push	r30
     300:	ff 93       	push	r31
	modbusTickTimer();
     302:	0e 94 ef 08 	call	0x11de	; 0x11de <modbusTickTimer>
}
     306:	ff 91       	pop	r31
     308:	ef 91       	pop	r30
     30a:	bf 91       	pop	r27
     30c:	af 91       	pop	r26
     30e:	9f 91       	pop	r25
     310:	8f 91       	pop	r24
     312:	7f 91       	pop	r23
     314:	6f 91       	pop	r22
     316:	5f 91       	pop	r21
     318:	4f 91       	pop	r20
     31a:	3f 91       	pop	r19
     31c:	2f 91       	pop	r18
     31e:	0f 90       	pop	r0
     320:	0f be       	out	0x3f, r0	; 63
     322:	0f 90       	pop	r0
     324:	1f 90       	pop	r1
     326:	18 95       	reti

00000328 <toggle_e>:

#if LCD_IO_MODE
	/* toggle Enable Pin to initiate write */
	static void toggle_e( void)
	{
		lcd_e_high();
     328:	5f 9a       	sbi	0x0b, 7	; 11
		lcd_e_delay();
     32a:	00 c0       	rjmp	.+0      	; 0x32c <toggle_e+0x4>
		lcd_e_low();
     32c:	5f 98       	cbi	0x0b, 7	; 11
     32e:	08 95       	ret

00000330 <lcd_write>:
				 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
	static void lcd_write( uint8_t data, uint8_t rs) 
	{
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	1f 92       	push	r1
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
		unsigned char dataBits ;


		if( rs)	/* write data		( RS=1, RW=0) */
     33c:	66 23       	and	r22, r22
     33e:	11 f0       	breq	.+4      	; 0x344 <lcd_write+0x14>
		{
			lcd_rs_high();
     340:	2c 9a       	sbi	0x05, 4	; 5
     342:	01 c0       	rjmp	.+2      	; 0x346 <lcd_write+0x16>
		}
		else	/* write instruction ( RS=0, RW=0) */
		{
			lcd_rs_low();
     344:	2c 98       	cbi	0x05, 4	; 5
		}
		lcd_rw_low();
     346:	2d 98       	cbi	0x05, 5	; 5

		if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
				&& (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
		{
			/* configure data pins as output */
			DDR( LCD_DATA0_PORT) |= 0x0F;
     348:	94 b1       	in	r25, 0x04	; 4
     34a:	9f 60       	ori	r25, 0x0F	; 15
     34c:	94 b9       	out	0x04, r25	; 4

			/* output high nibble first */
			dataBits = LCD_DATA0_PORT & 0xF0;
     34e:	95 b1       	in	r25, 0x05	; 5
     350:	19 2f       	mov	r17, r25
     352:	10 7f       	andi	r17, 0xF0	; 240
			LCD_DATA0_PORT = dataBits | ((data>>4) & 0x0F);
     354:	98 2f       	mov	r25, r24
     356:	92 95       	swap	r25
     358:	9f 70       	andi	r25, 0x0F	; 15
     35a:	91 2b       	or	r25, r17
     35c:	95 b9       	out	0x05, r25	; 5
			lcd_e_toggle();
     35e:	89 83       	std	Y+1, r24	; 0x01
     360:	0e 94 94 01 	call	0x328	; 0x328 <toggle_e>

			/* output low nibble */
			LCD_DATA0_PORT = dataBits | (data & 0x0F);
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	8f 70       	andi	r24, 0x0F	; 15
     368:	81 2b       	or	r24, r17
     36a:	85 b9       	out	0x05, r24	; 5
			lcd_e_toggle();
     36c:	0e 94 94 01 	call	0x328	; 0x328 <toggle_e>

			/* all data pins high ( inactive) */
			LCD_DATA0_PORT = dataBits | 0x0F;
     370:	1f 60       	ori	r17, 0x0F	; 15
     372:	15 b9       	out	0x05, r17	; 5
			LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);
			LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);
			LCD_DATA2_PORT |= _BV( LCD_DATA2_PIN);
			LCD_DATA3_PORT |= _BV( LCD_DATA3_PIN);
		}
	}
     374:	0f 90       	pop	r0
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	08 95       	ret

0000037e <lcd_read.constprop.0>:
	
	
	if( rs)
		lcd_rs_high();						/* RS=1: read data	  */
	else
		lcd_rs_low();						/* RS=0: read busy flag */
     37e:	2c 98       	cbi	0x05, 4	; 5
	lcd_rw_high();							/* RW=1  read mode	  */
     380:	2d 9a       	sbi	0x05, 5	; 5
	
	if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
	  && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
     382:	84 b1       	in	r24, 0x04	; 4
     384:	80 7f       	andi	r24, 0xF0	; 240
     386:	84 b9       	out	0x04, r24	; 4
		
		lcd_e_high();
     388:	5f 9a       	sbi	0x0b, 7	; 11
		lcd_e_delay();		
     38a:	00 c0       	rjmp	.+0      	; 0x38c <lcd_read.constprop.0+0xe>
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     38c:	93 b1       	in	r25, 0x03	; 3
		lcd_e_low();
     38e:	5f 98       	cbi	0x0b, 7	; 11
		
		lcd_e_delay();						/* Enable 500ns low		*/
     390:	00 c0       	rjmp	.+0      	; 0x392 <lcd_read.constprop.0+0x14>
		
		lcd_e_high();
     392:	5f 9a       	sbi	0x0b, 7	; 11
		lcd_e_delay();
     394:	00 c0       	rjmp	.+0      	; 0x396 <lcd_read.constprop.0+0x18>
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
     396:	23 b1       	in	r18, 0x03	; 3
     398:	2f 70       	andi	r18, 0x0F	; 15
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
		
		lcd_e_high();
		lcd_e_delay();		
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     39a:	89 2f       	mov	r24, r25
     39c:	82 95       	swap	r24
     39e:	80 7f       	andi	r24, 0xF0	; 240
		lcd_e_delay();						/* Enable 500ns low		*/
		
		lcd_e_high();
		lcd_e_delay();
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
		lcd_e_low();
     3a0:	5f 98       	cbi	0x0b, 7	; 11
		if( PIN( LCD_DATA2_PORT) & _BV( LCD_DATA2_PIN)) data |= 0x04;
		if( PIN( LCD_DATA3_PORT) & _BV( LCD_DATA3_PIN)) data |= 0x08;		
		lcd_e_low();
	}
	return data;
}
     3a2:	82 2b       	or	r24, r18
     3a4:	08 95       	ret

000003a6 <lcd_waitbusy>:

{
	register uint8_t c;
	
	/* wait until busy flag is cleared */
	while ( (c = lcd_read( 0)) & (1 << LCD_BUSY)) {}
     3a6:	0e 94 bf 01 	call	0x37e	; 0x37e <lcd_read.constprop.0>
     3aa:	87 fd       	sbrc	r24, 7
     3ac:	fc cf       	rjmp	.-8      	; 0x3a6 <lcd_waitbusy>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     3ae:	88 e0       	ldi	r24, 0x08	; 8
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd_waitbusy+0xc>
	
	/* the address counter is updated 4us after the busy flag is cleared */
	delay( 2);

	/* now read the address counter */
	return ( lcd_read( 0));  // return address counter
     3b6:	0c 94 bf 01 	jmp	0x37e	; 0x37e <lcd_read.constprop.0>

000003ba <lcd_command>:
Send LCD controller instruction command
Input:	instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
     3ba:	cf 93       	push	r28
     3bc:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     3be:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_waitbusy>
	lcd_write( cmd, 0);
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	8c 2f       	mov	r24, r28
}
     3c6:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
	lcd_waitbusy();
	lcd_write( cmd, 0);
     3c8:	0c 94 98 01 	jmp	0x330	; 0x330 <lcd_write>

000003cc <lcd_data>:
Send data byte to LCD controller 
Input:	data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
     3cc:	cf 93       	push	r28
     3ce:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     3d0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_waitbusy>
	lcd_write( data, 1);
     3d4:	61 e0       	ldi	r22, 0x01	; 1
     3d6:	8c 2f       	mov	r24, r28
}
     3d8:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
	lcd_waitbusy();
	lcd_write( data, 1);
     3da:	0c 94 98 01 	jmp	0x330	; 0x330 <lcd_write>

000003de <lcd_gotoxy>:
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
	else
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
#endif
#if LCD_LINES == 4
	if( y == 0)
     3de:	61 11       	cpse	r22, r1
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <lcd_gotoxy+0x8>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
     3e2:	80 58       	subi	r24, 0x80	; 128
     3e4:	09 c0       	rjmp	.+18     	; 0x3f8 <lcd_gotoxy+0x1a>
	else if( y == 1)
     3e6:	61 30       	cpi	r22, 0x01	; 1
     3e8:	11 f4       	brne	.+4      	; 0x3ee <lcd_gotoxy+0x10>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
     3ea:	80 54       	subi	r24, 0x40	; 64
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <lcd_gotoxy+0x1a>
	else if( y == 2)
     3ee:	62 30       	cpi	r22, 0x02	; 2
     3f0:	11 f4       	brne	.+4      	; 0x3f6 <lcd_gotoxy+0x18>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE3 + x);
     3f2:	8c 56       	subi	r24, 0x6C	; 108
     3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <lcd_gotoxy+0x1a>
	else /* y == 3 */
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE4 + x);
     3f6:	8c 52       	subi	r24, 0x2C	; 44
     3f8:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <lcd_command>

000003fc <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy( void)
{
	return lcd_waitbusy();
     3fc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_waitbusy>
}
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	08 95       	ret

00000404 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr( void)
{
	lcd_command(1 << LCD_CLR);
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <lcd_command>

0000040a <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home( void)
{
	lcd_command(1 << LCD_HOME);
     40a:	82 e0       	ldi	r24, 0x02	; 2
     40c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <lcd_command>

00000410 <lcd_putc>:
Display character at current cursor position 
Input:	character to be displayed										
Returns:  none
*************************************************************************/
void lcd_putc( char c)
{
     410:	cf 93       	push	r28
     412:	c8 2f       	mov	r28, r24
	uint8_t pos;


	pos = lcd_waitbusy();	// read busy-flag and address counter
     414:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_waitbusy>
     418:	98 2f       	mov	r25, r24
	if( c == '\n')
     41a:	ca 30       	cpi	r28, 0x0A	; 10
     41c:	a1 f4       	brne	.+40     	; 0x446 <lcd_putc+0x36>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
     41e:	84 31       	cpi	r24, 0x14	; 20
     420:	48 f0       	brcs	.+18     	; 0x434 <lcd_putc+0x24>
		addressCounter = LCD_START_LINE2;
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
     422:	80 ec       	ldi	r24, 0xC0	; 192
     424:	89 0f       	add	r24, r25
     426:	84 31       	cpi	r24, 0x14	; 20
     428:	38 f0       	brcs	.+14     	; 0x438 <lcd_putc+0x28>
		addressCounter = LCD_START_LINE3;
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
     42a:	94 51       	subi	r25, 0x14	; 20
     42c:	9c 32       	cpi	r25, 0x2C	; 44
     42e:	30 f0       	brcs	.+12     	; 0x43c <lcd_putc+0x2c>
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	05 c0       	rjmp	.+10     	; 0x43e <lcd_putc+0x2e>
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
		addressCounter = LCD_START_LINE2;
     434:	80 e4       	ldi	r24, 0x40	; 64
     436:	03 c0       	rjmp	.+6      	; 0x43e <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE3;
     438:	84 e1       	ldi	r24, 0x14	; 20
     43a:	01 c0       	rjmp	.+2      	; 0x43e <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
		addressCounter = LCD_START_LINE4;
     43c:	84 e5       	ldi	r24, 0x54	; 84
	else 
		addressCounter = LCD_START_LINE1;
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     43e:	80 58       	subi	r24, 0x80	; 128
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
	}

}/* lcd_putc */
     440:	cf 91       	pop	r28
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     442:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <lcd_command>
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     446:	61 e0       	ldi	r22, 0x01	; 1
     448:	8c 2f       	mov	r24, r28
	}

}/* lcd_putc */
     44a:	cf 91       	pop	r28
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     44c:	0c 94 98 01 	jmp	0x330	; 0x330 <lcd_write>

00000450 <lcd_puts>:
Input:	string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts( const char *s)
/* print string on lcd ( no auto linefeed) */
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	ec 01       	movw	r28, r24
	register char c;

	while ( (c = *s++))
     456:	89 91       	ld	r24, Y+
     458:	88 23       	and	r24, r24
     45a:	19 f0       	breq	.+6      	; 0x462 <lcd_puts+0x12>
	{
		lcd_putc( c);
     45c:	0e 94 08 02 	call	0x410	; 0x410 <lcd_putc>
     460:	fa cf       	rjmp	.-12     	; 0x456 <lcd_puts+0x6>
	}

}/* lcd_puts */
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <lcd_puts_p>:
Input:	 string from program memory be be displayed										
Returns:	none
*************************************************************************/
void lcd_puts_p( const char *progmem_s)
/* print string from program memory on lcd ( no auto linefeed) */
{
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	fc 01       	movw	r30, r24
	register char c;

	while ( ( c = pgm_read_byte( progmem_s++)))
     46e:	84 91       	lpm	r24, Z
     470:	ef 01       	movw	r28, r30
     472:	21 96       	adiw	r28, 0x01	; 1
     474:	88 23       	and	r24, r24
     476:	21 f0       	breq	.+8      	; 0x480 <lcd_puts_p+0x18>
	{
		lcd_putc( c);
     478:	0e 94 08 02 	call	0x410	; 0x410 <lcd_putc>
     47c:	fe 01       	movw	r30, r28
     47e:	f7 cf       	rjmp	.-18     	; 0x46e <lcd_puts_p+0x6>
	}

}/* lcd_puts_p */
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <lcd_puthex_nibble>:
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_nibble(const unsigned char b)
{
    unsigned char  c = b & 0x0f;
     486:	8f 70       	andi	r24, 0x0F	; 15
    if (c>9) c += 'A'-10;
     488:	8a 30       	cpi	r24, 0x0A	; 10
     48a:	10 f0       	brcs	.+4      	; 0x490 <lcd_puthex_nibble+0xa>
     48c:	89 5c       	subi	r24, 0xC9	; 201
     48e:	01 c0       	rjmp	.+2      	; 0x492 <lcd_puthex_nibble+0xc>
    else c += '0';
     490:	80 5d       	subi	r24, 0xD0	; 208
    lcd_putc(c);
     492:	0c 94 08 02 	jmp	0x410	; 0x410 <lcd_putc>

00000496 <lcd_puthex_byte>:
This functions was created by Martin Thomas <eversmith@heizung-thomas.de>
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
     496:	cf 93       	push	r28
     498:	c8 2f       	mov	r28, r24
    lcd_puthex_nibble(b>>4);
     49a:	82 95       	swap	r24
     49c:	8f 70       	andi	r24, 0x0F	; 15
     49e:	0e 94 43 02 	call	0x486	; 0x486 <lcd_puthex_nibble>
    lcd_puthex_nibble(b);
     4a2:	8c 2f       	mov	r24, r28
} /* lcd_puthex_byte */
     4a4:	cf 91       	pop	r28
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
    lcd_puthex_nibble(b>>4);
    lcd_puthex_nibble(b);
     4a6:	0c 94 43 02 	jmp	0x486	; 0x486 <lcd_puthex_nibble>

000004aa <lcd_init>:
					LCD_DISP_ON_CURSOR	  display on, cursor on
					LCD_DISP_CURSOR_BLINK	display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init( uint8_t dispAttr)
{
     4aa:	1f 93       	push	r17
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	18 2f       	mov	r17, r24
	}
	else if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
			&& (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
	{
		/* configure all port bits as output ( all LCD data lines on same port, but control lines on different ports) */
		DDR( LCD_DATA0_PORT) |= 0x0F;
     4b2:	94 b1       	in	r25, 0x04	; 4
     4b4:	9f 60       	ori	r25, 0x0F	; 15
     4b6:	94 b9       	out	0x04, r25	; 4
		DDR( LCD_RS_PORT) |= _BV( LCD_RS_PIN);
     4b8:	24 9a       	sbi	0x04, 4	; 4
		DDR( LCD_RW_PORT) |= _BV( LCD_RW_PIN);
     4ba:	25 9a       	sbi	0x04, 5	; 4
		DDR( LCD_E_PORT) |= _BV( LCD_E_PIN);
     4bc:	57 9a       	sbi	0x0a, 7	; 10
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     4be:	e0 e0       	ldi	r30, 0x00	; 0
     4c0:	fa ef       	ldi	r31, 0xFA	; 250
     4c2:	31 97       	sbiw	r30, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <lcd_init+0x18>
		DDR( LCD_DATA3_PORT) |= _BV( LCD_DATA3_PIN);
	}
	delay(16000);		/* wait 16ms or more after power-on		*/
	
	/* initial write to lcd is 8bit */
	LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);  // _BV( LCD_FUNCTION)>>4;
     4c6:	29 9a       	sbi	0x05, 1	; 5
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
     4c8:	28 9a       	sbi	0x05, 0	; 5
	lcd_e_toggle();
     4ca:	0e 94 94 01 	call	0x328	; 0x328 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     4ce:	e0 e0       	ldi	r30, 0x00	; 0
     4d0:	fe e4       	ldi	r31, 0x4E	; 78
     4d2:	31 97       	sbiw	r30, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <lcd_init+0x28>
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
	lcd_e_toggle();
	delay( 4992);		 /* delay, busy flag can't be checked here */
	
	/* repeat last command */ 
	lcd_e_toggle();	  
     4d6:	0e 94 94 01 	call	0x328	; 0x328 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     4da:	c0 e0       	ldi	r28, 0x00	; 0
     4dc:	d1 e0       	ldi	r29, 0x01	; 1
     4de:	fe 01       	movw	r30, r28
     4e0:	31 97       	sbiw	r30, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <lcd_init+0x36>
	/* repeat last command */ 
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */
	
	/* repeat last command a third time */
	lcd_e_toggle();	  
     4e4:	0e 94 94 01 	call	0x328	; 0x328 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     4e8:	fe 01       	movw	r30, r28
     4ea:	31 97       	sbiw	r30, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <lcd_init+0x40>
	/* repeat last command a third time */
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */

	/* now configure for 4bit mode */
	LCD_DATA0_PORT &= ~_BV( LCD_DATA0_PIN);	// LCD_FUNCTION_4BIT_1LINE>>4
     4ee:	28 98       	cbi	0x05, 0	; 5
	lcd_e_toggle();
     4f0:	0e 94 94 01 	call	0x328	; 0x328 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     4f4:	21 97       	sbiw	r28, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <lcd_init+0x4a>
	/* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command( KS0073_4LINES_MODE);
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
     4f8:	88 e2       	ldi	r24, 0x28	; 40
     4fa:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_command>
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
     4fe:	88 e0       	ldi	r24, 0x08	; 8
     500:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_command>
	lcd_clrscr();							/* display clear				*/ 
     504:	0e 94 02 02 	call	0x404	; 0x404 <lcd_clrscr>
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
     508:	86 e0       	ldi	r24, 0x06	; 6
     50a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_command>
	lcd_command( dispAttr);				  /* display/cursor control		*/
     50e:	81 2f       	mov	r24, r17

}/* lcd_init */
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	1f 91       	pop	r17
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
	lcd_clrscr();							/* display clear				*/ 
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
	lcd_command( dispAttr);				  /* display/cursor control		*/
     516:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <lcd_command>

0000051a <ds18b20_reset>:
{
	uint8_t i=0,j=0; // i- presence pulse, j- bus release

	
	//low for 480us
	*Port &= ~(1<<Pin); // pin low
     51a:	dc 01       	movw	r26, r24
     51c:	4c 91       	ld	r20, X
     51e:	21 e0       	ldi	r18, 0x01	; 1
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	06 2e       	mov	r0, r22
     524:	01 c0       	rjmp	.+2      	; 0x528 <ds18b20_reset+0xe>
     526:	22 0f       	add	r18, r18
     528:	0a 94       	dec	r0
     52a:	ea f7       	brpl	.-6      	; 0x526 <ds18b20_reset+0xc>
     52c:	52 2f       	mov	r21, r18
     52e:	50 95       	com	r21
     530:	35 2f       	mov	r19, r21
     532:	34 23       	and	r19, r20
     534:	3c 93       	st	X, r19
	*(Port-1)|=(1<<Pin);  //pin as output
     536:	fc 01       	movw	r30, r24
     538:	32 91       	ld	r19, -Z
     53a:	23 2b       	or	r18, r19
     53c:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     53e:	af ec       	ldi	r26, 0xCF	; 207
     540:	b7 e0       	ldi	r27, 0x07	; 7
     542:	11 97       	sbiw	r26, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <ds18b20_reset+0x28>
     546:	00 c0       	rjmp	.+0      	; 0x548 <ds18b20_reset+0x2e>
     548:	00 00       	nop
	_delay_us(500); //480

	//release line and wait for 60uS
	*(Port-1) &= ~(1<<Pin); //pin as input without pullup
     54a:	20 81       	ld	r18, Z
     54c:	25 23       	and	r18, r21
     54e:	20 83       	st	Z, r18
     550:	ef ee       	ldi	r30, 0xEF	; 239
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <ds18b20_reset+0x3a>
     558:	00 c0       	rjmp	.+0      	; 0x55a <ds18b20_reset+0x40>
     55a:	00 00       	nop
	_delay_us(60); //60

	//get value and wait 420us
	
	if((*(Port-2))&(1<<Pin)) {i = 0;} else {i = 1;}
     55c:	fc 01       	movw	r30, r24
     55e:	32 97       	sbiw	r30, 0x02	; 2
     560:	20 81       	ld	r18, Z
     562:	82 2f       	mov	r24, r18
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	06 2e       	mov	r0, r22
     568:	02 c0       	rjmp	.+4      	; 0x56e <ds18b20_reset+0x54>
     56a:	95 95       	asr	r25
     56c:	87 95       	ror	r24
     56e:	0a 94       	dec	r0
     570:	e2 f7       	brpl	.-8      	; 0x56a <ds18b20_reset+0x50>
     572:	81 70       	andi	r24, 0x01	; 1
     574:	99 27       	eor	r25, r25
     576:	9c 01       	movw	r18, r24
     578:	41 e0       	ldi	r20, 0x01	; 1
     57a:	24 27       	eor	r18, r20
     57c:	87 ee       	ldi	r24, 0xE7	; 231
     57e:	93 e0       	ldi	r25, 0x03	; 3
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <ds18b20_reset+0x66>
     584:	00 c0       	rjmp	.+0      	; 0x586 <ds18b20_reset+0x6c>
     586:	00 00       	nop
	_delay_us(250); //device after 15-60us pull down line for 60-240us
	if((*(Port-2))&(1<<Pin)) {j = 1;} else {j = 0;}
     588:	80 81       	ld	r24, Z
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	02 c0       	rjmp	.+4      	; 0x592 <ds18b20_reset+0x78>
     58e:	95 95       	asr	r25
     590:	87 95       	ror	r24
     592:	6a 95       	dec	r22
     594:	e2 f7       	brpl	.-8      	; 0x58e <ds18b20_reset+0x74>
	//return presence bit(0-no device,1-device OK)

	return (i & j);
     596:	82 23       	and	r24, r18
     598:	93 23       	and	r25, r19
}
     59a:	81 70       	andi	r24, 0x01	; 1
     59c:	08 95       	ret

0000059e <ds18b20_writebit>:

/*
 * write one bit
 */
void ds18b20_writebit(volatile unsigned char *Port, unsigned char Pin, uint8_t bit)
{
     59e:	fc 01       	movw	r30, r24
	//low for 1uS
	*Port &= ~ (1<<Pin);
     5a0:	20 81       	ld	r18, Z
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	01 c0       	rjmp	.+2      	; 0x5aa <ds18b20_writebit+0xc>
     5a8:	88 0f       	add	r24, r24
     5aa:	6a 95       	dec	r22
     5ac:	ea f7       	brpl	.-6      	; 0x5a8 <ds18b20_writebit+0xa>
     5ae:	98 2f       	mov	r25, r24
     5b0:	90 95       	com	r25
     5b2:	29 23       	and	r18, r25
     5b4:	20 83       	st	Z, r18
	 //output
	*(Port-1)|=(1<<Pin);
     5b6:	22 91       	ld	r18, -Z
     5b8:	82 2b       	or	r24, r18
     5ba:	80 83       	st	Z, r24
     5bc:	85 e0       	ldi	r24, 0x05	; 5
     5be:	8a 95       	dec	r24
     5c0:	f1 f7       	brne	.-4      	; 0x5be <ds18b20_writebit+0x20>
     5c2:	00 00       	nop
	_delay_us(1);	//1uS
	//if we want to write 1, release the line (if not will keep low)
	if(bit)
     5c4:	44 23       	and	r20, r20
     5c6:	19 f0       	breq	.+6      	; 0x5ce <ds18b20_writebit+0x30>
		*(Port-1) &= ~ (1<<Pin);  //input
     5c8:	80 81       	ld	r24, Z
     5ca:	89 23       	and	r24, r25
     5cc:	80 83       	st	Z, r24
     5ce:	af ee       	ldi	r26, 0xEF	; 239
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	11 97       	sbiw	r26, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <ds18b20_writebit+0x34>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <ds18b20_writebit+0x3a>
     5d8:	00 00       	nop
	//wait 60uS and release the line
	_delay_us(60);	//60
	*(Port-1) &= ~ (1<<Pin); //input
     5da:	80 81       	ld	r24, Z
     5dc:	89 23       	and	r24, r25
     5de:	80 83       	st	Z, r24
     5e0:	08 95       	ret

000005e2 <ds18b20_readbit>:
{
	uint8_t bit=0;

	//low for 1uS
	//low
	*Port &= ~(1<<Pin);
     5e2:	fc 01       	movw	r30, r24
     5e4:	40 81       	ld	r20, Z
     5e6:	21 e0       	ldi	r18, 0x01	; 1
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	06 2e       	mov	r0, r22
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <ds18b20_readbit+0xe>
     5ee:	22 0f       	add	r18, r18
     5f0:	0a 94       	dec	r0
     5f2:	ea f7       	brpl	.-6      	; 0x5ee <ds18b20_readbit+0xc>
     5f4:	52 2f       	mov	r21, r18
     5f6:	50 95       	com	r21
     5f8:	35 2f       	mov	r19, r21
     5fa:	34 23       	and	r19, r20
     5fc:	30 83       	st	Z, r19
	 //output
	*(Port-1) |= (1<<Pin);
     5fe:	32 91       	ld	r19, -Z
     600:	23 2b       	or	r18, r19
     602:	20 83       	st	Z, r18
     604:	25 e0       	ldi	r18, 0x05	; 5
     606:	2a 95       	dec	r18
     608:	f1 f7       	brne	.-4      	; 0x606 <ds18b20_readbit+0x24>
     60a:	00 00       	nop
	_delay_us(1);	//1

	//release line and wait for 14uS
	//input
	*(Port-1) &= ~(1<<Pin);
     60c:	20 81       	ld	r18, Z
     60e:	25 23       	and	r18, r21
     610:	20 83       	st	Z, r18
     612:	ea e4       	ldi	r30, 0x4A	; 74
     614:	ea 95       	dec	r30
     616:	f1 f7       	brne	.-4      	; 0x614 <ds18b20_readbit+0x32>
     618:	00 c0       	rjmp	.+0      	; 0x61a <ds18b20_readbit+0x38>
	_delay_us(14);	//10

	//read the value
	if( (*(Port-2)) & (1<<Pin) )
     61a:	fc 01       	movw	r30, r24
     61c:	32 97       	sbiw	r30, 0x02	; 2
     61e:	80 81       	ld	r24, Z
     620:	e3 ed       	ldi	r30, 0xD3	; 211
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <ds18b20_readbit+0x42>
     628:	00 c0       	rjmp	.+0      	; 0x62a <ds18b20_readbit+0x48>
     62a:	00 00       	nop
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	02 c0       	rjmp	.+4      	; 0x634 <ds18b20_readbit+0x52>
     630:	95 95       	asr	r25
     632:	87 95       	ror	r24
     634:	6a 95       	dec	r22
     636:	e2 f7       	brpl	.-8      	; 0x630 <ds18b20_readbit+0x4e>
		bit=1;

	//wait 45uS and return read value
	_delay_us(53);	//53
	return bit;
}
     638:	81 70       	andi	r24, 0x01	; 1
     63a:	08 95       	ret

0000063c <ds18b20_writebyte>:

/*
 * write one byte
 */
void ds18b20_writebyte(volatile unsigned char *Port, unsigned char Pin, uint8_t byte)
{
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	8c 01       	movw	r16, r24
     648:	f6 2e       	mov	r15, r22
     64a:	d4 2f       	mov	r29, r20
	uint8_t i=8;
	while(i--){
     64c:	c9 e0       	ldi	r28, 0x09	; 9
     64e:	c1 50       	subi	r28, 0x01	; 1
     650:	41 f0       	breq	.+16     	; 0x662 <ds18b20_writebyte+0x26>
		ds18b20_writebit(Port, Pin, byte&1);
     652:	4d 2f       	mov	r20, r29
     654:	41 70       	andi	r20, 0x01	; 1
     656:	6f 2d       	mov	r22, r15
     658:	c8 01       	movw	r24, r16
     65a:	0e 94 cf 02 	call	0x59e	; 0x59e <ds18b20_writebit>
		byte >>= 1;
     65e:	d6 95       	lsr	r29
     660:	f6 cf       	rjmp	.-20     	; 0x64e <ds18b20_writebyte+0x12>
	}
}
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	08 95       	ret

0000066e <ds18b20_readbyte>:

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(volatile unsigned char *Port, unsigned char Pin)
{
     66e:	ff 92       	push	r15
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	8c 01       	movw	r16, r24
     67a:	f6 2e       	mov	r15, r22
	uint8_t i=8, n=0;
	while(i--){
     67c:	d9 e0       	ldi	r29, 0x09	; 9
/*
 * read one byte
 */
uint8_t ds18b20_readbyte(volatile unsigned char *Port, unsigned char Pin)
{
	uint8_t i=8, n=0;
     67e:	c0 e0       	ldi	r28, 0x00	; 0
     680:	d1 50       	subi	r29, 0x01	; 1
	while(i--){
     682:	59 f0       	breq	.+22     	; 0x69a <ds18b20_readbyte+0x2c>
		n >>= 1;
		n |= (ds18b20_readbit(Port, Pin)<<7);
     684:	6f 2d       	mov	r22, r15
     686:	c8 01       	movw	r24, r16
     688:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <ds18b20_readbit>
     68c:	20 e8       	ldi	r18, 0x80	; 128
     68e:	82 9f       	mul	r24, r18
     690:	c0 01       	movw	r24, r0
     692:	11 24       	eor	r1, r1
 */
uint8_t ds18b20_readbyte(volatile unsigned char *Port, unsigned char Pin)
{
	uint8_t i=8, n=0;
	while(i--){
		n >>= 1;
     694:	c6 95       	lsr	r28
		n |= (ds18b20_readbit(Port, Pin)<<7);
     696:	c8 2b       	or	r28, r24
     698:	f3 cf       	rjmp	.-26     	; 0x680 <ds18b20_readbyte+0x12>
	}
	return n;
}
     69a:	8c 2f       	mov	r24, r28
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	08 95       	ret

000006a8 <read_ROM_CODE>:
/*
	* read ROM code from sensor, and print it on LCD on actual position
*/

void read_ROM_CODE(volatile unsigned char *Port, unsigned char Pin)
{
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	0f 93       	push	r16
     6b0:	1f 93       	push	r17
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	28 97       	sbiw	r28, 0x08	; 8
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	7c 01       	movw	r14, r24
     6c8:	d6 2e       	mov	r13, r22
	volatile unsigned char ROM_code[8];
	unsigned i,j;
	cli(); // disable interrupts
     6ca:	f8 94       	cli
	ds18b20_reset(Port, Pin); //reset OW bus
     6cc:	0e 94 8d 02 	call	0x51a	; 0x51a <ds18b20_reset>
	}
	//return(ROM_code);
	*/


	ds18b20_writebyte(Port, Pin, DS18B20_CMD_READROM); //read ROM
     6d0:	43 e3       	ldi	r20, 0x33	; 51
     6d2:	6d 2d       	mov	r22, r13
     6d4:	c7 01       	movw	r24, r14
     6d6:	0e 94 1e 03 	call	0x63c	; 0x63c <ds18b20_writebyte>
	for(i=0;i<8;i++)
     6da:	00 e0       	ldi	r16, 0x00	; 0
     6dc:	10 e0       	ldi	r17, 0x00	; 0
	{
		ROM_code[i] = ds18b20_readbyte(Port, Pin);
     6de:	6d 2d       	mov	r22, r13
     6e0:	c7 01       	movw	r24, r14
     6e2:	0e 94 37 03 	call	0x66e	; 0x66e <ds18b20_readbyte>
     6e6:	e1 e0       	ldi	r30, 0x01	; 1
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	ec 0f       	add	r30, r28
     6ec:	fd 1f       	adc	r31, r29
     6ee:	e0 0f       	add	r30, r16
     6f0:	f1 1f       	adc	r31, r17
     6f2:	80 83       	st	Z, r24
	//return(ROM_code);
	*/


	ds18b20_writebyte(Port, Pin, DS18B20_CMD_READROM); //read ROM
	for(i=0;i<8;i++)
     6f4:	0f 5f       	subi	r16, 0xFF	; 255
     6f6:	1f 4f       	sbci	r17, 0xFF	; 255
     6f8:	08 30       	cpi	r16, 0x08	; 8
     6fa:	11 05       	cpc	r17, r1
     6fc:	81 f7       	brne	.-32     	; 0x6de <read_ROM_CODE+0x36>
     6fe:	00 e0       	ldi	r16, 0x00	; 0
     700:	10 e0       	ldi	r17, 0x00	; 0
	}
	//sei(); // enable interrupts
	
	for(j=0;j<8;j++)
	{
		lcd_puthex_byte(ROM_code[j]);
     702:	e1 e0       	ldi	r30, 0x01	; 1
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	ec 0f       	add	r30, r28
     708:	fd 1f       	adc	r31, r29
     70a:	e0 0f       	add	r30, r16
     70c:	f1 1f       	adc	r31, r17
     70e:	80 81       	ld	r24, Z
     710:	0e 94 4b 02 	call	0x496	; 0x496 <lcd_puthex_byte>
	{
		ROM_code[i] = ds18b20_readbyte(Port, Pin);
	}
	//sei(); // enable interrupts
	
	for(j=0;j<8;j++)
     714:	0f 5f       	subi	r16, 0xFF	; 255
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	08 30       	cpi	r16, 0x08	; 8
     71a:	11 05       	cpc	r17, r1
     71c:	91 f7       	brne	.-28     	; 0x702 <read_ROM_CODE+0x5a>
	{
		lcd_puthex_byte(ROM_code[j]);
	}
}
     71e:	28 96       	adiw	r28, 0x08	; 8
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	08 95       	ret

0000073a <ds18b20_gettemp>:

/*
 * get temperature
 */
int16_t ds18b20_gettemp(volatile unsigned char *Port, unsigned char Pin)
{
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	ec 01       	movw	r28, r24
     744:	16 2f       	mov	r17, r22

	//#if DS18B20_STOPINTERRUPTONREAD == 1
	//cli(); //interrupt deny 
	//#endif

	ds18b20_reset(Port, Pin); //reset
     746:	0e 94 8d 02 	call	0x51a	; 0x51a <ds18b20_reset>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_SKIPROM); //skip ROM
     74a:	4c ec       	ldi	r20, 0xCC	; 204
     74c:	61 2f       	mov	r22, r17
     74e:	ce 01       	movw	r24, r28
     750:	0e 94 1e 03 	call	0x63c	; 0x63c <ds18b20_writebyte>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_CONVERTTEMP); //start temperature conversion
     754:	44 e4       	ldi	r20, 0x44	; 68
     756:	61 2f       	mov	r22, r17
     758:	ce 01       	movw	r24, r28
     75a:	0e 94 1e 03 	call	0x63c	; 0x63c <ds18b20_writebyte>

	while(!ds18b20_readbit(Port, Pin)); //wait until conversion is complete
     75e:	61 2f       	mov	r22, r17
     760:	ce 01       	movw	r24, r28
     762:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <ds18b20_readbit>
     766:	88 23       	and	r24, r24
     768:	d1 f3       	breq	.-12     	; 0x75e <ds18b20_gettemp+0x24>

	ds18b20_reset(Port, Pin); //reset
     76a:	61 2f       	mov	r22, r17
     76c:	ce 01       	movw	r24, r28
     76e:	0e 94 8d 02 	call	0x51a	; 0x51a <ds18b20_reset>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_SKIPROM); //skip ROM
     772:	4c ec       	ldi	r20, 0xCC	; 204
     774:	61 2f       	mov	r22, r17
     776:	ce 01       	movw	r24, r28
     778:	0e 94 1e 03 	call	0x63c	; 0x63c <ds18b20_writebyte>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_RSCRATCHPAD); //read scratchpad
     77c:	4e eb       	ldi	r20, 0xBE	; 190
     77e:	61 2f       	mov	r22, r17
     780:	ce 01       	movw	r24, r28
     782:	0e 94 1e 03 	call	0x63c	; 0x63c <ds18b20_writebyte>

	//read 2 byte from scratchpad
	temperature_l = ds18b20_readbyte(Port, Pin);
     786:	61 2f       	mov	r22, r17
     788:	ce 01       	movw	r24, r28
     78a:	0e 94 37 03 	call	0x66e	; 0x66e <ds18b20_readbyte>
     78e:	08 2f       	mov	r16, r24
	temperature_h = ds18b20_readbyte(Port, Pin);
     790:	61 2f       	mov	r22, r17
     792:	ce 01       	movw	r24, r28
     794:	0e 94 37 03 	call	0x66e	; 0x66e <ds18b20_readbyte>
     798:	c8 2f       	mov	r28, r24
	sign = (temperature_h >> 4) & 0x0F;
     79a:	82 95       	swap	r24
     79c:	8f 70       	andi	r24, 0x0F	; 15

	//#if DS18B20_STOPINTERRUPTONREAD == 1
	//sei();  //interrupt allow
	//#endif
	
	if(sign == 0)
     79e:	09 f5       	brne	.+66     	; 0x7e2 <ds18b20_gettemp+0xa8>
  	{
	teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
     7a0:	20 e1       	ldi	r18, 0x10	; 16
     7a2:	c2 9f       	mul	r28, r18
     7a4:	c0 01       	movw	r24, r0
     7a6:	11 24       	eor	r1, r1
     7a8:	20 2f       	mov	r18, r16
     7aa:	22 95       	swap	r18
     7ac:	2f 70       	andi	r18, 0x0F	; 15
     7ae:	82 2b       	or	r24, r18
	desatiny = (temperature_l & 0x0F) * 0.625;
  	retd = 10 * teplota;  
     7b0:	2a e0       	ldi	r18, 0x0A	; 10
     7b2:	28 9f       	mul	r18, r24
     7b4:	e0 01       	movw	r28, r0
     7b6:	29 9f       	mul	r18, r25
     7b8:	d0 0d       	add	r29, r0
     7ba:	11 24       	eor	r1, r1
	//#endif
	
	if(sign == 0)
  	{
	teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
	desatiny = (temperature_l & 0x0F) * 0.625;
     7bc:	60 2f       	mov	r22, r16
     7be:	6f 70       	andi	r22, 0x0F	; 15
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 a4 11 	call	0x2348	; 0x2348 <__floatsisf>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e2       	ldi	r20, 0x20	; 32
     7d0:	5f e3       	ldi	r21, 0x3F	; 63
     7d2:	0e 94 30 12 	call	0x2460	; 0x2460 <__mulsf3>
     7d6:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__fixunssfsi>
  	retd = 10 * teplota;  
	retd = retd + desatiny;
     7da:	ce 01       	movw	r24, r28
     7dc:	86 0f       	add	r24, r22
     7de:	91 1d       	adc	r25, r1
     7e0:	26 c0       	rjmp	.+76     	; 0x82e <ds18b20_gettemp+0xf4>
	}
 else
    {
	temperature_l =~ temperature_l;
     7e2:	00 95       	com	r16
	temperature_h =~ temperature_h;
    teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
    desatiny = ((temperature_l + 1) & 0x0F) * 0.625;
     7e4:	60 2f       	mov	r22, r16
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	6f 5f       	subi	r22, 0xFF	; 255
     7ea:	7f 4f       	sbci	r23, 0xFF	; 255
     7ec:	6f 70       	andi	r22, 0x0F	; 15
     7ee:	77 27       	eor	r23, r23
     7f0:	07 2e       	mov	r0, r23
     7f2:	00 0c       	add	r0, r0
     7f4:	88 0b       	sbc	r24, r24
     7f6:	99 0b       	sbc	r25, r25
     7f8:	0e 94 a4 11 	call	0x2348	; 0x2348 <__floatsisf>
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 e2       	ldi	r20, 0x20	; 32
     802:	5f e3       	ldi	r21, 0x3F	; 63
     804:	0e 94 30 12 	call	0x2460	; 0x2460 <__mulsf3>
     808:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__fixunssfsi>
	retd = retd + desatiny;
	}
 else
    {
	temperature_l =~ temperature_l;
	temperature_h =~ temperature_h;
     80c:	c0 95       	com	r28
    teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
     80e:	20 e1       	ldi	r18, 0x10	; 16
     810:	c2 9f       	mul	r28, r18
     812:	c0 01       	movw	r24, r0
     814:	11 24       	eor	r1, r1
     816:	02 95       	swap	r16
     818:	0f 70       	andi	r16, 0x0F	; 15
     81a:	80 2b       	or	r24, r16
    desatiny = ((temperature_l + 1) & 0x0F) * 0.625;
    retd = (teplota*10+desatiny)*(-1);
     81c:	2a e0       	ldi	r18, 0x0A	; 10
     81e:	82 9f       	mul	r24, r18
     820:	c0 01       	movw	r24, r0
     822:	11 24       	eor	r1, r1
     824:	86 0f       	add	r24, r22
     826:	91 1d       	adc	r25, r1
     828:	91 95       	neg	r25
     82a:	81 95       	neg	r24
     82c:	91 09       	sbc	r25, r1
	}
	sei();
     82e:	78 94       	sei
//PORTB |= (1 << PB5); // set high
//_delay_ms(200);
//************************************************

	return retd; // output in decicelsius *10
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	08 95       	ret

0000083a <bmp085_writemem>:
#include BMP085_I2CFLEURYPATH

/*
 * i2c write
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	1f 92       	push	r1
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	18 2f       	mov	r17, r24
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     848:	8e ee       	ldi	r24, 0xEE	; 238
     84a:	69 83       	std	Y+1, r22	; 0x01
     84c:	0e 94 0a 08 	call	0x1014	; 0x1014 <i2c_start_wait>
	i2c_write(reg);
     850:	81 2f       	mov	r24, r17
     852:	0e 94 3b 08 	call	0x1076	; 0x1076 <i2c_write>
	i2c_write(value);
     856:	69 81       	ldd	r22, Y+1	; 0x01
     858:	86 2f       	mov	r24, r22
     85a:	0e 94 3b 08 	call	0x1076	; 0x1076 <i2c_write>
	i2c_stop();
}
     85e:	0f 90       	pop	r0
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_write(value);
	i2c_stop();
     866:	0c 94 33 08 	jmp	0x1066	; 0x1066 <i2c_stop>

0000086a <bmp085_readmem>:
}

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
     86a:	af 92       	push	r10
     86c:	bf 92       	push	r11
     86e:	cf 92       	push	r12
     870:	df 92       	push	r13
     872:	ef 92       	push	r14
     874:	ff 92       	push	r15
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	00 d0       	rcall	.+0      	; 0x880 <bmp085_readmem+0x16>
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	18 2f       	mov	r17, r24
     886:	04 2f       	mov	r16, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     888:	8e ee       	ldi	r24, 0xEE	; 238
     88a:	69 83       	std	Y+1, r22	; 0x01
     88c:	7a 83       	std	Y+2, r23	; 0x02
     88e:	0e 94 0a 08 	call	0x1014	; 0x1014 <i2c_start_wait>
	i2c_write(reg);
     892:	81 2f       	mov	r24, r17
     894:	0e 94 3b 08 	call	0x1076	; 0x1076 <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
     898:	8f ee       	ldi	r24, 0xEF	; 239
     89a:	0e 94 31 08 	call	0x1062	; 0x1062 <i2c_rep_start>
     89e:	69 81       	ldd	r22, Y+1	; 0x01
     8a0:	a6 2e       	mov	r10, r22
     8a2:	7a 81       	ldd	r23, Y+2	; 0x02
     8a4:	b7 2e       	mov	r11, r23
     8a6:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i<bytes; i++) {
     8a8:	e1 2c       	mov	r14, r1
     8aa:	f1 2c       	mov	r15, r1
		if(i==bytes-1)
     8ac:	68 01       	movw	r12, r16
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	c8 1a       	sub	r12, r24
     8b2:	d1 08       	sbc	r13, r1
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
     8b4:	e0 16       	cp	r14, r16
     8b6:	f1 06       	cpc	r15, r17
     8b8:	89 f0       	breq	.+34     	; 0x8dc <bmp085_readmem+0x72>
		if(i==bytes-1)
     8ba:	ec 14       	cp	r14, r12
     8bc:	fd 04       	cpc	r15, r13
     8be:	19 f4       	brne	.+6      	; 0x8c6 <bmp085_readmem+0x5c>
			buff[i] = i2c_readNak();
     8c0:	0e 94 56 08 	call	0x10ac	; 0x10ac <i2c_readNak>
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <bmp085_readmem+0x60>
		else
			buff[i] = i2c_readAck();
     8c6:	0e 94 4c 08 	call	0x1098	; 0x1098 <i2c_readAck>
     8ca:	f5 01       	movw	r30, r10
     8cc:	80 83       	st	Z, r24
     8ce:	ff ef       	ldi	r31, 0xFF	; 255
     8d0:	ef 1a       	sub	r14, r31
     8d2:	ff 0a       	sbc	r15, r31
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	a8 1a       	sub	r10, r24
     8d8:	b8 0a       	sbc	r11, r24
     8da:	ec cf       	rjmp	.-40     	; 0x8b4 <bmp085_readmem+0x4a>
	}
	i2c_stop();
}
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	df 90       	pop	r13
     8ee:	cf 90       	pop	r12
     8f0:	bf 90       	pop	r11
     8f2:	af 90       	pop	r10
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     8f4:	0c 94 33 08 	jmp	0x1066	; 0x1066 <i2c_stop>

000008f8 <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	a8 e3       	ldi	r26, 0x38	; 56
     8fe:	b1 e0       	ldi	r27, 0x01	; 1
     900:	fd 01       	movw	r30, r26
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
     902:	04 81       	ldd	r16, Z+4	; 0x04
     904:	15 81       	ldd	r17, Z+5	; 0x05
     906:	26 81       	ldd	r18, Z+6	; 0x06
     908:	37 81       	ldd	r19, Z+7	; 0x07
     90a:	01 93       	st	Z+, r16
     90c:	11 93       	st	Z+, r17
     90e:	21 93       	st	Z+, r18
     910:	31 93       	st	Z+, r19
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     912:	21 e0       	ldi	r18, 0x01	; 1
     914:	ec 38       	cpi	r30, 0x8C	; 140
     916:	f2 07       	cpc	r31, r18
     918:	a1 f7       	brne	.-24     	; 0x902 <__stack+0x3>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
     91a:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <k+0x50>
     91e:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <k+0x51>
     922:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <k+0x52>
     926:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <k+0x53>
#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	cb 01       	movw	r24, r22
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
     930:	0d 91       	ld	r16, X+
     932:	1d 91       	ld	r17, X+
     934:	2d 91       	ld	r18, X+
     936:	3d 91       	ld	r19, X+
     938:	60 0f       	add	r22, r16
     93a:	71 1f       	adc	r23, r17
     93c:	82 1f       	adc	r24, r18
     93e:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	ac 38       	cpi	r26, 0x8C	; 140
     944:	b2 07       	cpc	r27, r18
     946:	a1 f7       	brne	.-24     	; 0x930 <__stack+0x31>
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
     948:	25 e1       	ldi	r18, 0x15	; 21
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	0e 94 32 10 	call	0x2064	; 0x2064 <__divmodsi4>
}
     954:	ca 01       	movw	r24, r20
     956:	b9 01       	movw	r22, r18
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret

0000095e <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	00 d0       	rcall	.+0      	; 0x964 <bmp085_getcalibration+0x6>
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     968:	1a 82       	std	Y+2, r1	; 0x02
     96a:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
     96c:	42 e0       	ldi	r20, 0x02	; 2
     96e:	be 01       	movw	r22, r28
     970:	6f 5f       	subi	r22, 0xFF	; 255
     972:	7f 4f       	sbci	r23, 0xFF	; 255
     974:	8a ea       	ldi	r24, 0xAA	; 170
     976:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	98 2f       	mov	r25, r24
     980:	88 27       	eor	r24, r24
     982:	2a 81       	ldd	r18, Y+2	; 0x02
     984:	82 2b       	or	r24, r18
     986:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <bmp085_regac1+0x1>
     98a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <bmp085_regac1>
	bmp085_readmem(BMP085_REGAC2, buff, 2);
     98e:	42 e0       	ldi	r20, 0x02	; 2
     990:	be 01       	movw	r22, r28
     992:	6f 5f       	subi	r22, 0xFF	; 255
     994:	7f 4f       	sbci	r23, 0xFF	; 255
     996:	8c ea       	ldi	r24, 0xAC	; 172
     998:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
     99c:	89 81       	ldd	r24, Y+1	; 0x01
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	98 2f       	mov	r25, r24
     9a2:	88 27       	eor	r24, r24
     9a4:	2a 81       	ldd	r18, Y+2	; 0x02
     9a6:	82 2b       	or	r24, r18
     9a8:	90 93 da 01 	sts	0x01DA, r25	; 0x8001da <bmp085_regac2+0x1>
     9ac:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <bmp085_regac2>
	bmp085_readmem(BMP085_REGAC3, buff, 2);
     9b0:	42 e0       	ldi	r20, 0x02	; 2
     9b2:	be 01       	movw	r22, r28
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	8e ea       	ldi	r24, 0xAE	; 174
     9ba:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	98 2f       	mov	r25, r24
     9c4:	88 27       	eor	r24, r24
     9c6:	2a 81       	ldd	r18, Y+2	; 0x02
     9c8:	82 2b       	or	r24, r18
     9ca:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <bmp085_regac3+0x1>
     9ce:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <bmp085_regac3>
	bmp085_readmem(BMP085_REGAC4, buff, 2);
     9d2:	42 e0       	ldi	r20, 0x02	; 2
     9d4:	be 01       	movw	r22, r28
     9d6:	6f 5f       	subi	r22, 0xFF	; 255
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	80 eb       	ldi	r24, 0xB0	; 176
     9dc:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	98 2f       	mov	r25, r24
     9e6:	88 27       	eor	r24, r24
     9e8:	2a 81       	ldd	r18, Y+2	; 0x02
     9ea:	82 2b       	or	r24, r18
     9ec:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <bmp085_regac4+0x1>
     9f0:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <bmp085_regac4>
	bmp085_readmem(BMP085_REGAC5, buff, 2);
     9f4:	42 e0       	ldi	r20, 0x02	; 2
     9f6:	be 01       	movw	r22, r28
     9f8:	6f 5f       	subi	r22, 0xFF	; 255
     9fa:	7f 4f       	sbci	r23, 0xFF	; 255
     9fc:	82 eb       	ldi	r24, 0xB2	; 178
     9fe:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	98 2f       	mov	r25, r24
     a08:	88 27       	eor	r24, r24
     a0a:	2a 81       	ldd	r18, Y+2	; 0x02
     a0c:	82 2b       	or	r24, r18
     a0e:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <bmp085_regac5+0x1>
     a12:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <bmp085_regac5>
	bmp085_readmem(BMP085_REGAC6, buff, 2);
     a16:	42 e0       	ldi	r20, 0x02	; 2
     a18:	be 01       	movw	r22, r28
     a1a:	6f 5f       	subi	r22, 0xFF	; 255
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	84 eb       	ldi	r24, 0xB4	; 180
     a20:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	98 2f       	mov	r25, r24
     a2a:	88 27       	eor	r24, r24
     a2c:	2a 81       	ldd	r18, Y+2	; 0x02
     a2e:	82 2b       	or	r24, r18
     a30:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <bmp085_regac6+0x1>
     a34:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <bmp085_regac6>
	bmp085_readmem(BMP085_REGB1, buff, 2);
     a38:	42 e0       	ldi	r20, 0x02	; 2
     a3a:	be 01       	movw	r22, r28
     a3c:	6f 5f       	subi	r22, 0xFF	; 255
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	86 eb       	ldi	r24, 0xB6	; 182
     a42:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	98 2f       	mov	r25, r24
     a4c:	88 27       	eor	r24, r24
     a4e:	2a 81       	ldd	r18, Y+2	; 0x02
     a50:	82 2b       	or	r24, r18
     a52:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <bmp085_regb1+0x1>
     a56:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <bmp085_regb1>
	bmp085_readmem(BMP085_REGB2, buff, 2);
     a5a:	42 e0       	ldi	r20, 0x02	; 2
     a5c:	be 01       	movw	r22, r28
     a5e:	6f 5f       	subi	r22, 0xFF	; 255
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	88 eb       	ldi	r24, 0xB8	; 184
     a64:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
     a68:	89 81       	ldd	r24, Y+1	; 0x01
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	98 2f       	mov	r25, r24
     a6e:	88 27       	eor	r24, r24
     a70:	2a 81       	ldd	r18, Y+2	; 0x02
     a72:	82 2b       	or	r24, r18
     a74:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <bmp085_regb2+0x1>
     a78:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <bmp085_regb2>
	bmp085_readmem(BMP085_REGMB, buff, 2);
     a7c:	42 e0       	ldi	r20, 0x02	; 2
     a7e:	be 01       	movw	r22, r28
     a80:	6f 5f       	subi	r22, 0xFF	; 255
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	8a eb       	ldi	r24, 0xBA	; 186
     a86:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	98 2f       	mov	r25, r24
     a90:	88 27       	eor	r24, r24
     a92:	2a 81       	ldd	r18, Y+2	; 0x02
     a94:	82 2b       	or	r24, r18
     a96:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <bmp085_regmb+0x1>
     a9a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <bmp085_regmb>
	bmp085_readmem(BMP085_REGMC, buff, 2);
     a9e:	42 e0       	ldi	r20, 0x02	; 2
     aa0:	be 01       	movw	r22, r28
     aa2:	6f 5f       	subi	r22, 0xFF	; 255
     aa4:	7f 4f       	sbci	r23, 0xFF	; 255
     aa6:	8c eb       	ldi	r24, 0xBC	; 188
     aa8:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	98 2f       	mov	r25, r24
     ab2:	88 27       	eor	r24, r24
     ab4:	2a 81       	ldd	r18, Y+2	; 0x02
     ab6:	82 2b       	or	r24, r18
     ab8:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <bmp085_regmc+0x1>
     abc:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <bmp085_regmc>
	bmp085_readmem(BMP085_REGMD, buff, 2);
     ac0:	42 e0       	ldi	r20, 0x02	; 2
     ac2:	be 01       	movw	r22, r28
     ac4:	6f 5f       	subi	r22, 0xFF	; 255
     ac6:	7f 4f       	sbci	r23, 0xFF	; 255
     ac8:	8e eb       	ldi	r24, 0xBE	; 190
     aca:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	98 2f       	mov	r25, r24
     ad4:	88 27       	eor	r24, r24
     ad6:	2a 81       	ldd	r18, Y+2	; 0x02
     ad8:	82 2b       	or	r24, r18
     ada:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <bmp085_regmd+0x1>
     ade:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <bmp085_regmd>
}
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <bmp085_getrawtemperature>:

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
     aec:	cf 92       	push	r12
     aee:	df 92       	push	r13
     af0:	ef 92       	push	r14
     af2:	ff 92       	push	r15
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	00 d0       	rcall	.+0      	; 0xafe <bmp085_getrawtemperature+0x12>
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     b02:	1a 82       	std	Y+2, r1	; 0x02
     b04:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
     b06:	6e e2       	ldi	r22, 0x2E	; 46
     b08:	84 ef       	ldi	r24, 0xF4	; 244
     b0a:	0e 94 1d 04 	call	0x83a	; 0x83a <bmp085_writemem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b0e:	8f e1       	ldi	r24, 0x1F	; 31
     b10:	9e e4       	ldi	r25, 0x4E	; 78
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <bmp085_getrawtemperature+0x26>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <bmp085_getrawtemperature+0x2c>
     b18:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
     b1a:	42 e0       	ldi	r20, 0x02	; 2
     b1c:	be 01       	movw	r22, r28
     b1e:	6f 5f       	subi	r22, 0xFF	; 255
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	86 ef       	ldi	r24, 0xF6	; 246
     b24:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value
     b28:	29 81       	ldd	r18, Y+1	; 0x01
     b2a:	82 2f       	mov	r24, r18
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	a0 e0       	ldi	r26, 0x00	; 0
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	44 27       	eor	r20, r20
     b34:	58 2f       	mov	r21, r24
     b36:	69 2f       	mov	r22, r25
     b38:	7a 2f       	mov	r23, r26
     b3a:	8a 81       	ldd	r24, Y+2	; 0x02
     b3c:	48 2b       	or	r20, r24

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
     b3e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <bmp085_regac6>
     b42:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <bmp085_regac6+0x1>
     b46:	9a 01       	movw	r18, r20
     b48:	ab 01       	movw	r20, r22
     b4a:	28 1b       	sub	r18, r24
     b4c:	39 0b       	sbc	r19, r25
     b4e:	41 09       	sbc	r20, r1
     b50:	51 09       	sbc	r21, r1
     b52:	a0 91 d5 01 	lds	r26, 0x01D5	; 0x8001d5 <bmp085_regac5>
     b56:	b0 91 d6 01 	lds	r27, 0x01D6	; 0x8001d6 <bmp085_regac5+0x1>
     b5a:	0e 94 57 10 	call	0x20ae	; 0x20ae <__muluhisi3>
     b5e:	6b 01       	movw	r12, r22
     b60:	7c 01       	movw	r14, r24
     b62:	3f e0       	ldi	r19, 0x0F	; 15
     b64:	f5 94       	asr	r15
     b66:	e7 94       	ror	r14
     b68:	d7 94       	ror	r13
     b6a:	c7 94       	ror	r12
     b6c:	3a 95       	dec	r19
     b6e:	d1 f7       	brne	.-12     	; 0xb64 <bmp085_getrawtemperature+0x78>
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
     b70:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <bmp085_regmc>
     b74:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <bmp085_regmc+0x1>
     b78:	cb 01       	movw	r24, r22
     b7a:	77 0f       	add	r23, r23
     b7c:	aa 0b       	sbc	r26, r26
     b7e:	bb 0b       	sbc	r27, r27
     b80:	bc 01       	movw	r22, r24
     b82:	cd 01       	movw	r24, r26
     b84:	4b e0       	ldi	r20, 0x0B	; 11
     b86:	66 0f       	add	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	88 1f       	adc	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	4a 95       	dec	r20
     b90:	d1 f7       	brne	.-12     	; 0xb86 <bmp085_getrawtemperature+0x9a>
     b92:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <bmp085_regmd>
     b96:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <bmp085_regmd+0x1>
     b9a:	89 01       	movw	r16, r18
     b9c:	33 0f       	add	r19, r19
     b9e:	22 0b       	sbc	r18, r18
     ba0:	33 0b       	sbc	r19, r19
     ba2:	a9 01       	movw	r20, r18
     ba4:	98 01       	movw	r18, r16
     ba6:	2c 0d       	add	r18, r12
     ba8:	3d 1d       	adc	r19, r13
     baa:	4e 1d       	adc	r20, r14
     bac:	5f 1d       	adc	r21, r15
     bae:	0e 94 32 10 	call	0x2064	; 0x2064 <__divmodsi4>
	bmp085_rawtemperature = (x1 + x2);
     bb2:	c2 0e       	add	r12, r18
     bb4:	d3 1e       	adc	r13, r19
     bb6:	e4 1e       	adc	r14, r20
     bb8:	f5 1e       	adc	r15, r21
     bba:	c0 92 a5 01 	sts	0x01A5, r12	; 0x8001a5 <bmp085_rawtemperature>
     bbe:	d0 92 a6 01 	sts	0x01A6, r13	; 0x8001a6 <bmp085_rawtemperature+0x1>
     bc2:	e0 92 a7 01 	sts	0x01A7, r14	; 0x8001a7 <bmp085_rawtemperature+0x2>
     bc6:	f0 92 a8 01 	sts	0x01A8, r15	; 0x8001a8 <bmp085_rawtemperature+0x3>
}
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	df 90       	pop	r13
     bdc:	cf 90       	pop	r12
     bde:	08 95       	ret

00000be0 <bmp085_getrawpressure>:

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
     be0:	4f 92       	push	r4
     be2:	5f 92       	push	r5
     be4:	6f 92       	push	r6
     be6:	7f 92       	push	r7
     be8:	8f 92       	push	r8
     bea:	9f 92       	push	r9
     bec:	af 92       	push	r10
     bee:	bf 92       	push	r11
     bf0:	cf 92       	push	r12
     bf2:	df 92       	push	r13
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	2b 97       	sbiw	r28, 0x0b	; 11
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
     c10:	19 82       	std	Y+1, r1	; 0x01
     c12:	1a 82       	std	Y+2, r1	; 0x02
     c14:	1b 82       	std	Y+3, r1	; 0x03
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
     c16:	0e 94 76 05 	call	0xaec	; 0xaec <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
     c1a:	64 ef       	ldi	r22, 0xF4	; 244
     c1c:	84 ef       	ldi	r24, 0xF4	; 244
     c1e:	0e 94 1d 04 	call	0x83a	; 0x83a <bmp085_writemem>
     c22:	0f ef       	ldi	r16, 0xFF	; 255
     c24:	14 e4       	ldi	r17, 0x44	; 68
     c26:	21 e0       	ldi	r18, 0x01	; 1
     c28:	01 50       	subi	r16, 0x01	; 1
     c2a:	10 40       	sbci	r17, 0x00	; 0
     c2c:	20 40       	sbci	r18, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <bmp085_getrawpressure+0x48>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <bmp085_getrawpressure+0x52>
     c32:	00 00       	nop
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
     c34:	43 e0       	ldi	r20, 0x03	; 3
     c36:	be 01       	movw	r22, r28
     c38:	6f 5f       	subi	r22, 0xFF	; 255
     c3a:	7f 4f       	sbci	r23, 0xFF	; 255
     c3c:	86 ef       	ldi	r24, 0xF6	; 246
     c3e:	0e 94 35 04 	call	0x86a	; 0x86a <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
     c42:	c0 90 a5 01 	lds	r12, 0x01A5	; 0x8001a5 <bmp085_rawtemperature>
     c46:	d0 90 a6 01 	lds	r13, 0x01A6	; 0x8001a6 <bmp085_rawtemperature+0x1>
     c4a:	e0 90 a7 01 	lds	r14, 0x01A7	; 0x8001a7 <bmp085_rawtemperature+0x2>
     c4e:	f0 90 a8 01 	lds	r15, 0x01A8	; 0x8001a8 <bmp085_rawtemperature+0x3>
     c52:	30 ea       	ldi	r19, 0xA0	; 160
     c54:	c3 1a       	sub	r12, r19
     c56:	3f e0       	ldi	r19, 0x0F	; 15
     c58:	d3 0a       	sbc	r13, r19
     c5a:	e1 08       	sbc	r14, r1
     c5c:	f1 08       	sbc	r15, r1
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
     c5e:	a7 01       	movw	r20, r14
     c60:	96 01       	movw	r18, r12
     c62:	c7 01       	movw	r24, r14
     c64:	b6 01       	movw	r22, r12
     c66:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__mulsi3>
     c6a:	6c 83       	std	Y+4, r22	; 0x04
     c6c:	7d 83       	std	Y+5, r23	; 0x05
     c6e:	8e 83       	std	Y+6, r24	; 0x06
     c70:	9f 83       	std	Y+7, r25	; 0x07
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     c72:	80 90 b0 01 	lds	r8, 0x01B0	; 0x8001b0 <bmp085_regac1>
     c76:	90 90 b1 01 	lds	r9, 0x01B1	; 0x8001b1 <bmp085_regac1+0x1>
	x1 = (bmp085_regac3 * b6) >> 13;
     c7a:	a0 91 9b 01 	lds	r26, 0x019B	; 0x80019b <bmp085_regac3>
     c7e:	b0 91 9c 01 	lds	r27, 0x019C	; 0x80019c <bmp085_regac3+0x1>
     c82:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulshisi3>
     c86:	2b 01       	movw	r4, r22
     c88:	3c 01       	movw	r6, r24
     c8a:	fd e0       	ldi	r31, 0x0D	; 13
     c8c:	75 94       	asr	r7
     c8e:	67 94       	ror	r6
     c90:	57 94       	ror	r5
     c92:	47 94       	ror	r4
     c94:	fa 95       	dec	r31
     c96:	d1 f7       	brne	.-12     	; 0xc8c <bmp085_getrawpressure+0xac>
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
     c98:	a0 91 a9 01 	lds	r26, 0x01A9	; 0x8001a9 <bmp085_regb1>
     c9c:	b0 91 aa 01 	lds	r27, 0x01AA	; 0x8001aa <bmp085_regb1+0x1>
     ca0:	2c 81       	ldd	r18, Y+4	; 0x04
     ca2:	3d 81       	ldd	r19, Y+5	; 0x05
     ca4:	4e 81       	ldd	r20, Y+6	; 0x06
     ca6:	5f 81       	ldd	r21, Y+7	; 0x07
     ca8:	1c e0       	ldi	r17, 0x0C	; 12
     caa:	55 95       	asr	r21
     cac:	47 95       	ror	r20
     cae:	37 95       	ror	r19
     cb0:	27 95       	ror	r18
     cb2:	1a 95       	dec	r17
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <bmp085_getrawpressure+0xca>
     cb6:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulshisi3>
     cba:	bb 27       	eor	r27, r27
     cbc:	97 fd       	sbrc	r25, 7
     cbe:	b0 95       	com	r27
     cc0:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
     cc2:	84 0d       	add	r24, r4
     cc4:	95 1d       	adc	r25, r5
     cc6:	a6 1d       	adc	r26, r6
     cc8:	b7 1d       	adc	r27, r7
     cca:	02 96       	adiw	r24, 0x02	; 2
     ccc:	a1 1d       	adc	r26, r1
     cce:	b1 1d       	adc	r27, r1
     cd0:	22 e0       	ldi	r18, 0x02	; 2
     cd2:	b5 95       	asr	r27
     cd4:	a7 95       	ror	r26
     cd6:	97 95       	ror	r25
     cd8:	87 95       	ror	r24
     cda:	2a 95       	dec	r18
     cdc:	d1 f7       	brne	.-12     	; 0xcd2 <bmp085_getrawpressure+0xf2>
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
     cde:	9c 01       	movw	r18, r24
     ce0:	ad 01       	movw	r20, r26
     ce2:	30 58       	subi	r19, 0x80	; 128
     ce4:	4f 4f       	sbci	r20, 0xFF	; 255
     ce6:	5f 4f       	sbci	r21, 0xFF	; 255
     ce8:	a0 91 93 01 	lds	r26, 0x0193	; 0x800193 <bmp085_regac4>
     cec:	b0 91 94 01 	lds	r27, 0x0194	; 0x800194 <bmp085_regac4+0x1>
     cf0:	0e 94 57 10 	call	0x20ae	; 0x20ae <__muluhisi3>
     cf4:	2b 01       	movw	r4, r22
     cf6:	3c 01       	movw	r6, r24
     cf8:	3f e0       	ldi	r19, 0x0F	; 15
     cfa:	76 94       	lsr	r7
     cfc:	67 94       	ror	r6
     cfe:	57 94       	ror	r5
     d00:	47 94       	ror	r4
     d02:	3a 95       	dec	r19
     d04:	d1 f7       	brne	.-12     	; 0xcfa <bmp085_getrawpressure+0x11a>

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	2a 81       	ldd	r18, Y+2	; 0x02
     d0a:	42 2f       	mov	r20, r18
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	76 2f       	mov	r23, r22
     d14:	65 2f       	mov	r22, r21
     d16:	54 2f       	mov	r21, r20
     d18:	44 27       	eor	r20, r20
     d1a:	68 2b       	or	r22, r24
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	8a 01       	movw	r16, r20
     d20:	9b 01       	movw	r18, r22
     d22:	08 2b       	or	r16, r24
     d24:	f5 e0       	ldi	r31, 0x05	; 5
     d26:	35 95       	asr	r19
     d28:	27 95       	ror	r18
     d2a:	17 95       	ror	r17
     d2c:	07 95       	ror	r16
     d2e:	fa 95       	dec	r31
     d30:	d1 f7       	brne	.-12     	; 0xd26 <bmp085_getrawpressure+0x146>
     d32:	08 87       	std	Y+8, r16	; 0x08
     d34:	19 87       	std	Y+9, r17	; 0x09
     d36:	2a 87       	std	Y+10, r18	; 0x0a
     d38:	3b 87       	std	Y+11, r19	; 0x0b
	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     d3a:	09 2c       	mov	r0, r9
     d3c:	00 0c       	add	r0, r0
     d3e:	aa 08       	sbc	r10, r10
     d40:	bb 08       	sbc	r11, r11
     d42:	a2 e0       	ldi	r26, 0x02	; 2
     d44:	88 0c       	add	r8, r8
     d46:	99 1c       	adc	r9, r9
     d48:	aa 1c       	adc	r10, r10
     d4a:	bb 1c       	adc	r11, r11
     d4c:	aa 95       	dec	r26
     d4e:	d1 f7       	brne	.-12     	; 0xd44 <bmp085_getrawpressure+0x164>
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
     d50:	a0 91 95 01 	lds	r26, 0x0195	; 0x800195 <bmp085_regb2>
     d54:	b0 91 96 01 	lds	r27, 0x0196	; 0x800196 <bmp085_regb2+0x1>
     d58:	2c 81       	ldd	r18, Y+4	; 0x04
     d5a:	3d 81       	ldd	r19, Y+5	; 0x05
     d5c:	4e 81       	ldd	r20, Y+6	; 0x06
     d5e:	5f 81       	ldd	r21, Y+7	; 0x07
     d60:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulshisi3>
     d64:	8b 01       	movw	r16, r22
     d66:	9c 01       	movw	r18, r24
     d68:	b7 e1       	ldi	r27, 0x17	; 23
     d6a:	35 95       	asr	r19
     d6c:	27 95       	ror	r18
     d6e:	17 95       	ror	r17
     d70:	07 95       	ror	r16
     d72:	ba 95       	dec	r27
     d74:	d1 f7       	brne	.-12     	; 0xd6a <bmp085_getrawpressure+0x18a>
     d76:	0c 83       	std	Y+4, r16	; 0x04
     d78:	1d 83       	std	Y+5, r17	; 0x05
     d7a:	2e 83       	std	Y+6, r18	; 0x06
     d7c:	3f 83       	std	Y+7, r19	; 0x07
	x2 = (bmp085_regac2 * b6) >> 11;
     d7e:	a0 91 d9 01 	lds	r26, 0x01D9	; 0x8001d9 <bmp085_regac2>
     d82:	b0 91 da 01 	lds	r27, 0x01DA	; 0x8001da <bmp085_regac2+0x1>
     d86:	a7 01       	movw	r20, r14
     d88:	96 01       	movw	r18, r12
     d8a:	0e 94 62 10 	call	0x20c4	; 0x20c4 <__mulshisi3>
     d8e:	dc 01       	movw	r26, r24
     d90:	cb 01       	movw	r24, r22
     d92:	1b e0       	ldi	r17, 0x0B	; 11
     d94:	b5 95       	asr	r27
     d96:	a7 95       	ror	r26
     d98:	97 95       	ror	r25
     d9a:	87 95       	ror	r24
     d9c:	1a 95       	dec	r17
     d9e:	d1 f7       	brne	.-12     	; 0xd94 <bmp085_getrawpressure+0x1b4>
	x3 = x1 + x2;
     da0:	0c 81       	ldd	r16, Y+4	; 0x04
     da2:	1d 81       	ldd	r17, Y+5	; 0x05
     da4:	2e 81       	ldd	r18, Y+6	; 0x06
     da6:	3f 81       	ldd	r19, Y+7	; 0x07
     da8:	80 0f       	add	r24, r16
     daa:	91 1f       	adc	r25, r17
     dac:	a2 1f       	adc	r26, r18
     dae:	b3 1f       	adc	r27, r19
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     db0:	88 0e       	add	r8, r24
     db2:	99 1e       	adc	r9, r25
     db4:	aa 1e       	adc	r10, r26
     db6:	bb 1e       	adc	r11, r27
     db8:	88 0c       	add	r8, r8
     dba:	99 1c       	adc	r9, r9
     dbc:	aa 1c       	adc	r10, r10
     dbe:	bb 1c       	adc	r11, r11
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
     dc0:	28 85       	ldd	r18, Y+8	; 0x08
     dc2:	39 85       	ldd	r19, Y+9	; 0x09
     dc4:	4a 85       	ldd	r20, Y+10	; 0x0a
     dc6:	5b 85       	ldd	r21, Y+11	; 0x0b
     dc8:	28 19       	sub	r18, r8
     dca:	39 09       	sbc	r19, r9
     dcc:	4a 09       	sbc	r20, r10
     dce:	5b 09       	sbc	r21, r11
     dd0:	aa e6       	ldi	r26, 0x6A	; 106
     dd2:	b8 e1       	ldi	r27, 0x18	; 24
     dd4:	0e 94 57 10 	call	0x20ae	; 0x20ae <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
     dd8:	97 fd       	sbrc	r25, 7
     dda:	0b c0       	rjmp	.+22     	; 0xdf2 <bmp085_getrawpressure+0x212>
     ddc:	66 0f       	add	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	88 1f       	adc	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	a3 01       	movw	r20, r6
     de6:	92 01       	movw	r18, r4
     de8:	0e 94 10 10 	call	0x2020	; 0x2020 <__udivmodsi4>
     dec:	69 01       	movw	r12, r18
     dee:	7a 01       	movw	r14, r20
     df0:	0a c0       	rjmp	.+20     	; 0xe06 <bmp085_getrawpressure+0x226>
     df2:	a3 01       	movw	r20, r6
     df4:	92 01       	movw	r18, r4
     df6:	0e 94 10 10 	call	0x2020	; 0x2020 <__udivmodsi4>
     dfa:	69 01       	movw	r12, r18
     dfc:	7a 01       	movw	r14, r20
     dfe:	cc 0c       	add	r12, r12
     e00:	dd 1c       	adc	r13, r13
     e02:	ee 1c       	adc	r14, r14
     e04:	ff 1c       	adc	r15, r15
	x1 = (p >> 8) * (p >> 8);
     e06:	99 27       	eor	r25, r25
     e08:	f7 fc       	sbrc	r15, 7
     e0a:	9a 95       	dec	r25
     e0c:	8f 2d       	mov	r24, r15
     e0e:	7e 2d       	mov	r23, r14
     e10:	6d 2d       	mov	r22, r13
     e12:	9b 01       	movw	r18, r22
     e14:	ac 01       	movw	r20, r24
     e16:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__mulsi3>
     e1a:	9b 01       	movw	r18, r22
     e1c:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
     e1e:	ae ed       	ldi	r26, 0xDE	; 222
     e20:	bb e0       	ldi	r27, 0x0B	; 11
     e22:	0e 94 57 10 	call	0x20ae	; 0x20ae <__muluhisi3>
     e26:	4c 01       	movw	r8, r24
     e28:	bb 24       	eor	r11, r11
     e2a:	97 fc       	sbrc	r9, 7
     e2c:	b0 94       	com	r11
     e2e:	ab 2c       	mov	r10, r11
	x2 = (-7357 * p) >> 16;
     e30:	a3 e4       	ldi	r26, 0x43	; 67
     e32:	b3 ee       	ldi	r27, 0xE3	; 227
     e34:	a7 01       	movw	r20, r14
     e36:	96 01       	movw	r18, r12
     e38:	0e 94 65 10 	call	0x20ca	; 0x20ca <__mulohisi3>
     e3c:	bb 27       	eor	r27, r27
     e3e:	97 fd       	sbrc	r25, 7
     e40:	b0 95       	com	r27
     e42:	ab 2f       	mov	r26, r27
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
     e44:	88 0d       	add	r24, r8
     e46:	99 1d       	adc	r25, r9
     e48:	aa 1d       	adc	r26, r10
     e4a:	bb 1d       	adc	r27, r11
     e4c:	81 53       	subi	r24, 0x31	; 49
     e4e:	91 4f       	sbci	r25, 0xF1	; 241
     e50:	af 4f       	sbci	r26, 0xFF	; 255
     e52:	bf 4f       	sbci	r27, 0xFF	; 255
     e54:	44 e0       	ldi	r20, 0x04	; 4
     e56:	b5 95       	asr	r27
     e58:	a7 95       	ror	r26
     e5a:	97 95       	ror	r25
     e5c:	87 95       	ror	r24
     e5e:	4a 95       	dec	r20
     e60:	d1 f7       	brne	.-12     	; 0xe56 <bmp085_getrawpressure+0x276>
     e62:	bc 01       	movw	r22, r24
     e64:	cd 01       	movw	r24, r26
     e66:	6c 0d       	add	r22, r12
     e68:	7d 1d       	adc	r23, r13
     e6a:	8e 1d       	adc	r24, r14
     e6c:	9f 1d       	adc	r25, r15
     e6e:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <bmp085_rawpressure>
     e72:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <bmp085_rawpressure+0x1>
     e76:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <bmp085_rawpressure+0x2>
     e7a:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <bmp085_rawpressure+0x3>

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
     e7e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <bmp085_avaragefilter>
     e82:	60 93 97 01 	sts	0x0197, r22	; 0x800197 <bmp085_rawpressure>
     e86:	70 93 98 01 	sts	0x0198, r23	; 0x800198 <bmp085_rawpressure+0x1>
     e8a:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <bmp085_rawpressure+0x2>
     e8e:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <bmp085_rawpressure+0x3>
	#endif
}
     e92:	2b 96       	adiw	r28, 0x0b	; 11
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	bf 90       	pop	r11
     eb0:	af 90       	pop	r10
     eb2:	9f 90       	pop	r9
     eb4:	8f 90       	pop	r8
     eb6:	7f 90       	pop	r7
     eb8:	6f 90       	pop	r6
     eba:	5f 90       	pop	r5
     ebc:	4f 90       	pop	r4
     ebe:	08 95       	ret

00000ec0 <bmp085_gettemperature>:

/*
 * get celsius temperature
 */
double bmp085_gettemperature() {
	bmp085_getrawtemperature();
     ec0:	0e 94 76 05 	call	0xaec	; 0xaec <bmp085_getrawtemperature>
	double temperature = ((bmp085_rawtemperature + 8)>>4);
     ec4:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <bmp085_rawtemperature>
     ec8:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <bmp085_rawtemperature+0x1>
     ecc:	a0 91 a7 01 	lds	r26, 0x01A7	; 0x8001a7 <bmp085_rawtemperature+0x2>
     ed0:	b0 91 a8 01 	lds	r27, 0x01A8	; 0x8001a8 <bmp085_rawtemperature+0x3>
     ed4:	08 96       	adiw	r24, 0x08	; 8
     ed6:	a1 1d       	adc	r26, r1
     ed8:	b1 1d       	adc	r27, r1
     eda:	bc 01       	movw	r22, r24
     edc:	cd 01       	movw	r24, r26
     ede:	24 e0       	ldi	r18, 0x04	; 4
     ee0:	95 95       	asr	r25
     ee2:	87 95       	ror	r24
     ee4:	77 95       	ror	r23
     ee6:	67 95       	ror	r22
     ee8:	2a 95       	dec	r18
     eea:	d1 f7       	brne	.-12     	; 0xee0 <bmp085_gettemperature+0x20>
     eec:	0e 94 a4 11 	call	0x2348	; 0x2348 <__floatsisf>
	//temperature = temperature /10;
	return temperature;
}
     ef0:	08 95       	ret

00000ef2 <bmp085_getpressure>:

/*
 * get pressure with offset in BMP085.h and user pressure corection
 */
int32_t bmp085_getpressure(int32_t gPressCorr) {
     ef2:	cf 92       	push	r12
     ef4:	df 92       	push	r13
     ef6:	ef 92       	push	r14
     ef8:	ff 92       	push	r15
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	00 d0       	rcall	.+0      	; 0xf00 <bmp085_getpressure+0xe>
     f00:	00 d0       	rcall	.+0      	; 0xf02 <bmp085_getpressure+0x10>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	bmp085_getrawpressure();
     f06:	69 83       	std	Y+1, r22	; 0x01
     f08:	7a 83       	std	Y+2, r23	; 0x02
     f0a:	8b 83       	std	Y+3, r24	; 0x03
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <bmp085_getrawpressure>
	return bmp085_rawpressure + BMP085_UNITPAOFFSET + gPressCorr;
     f12:	c0 90 97 01 	lds	r12, 0x0197	; 0x800197 <bmp085_rawpressure>
     f16:	d0 90 98 01 	lds	r13, 0x0198	; 0x800198 <bmp085_rawpressure+0x1>
     f1a:	e0 90 99 01 	lds	r14, 0x0199	; 0x800199 <bmp085_rawpressure+0x2>
     f1e:	f0 90 9a 01 	lds	r15, 0x019A	; 0x80019a <bmp085_rawpressure+0x3>
     f22:	69 81       	ldd	r22, Y+1	; 0x01
     f24:	7a 81       	ldd	r23, Y+2	; 0x02
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	6c 0d       	add	r22, r12
     f2c:	7d 1d       	adc	r23, r13
     f2e:	8e 1d       	adc	r24, r14
     f30:	9f 1d       	adc	r25, r15
}
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	0f 90       	pop	r0
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	08 95       	ret

00000f48 <bmp085_getaltitude>:

/*
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
     f48:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <bmp085_getrawpressure>
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
     f4c:	60 91 97 01 	lds	r22, 0x0197	; 0x800197 <bmp085_rawpressure>
     f50:	70 91 98 01 	lds	r23, 0x0198	; 0x800198 <bmp085_rawpressure+0x1>
     f54:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <bmp085_rawpressure+0x2>
     f58:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <bmp085_rawpressure+0x3>
     f5c:	0e 94 a4 11 	call	0x2348	; 0x2348 <__floatsisf>
     f60:	20 e8       	ldi	r18, 0x80	; 128
     f62:	36 ee       	ldi	r19, 0xE6	; 230
     f64:	45 ec       	ldi	r20, 0xC5	; 197
     f66:	57 e4       	ldi	r21, 0x47	; 71
     f68:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__divsf3>
     f6c:	21 e0       	ldi	r18, 0x01	; 1
     f6e:	3e ed       	ldi	r19, 0xDE	; 222
     f70:	42 e4       	ldi	r20, 0x42	; 66
     f72:	5e e3       	ldi	r21, 0x3E	; 62
     f74:	0e 94 9d 12 	call	0x253a	; 0x253a <pow>
     f78:	9b 01       	movw	r18, r22
     f7a:	ac 01       	movw	r20, r24
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	80 e8       	ldi	r24, 0x80	; 128
     f82:	9f e3       	ldi	r25, 0x3F	; 63
     f84:	0e 94 8d 10 	call	0x211a	; 0x211a <__subsf3>
     f88:	2b e4       	ldi	r18, 0x4B	; 75
     f8a:	3a e3       	ldi	r19, 0x3A	; 58
     f8c:	4d eb       	ldi	r20, 0xBD	; 189
     f8e:	57 e3       	ldi	r21, 0x37	; 55
     f90:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__divsf3>
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	0e 94 8e 10 	call	0x211c	; 0x211c <__addsf3>
}
     f9e:	08 95       	ret

00000fa0 <bmp085_init>:

/*
 * init bmp085
 */
void bmp085_init() {
     fa0:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
     fa2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa6:	85 e3       	ldi	r24, 0x35	; 53
     fa8:	8a 95       	dec	r24
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <bmp085_init+0x8>
     fac:	00 00       	nop
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
     fae:	0e 94 af 04 	call	0x95e	; 0x95e <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
     fb2:	0e 94 76 05 	call	0xaec	; 0xaec <bmp085_getrawtemperature>
     fb6:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
     fb8:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <bmp085_getrawpressure>
     fbc:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
     fc0:	cf 91       	pop	r28
     fc2:	08 95       	ret

00000fc4 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     fc4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     fc8:	88 e4       	ldi	r24, 0x48	; 72
     fca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     fce:	08 95       	ret

00000fd0 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     fd0:	94 ea       	ldi	r25, 0xA4	; 164
     fd2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     fd6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     fda:	97 ff       	sbrs	r25, 7
     fdc:	fc cf       	rjmp	.-8      	; 0xfd6 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     fde:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     fe2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     fe4:	98 30       	cpi	r25, 0x08	; 8
     fe6:	21 f0       	breq	.+8      	; 0xff0 <i2c_start+0x20>
     fe8:	90 31       	cpi	r25, 0x10	; 16
     fea:	11 f0       	breq	.+4      	; 0xff0 <i2c_start+0x20>
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	08 95       	ret

	// send device address
	TWDR = address;
     ff0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     ff4:	84 e8       	ldi	r24, 0x84	; 132
     ff6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     ffa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     ffe:	87 ff       	sbrs	r24, 7
    1000:	fc cf       	rjmp	.-8      	; 0xffa <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1002:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1006:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1008:	88 31       	cpi	r24, 0x18	; 24
    100a:	11 f0       	breq	.+4      	; 0x1010 <i2c_start+0x40>
    100c:	80 34       	cpi	r24, 0x40	; 64
    100e:	71 f7       	brne	.-36     	; 0xfec <i2c_start+0x1c>

	return 0;
    1010:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1012:	08 95       	ret

00001014 <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1014:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1016:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1018:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    101a:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    101e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1022:	97 ff       	sbrs	r25, 7
    1024:	fc cf       	rjmp	.-8      	; 0x101e <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1026:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    102a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    102c:	98 30       	cpi	r25, 0x08	; 8
    102e:	11 f0       	breq	.+4      	; 0x1034 <i2c_start_wait+0x20>
    1030:	90 31       	cpi	r25, 0x10	; 16
    1032:	99 f7       	brne	.-26     	; 0x101a <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    1034:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1038:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    103c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1040:	97 ff       	sbrs	r25, 7
    1042:	fc cf       	rjmp	.-8      	; 0x103c <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    1044:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1048:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    104a:	90 32       	cpi	r25, 0x20	; 32
    104c:	11 f0       	breq	.+4      	; 0x1052 <i2c_start_wait+0x3e>
    104e:	98 35       	cpi	r25, 0x58	; 88
    1050:	39 f4       	brne	.+14     	; 0x1060 <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1052:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    1056:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    105a:	94 fd       	sbrc	r25, 4
    105c:	fc cf       	rjmp	.-8      	; 0x1056 <i2c_start_wait+0x42>
    105e:	dd cf       	rjmp	.-70     	; 0x101a <i2c_start_wait+0x6>
    1060:	08 95       	ret

00001062 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    1062:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <i2c_start>

00001066 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1066:	84 e9       	ldi	r24, 0x94	; 148
    1068:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    106c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1070:	84 fd       	sbrc	r24, 4
    1072:	fc cf       	rjmp	.-8      	; 0x106c <i2c_stop+0x6>

}/* i2c_stop */
    1074:	08 95       	ret

00001076 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1076:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    107a:	84 e8       	ldi	r24, 0x84	; 132
    107c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1080:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1084:	87 ff       	sbrs	r24, 7
    1086:	fc cf       	rjmp	.-8      	; 0x1080 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1088:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    108c:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	98 32       	cpi	r25, 0x28	; 40
    1092:	09 f4       	brne	.+2      	; 0x1096 <i2c_write+0x20>
    1094:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    1096:	08 95       	ret

00001098 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    1098:	84 ec       	ldi	r24, 0xC4	; 196
    109a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
    109e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10a2:	87 ff       	sbrs	r24, 7
    10a4:	fc cf       	rjmp	.-8      	; 0x109e <i2c_readAck+0x6>

    return TWDR;
    10a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
    10aa:	08 95       	ret

000010ac <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    10ac:	84 e8       	ldi	r24, 0x84	; 132
    10ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
    10b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10b6:	87 ff       	sbrs	r24, 7
    10b8:	fc cf       	rjmp	.-8      	; 0x10b2 <i2c_readNak+0x6>
	
    return TWDR;
    10ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
    10be:	08 95       	ret

000010c0 <modbusGetBusState>:
volatile unsigned char PacketTopIndex = 7;
volatile unsigned char modBusStaMaStates = 0;

uint8_t modbusGetBusState(void)
{
	return BusState;
    10c0:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <BusState>
}
    10c4:	08 95       	ret

000010c6 <modbusGetAddress>:

#if ADDRESS_MODE == SINGLE_ADR
volatile unsigned char Address = 0x00;
uint8_t modbusGetAddress(void)
{
	return Address;
    10c6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Address>
}
    10ca:	08 95       	ret

000010cc <modbusSetAddress>:

void modbusSetAddress(unsigned char newadr)
{
	Address = newadr;
    10cc:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <Address>
    10d0:	08 95       	ret

000010d2 <transceiver_txen>:
#endif

#if PHYSICAL_TYPE == 485
void transceiver_txen(void)
{
	TRANSCEIVER_ENABLE_PORT|=(1<<TRANSCEIVER_ENABLE_PIN);
    10d2:	5a 9a       	sbi	0x0b, 2	; 11
    10d4:	08 95       	ret

000010d6 <transceiver_rxen>:
}

 void transceiver_rxen(void)
{
	TRANSCEIVER_ENABLE_PORT&=~(1<<TRANSCEIVER_ENABLE_PIN);
    10d6:	5a 98       	cbi	0x0b, 2	; 11
    10d8:	08 95       	ret

000010da <crc16>:
*  	Returns 1 if the crc check is positive, returns 0 and saves the calculated CRC bytes
*	at the end of the data array if it fails.
*  	
*/
uint8_t crc16(volatile uint8_t *ptrToArray,uint8_t inputSize) //A standard CRC algorithm
{
    10da:	ac 01       	movw	r20, r24
	uint16_t out=0xffff;
	uint16_t carry;
	unsigned char n;
	inputSize++;
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	96 0f       	add	r25, r22
	for (int l=0; l<inputSize; l++) {
    10e0:	e0 e0       	ldi	r30, 0x00	; 0
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
*	at the end of the data array if it fails.
*  	
*/
uint8_t crc16(volatile uint8_t *ptrToArray,uint8_t inputSize) //A standard CRC algorithm
{
	uint16_t out=0xffff;
    10e4:	2f ef       	ldi	r18, 0xFF	; 255
    10e6:	3f ef       	ldi	r19, 0xFF	; 255
	uint16_t carry;
	unsigned char n;
	inputSize++;
	for (int l=0; l<inputSize; l++) {
    10e8:	69 2f       	mov	r22, r25
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	da 01       	movw	r26, r20
    10ee:	e6 17       	cp	r30, r22
    10f0:	f7 07       	cpc	r31, r23
    10f2:	a4 f4       	brge	.+40     	; 0x111c <crc16+0x42>
    10f4:	ae 0f       	add	r26, r30
    10f6:	bf 1f       	adc	r27, r31
		out ^= ptrToArray[l];
    10f8:	8c 91       	ld	r24, X
    10fa:	28 27       	eor	r18, r24
    10fc:	88 e0       	ldi	r24, 0x08	; 8
		for (n = 0; n < 8; n++) {
			carry = out & 1;
    10fe:	d9 01       	movw	r26, r18
    1100:	a1 70       	andi	r26, 0x01	; 1
    1102:	bb 27       	eor	r27, r27
			out >>= 1;
    1104:	36 95       	lsr	r19
    1106:	27 95       	ror	r18
			if (carry) out ^= 0xA001;
    1108:	ab 2b       	or	r26, r27
    110a:	21 f0       	breq	.+8      	; 0x1114 <crc16+0x3a>
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	29 27       	eor	r18, r25
    1110:	90 ea       	ldi	r25, 0xA0	; 160
    1112:	39 27       	eor	r19, r25
    1114:	81 50       	subi	r24, 0x01	; 1
	uint16_t carry;
	unsigned char n;
	inputSize++;
	for (int l=0; l<inputSize; l++) {
		out ^= ptrToArray[l];
		for (n = 0; n < 8; n++) {
    1116:	99 f7       	brne	.-26     	; 0x10fe <crc16+0x24>
{
	uint16_t out=0xffff;
	uint16_t carry;
	unsigned char n;
	inputSize++;
	for (int l=0; l<inputSize; l++) {
    1118:	31 96       	adiw	r30, 0x01	; 1
    111a:	e8 cf       	rjmp	.-48     	; 0x10ec <crc16+0x12>
			out >>= 1;
			if (carry) out ^= 0xA001;
		}
	}
	//out=0x1234;
	if ((ptrToArray[inputSize]==out%256) && (ptrToArray[inputSize+1]==out/256)) //check
    111c:	a6 0f       	add	r26, r22
    111e:	b7 1f       	adc	r27, r23
    1120:	ec 91       	ld	r30, X
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	6f 5f       	subi	r22, 0xFF	; 255
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	c9 01       	movw	r24, r18
    112a:	99 27       	eor	r25, r25
    112c:	e8 17       	cp	r30, r24
    112e:	f9 07       	cpc	r31, r25
    1130:	51 f4       	brne	.+20     	; 0x1146 <crc16+0x6c>
    1132:	fa 01       	movw	r30, r20
    1134:	e6 0f       	add	r30, r22
    1136:	f7 1f       	adc	r31, r23
    1138:	80 81       	ld	r24, Z
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	e3 2f       	mov	r30, r19
    113e:	ff 27       	eor	r31, r31
    1140:	8e 17       	cp	r24, r30
    1142:	9f 07       	cpc	r25, r31
    1144:	39 f0       	breq	.+14     	; 0x1154 <crc16+0x7a>
	{
		return 1;
	} else { 
		ptrToArray[inputSize]=out%256; //append Lo
    1146:	2c 93       	st	X, r18
		ptrToArray[inputSize+1]=out/256; //append Hi
    1148:	fa 01       	movw	r30, r20
    114a:	e6 0f       	add	r30, r22
    114c:	f7 1f       	adc	r31, r23
    114e:	30 83       	st	Z, r19
		return 0;	
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret
		}
	}
	//out=0x1234;
	if ((ptrToArray[inputSize]==out%256) && (ptrToArray[inputSize+1]==out/256)) //check
	{
		return 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
	} else { 
		ptrToArray[inputSize]=out%256; //append Lo
		ptrToArray[inputSize+1]=out/256; //append Hi
		return 0;	
	}
}
    1156:	08 95       	ret

00001158 <listRegisterCopy>:
/* @brief: copies a single or multiple words from one array of bytes to another array of bytes
*          amount must not be bigger than 255...
*
*/
void listRegisterCopy(volatile uint8_t *source, volatile uint8_t *target, uint8_t amount)
{
    1158:	28 2f       	mov	r18, r24
    115a:	db 01       	movw	r26, r22
	for (uint8_t c=0; c<amount; c++)
    115c:	fc 01       	movw	r30, r24
    115e:	8e 2f       	mov	r24, r30
    1160:	82 1b       	sub	r24, r18
    1162:	84 17       	cp	r24, r20
    1164:	18 f4       	brcc	.+6      	; 0x116c <listRegisterCopy+0x14>
	{
		*(target+c)=*(source+c);
    1166:	81 91       	ld	r24, Z+
    1168:	8d 93       	st	X+, r24
    116a:	f9 cf       	rjmp	.-14     	; 0x115e <listRegisterCopy+0x6>
	}
}
    116c:	08 95       	ret

0000116e <listBitCopy>:
*
*
*/
void listBitCopy(volatile uint8_t *source, uint16_t sourceNr,volatile uint8_t *target, uint16_t targetNr)
{
	if(*(source+(sourceNr/8))&(1<<(sourceNr-((sourceNr/8)*8))))
    116e:	fb 01       	movw	r30, r22
    1170:	a3 e0       	ldi	r26, 0x03	; 3
    1172:	f6 95       	lsr	r31
    1174:	e7 95       	ror	r30
    1176:	aa 95       	dec	r26
    1178:	e1 f7       	brne	.-8      	; 0x1172 <listBitCopy+0x4>
    117a:	e8 0f       	add	r30, r24
    117c:	f9 1f       	adc	r31, r25
    117e:	80 81       	ld	r24, Z
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	67 70       	andi	r22, 0x07	; 7
    1184:	77 27       	eor	r23, r23
    1186:	02 c0       	rjmp	.+4      	; 0x118c <listBitCopy+0x1e>
    1188:	95 95       	asr	r25
    118a:	87 95       	ror	r24
    118c:	6a 95       	dec	r22
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <listBitCopy+0x1a>
    1190:	f9 01       	movw	r30, r18
    1192:	b3 e0       	ldi	r27, 0x03	; 3
    1194:	f6 95       	lsr	r31
    1196:	e7 95       	ror	r30
    1198:	ba 95       	dec	r27
    119a:	e1 f7       	brne	.-8      	; 0x1194 <listBitCopy+0x26>
    119c:	27 70       	andi	r18, 0x07	; 7
    119e:	33 27       	eor	r19, r19
	{
		*(target+(targetNr/8))|=(1<<(targetNr-((targetNr/8)*8)));
    11a0:	e4 0f       	add	r30, r20
    11a2:	f5 1f       	adc	r31, r21
    11a4:	30 81       	ld	r19, Z
*
*
*/
void listBitCopy(volatile uint8_t *source, uint16_t sourceNr,volatile uint8_t *target, uint16_t targetNr)
{
	if(*(source+(sourceNr/8))&(1<<(sourceNr-((sourceNr/8)*8))))
    11a6:	80 ff       	sbrs	r24, 0
    11a8:	08 c0       	rjmp	.+16     	; 0x11ba <listBitCopy+0x4c>
	{
		*(target+(targetNr/8))|=(1<<(targetNr-((targetNr/8)*8)));
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <listBitCopy+0x44>
    11b0:	88 0f       	add	r24, r24
    11b2:	2a 95       	dec	r18
    11b4:	ea f7       	brpl	.-6      	; 0x11b0 <listBitCopy+0x42>
    11b6:	83 2b       	or	r24, r19
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <listBitCopy+0x5c>
	} else *(target+(targetNr/8))&=~(1<<(targetNr-((targetNr/8)*8)));
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <listBitCopy+0x54>
    11c0:	88 0f       	add	r24, r24
    11c2:	2a 95       	dec	r18
    11c4:	ea f7       	brpl	.-6      	; 0x11c0 <listBitCopy+0x52>
    11c6:	80 95       	com	r24
    11c8:	83 23       	and	r24, r19
    11ca:	80 83       	st	Z, r24
    11cc:	08 95       	ret

000011ce <modbusReset>:
/* @brief: Back to receiving state.
*
*/
void modbusReset(void)
{
	BusState=(1<<TimerActive); //stop receiving (error)
    11ce:	80 e2       	ldi	r24, 0x20	; 32
    11d0:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <BusState>
	modbusTimer=0;
    11d4:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <modbusTimer+0x1>
    11d8:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <modbusTimer>
    11dc:	08 95       	ret

000011de <modbusTickTimer>:
}

void modbusTickTimer(void)
{
	if (BusState&(1<<TimerActive)) 
    11de:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <BusState>
    11e2:	85 ff       	sbrs	r24, 5
    11e4:	3e c0       	rjmp	.+124    	; 0x1262 <modbusTickTimer+0x84>
	{
		modbusTimer++;
    11e6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <modbusTimer>
    11ea:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <modbusTimer+0x1>
    11ee:	01 96       	adiw	r24, 0x01	; 1
    11f0:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <modbusTimer+0x1>
    11f4:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <modbusTimer>
		if (BusState&(1<<Receiving)) //we are in receiving mode
    11f8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <BusState>
    11fc:	81 ff       	sbrs	r24, 1
    11fe:	26 c0       	rjmp	.+76     	; 0x124c <modbusTickTimer+0x6e>
		{
			if ((modbusTimer==modbusInterCharTimeout)) {
    1200:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <modbusTimer>
    1204:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <modbusTimer+0x1>
    1208:	07 97       	sbiw	r24, 0x07	; 7
    120a:	21 f4       	brne	.+8      	; 0x1214 <modbusTickTimer+0x36>
				BusState|=(1<<GapDetected);
    120c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <BusState>
    1210:	80 64       	ori	r24, 0x40	; 64
    1212:	25 c0       	rjmp	.+74     	; 0x125e <modbusTickTimer+0x80>
			} else if ((modbusTimer==modbusInterFrameDelayReceiveEnd)) { //end of message
    1214:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <modbusTimer>
    1218:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <modbusTimer+0x1>
    121c:	42 97       	sbiw	r24, 0x12	; 18
    121e:	09 f5       	brne	.+66     	; 0x1262 <modbusTickTimer+0x84>
				BusState=(1<<ReceiveCompleted);
    1220:	88 e0       	ldi	r24, 0x08	; 8
    1222:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <BusState>
				#if ADDRESS_MODE == MULTIPLE_ADR
               		 if (crc16(rxbuffer,DataPos-3)) { //perform crc check only. This is for multiple/all address mode.
                	} else modbusReset();
				#endif
				#if ADDRESS_MODE == SINGLE_ADR
				if (rxbuffer[0]==Address && crc16(rxbuffer,DataPos-3)) { //is the message for us? => perform crc check
    1226:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <rxbuffer>
    122a:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Address>
    122e:	98 13       	cpse	r25, r24
				} else modbusReset();
    1230:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <modbusReset>
				#if ADDRESS_MODE == MULTIPLE_ADR
               		 if (crc16(rxbuffer,DataPos-3)) { //perform crc check only. This is for multiple/all address mode.
                	} else modbusReset();
				#endif
				#if ADDRESS_MODE == SINGLE_ADR
				if (rxbuffer[0]==Address && crc16(rxbuffer,DataPos-3)) { //is the message for us? => perform crc check
    1234:	60 91 91 01 	lds	r22, 0x0191	; 0x800191 <DataPos>
    1238:	70 91 92 01 	lds	r23, 0x0192	; 0x800192 <DataPos+0x1>
    123c:	63 50       	subi	r22, 0x03	; 3
    123e:	8b ed       	ldi	r24, 0xDB	; 219
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	0e 94 6d 08 	call	0x10da	; 0x10da <crc16>
    1246:	81 11       	cpse	r24, r1
    1248:	0c c0       	rjmp	.+24     	; 0x1262 <modbusTickTimer+0x84>
    124a:	f2 cf       	rjmp	.-28     	; 0x1230 <modbusTickTimer+0x52>
				} else modbusReset();
				#endif
			}	
		} else if (modbusTimer==modbusInterFrameDelayReceiveStart) BusState|=(1<<BusTimedOut);
    124c:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <modbusTimer>
    1250:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <modbusTimer+0x1>
    1254:	40 97       	sbiw	r24, 0x10	; 16
    1256:	29 f4       	brne	.+10     	; 0x1262 <modbusTickTimer+0x84>
    1258:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <BusState>
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <BusState>
    1262:	08 95       	ret

00001264 <__vector_18>:
	}
}

ISR(UART_RECEIVE_INTERRUPT)
{
    1264:	1f 92       	push	r1
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	2f 93       	push	r18
    1270:	3f 93       	push	r19
    1272:	4f 93       	push	r20
    1274:	5f 93       	push	r21
    1276:	6f 93       	push	r22
    1278:	7f 93       	push	r23
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
	unsigned char data;
	data = UART_DATA;
    1286:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	modbusTimer=0; //reset timer
    128a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <modbusTimer+0x1>
    128e:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <modbusTimer>
	if (!(BusState & (1<<ReceiveCompleted)) && !(BusState & (1<<TransmitRequested)) && !(BusState & (1<<Transmitting)) && (BusState & (1<<Receiving)) && !(BusState & (1<<BusTimedOut)))
    1292:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <BusState>
    1296:	93 fd       	sbrc	r25, 3
    1298:	28 c0       	rjmp	.+80     	; 0x12ea <__vector_18+0x86>
    129a:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <BusState>
    129e:	94 fd       	sbrc	r25, 4
    12a0:	24 c0       	rjmp	.+72     	; 0x12ea <__vector_18+0x86>
    12a2:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <BusState>
    12a6:	92 fd       	sbrc	r25, 2
    12a8:	20 c0       	rjmp	.+64     	; 0x12ea <__vector_18+0x86>
    12aa:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <BusState>
    12ae:	91 ff       	sbrs	r25, 1
    12b0:	1c c0       	rjmp	.+56     	; 0x12ea <__vector_18+0x86>
    12b2:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <BusState>
    12b6:	90 fd       	sbrc	r25, 0
    12b8:	18 c0       	rjmp	.+48     	; 0x12ea <__vector_18+0x86>
	{
		if (DataPos>MaxFrameIndex) modbusReset();
    12ba:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <DataPos>
    12be:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <DataPos+0x1>
    12c2:	2f 3f       	cpi	r18, 0xFF	; 255
    12c4:	31 05       	cpc	r19, r1
    12c6:	21 f0       	breq	.+8      	; 0x12d0 <__vector_18+0x6c>
    12c8:	18 f0       	brcs	.+6      	; 0x12d0 <__vector_18+0x6c>
    12ca:	0e 94 e7 08 	call	0x11ce	; 0x11ce <modbusReset>
    12ce:	2c c0       	rjmp	.+88     	; 0x1328 <__vector_18+0xc4>
	    	else
		{
			rxbuffer[DataPos]=data;
    12d0:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <DataPos>
    12d4:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <DataPos+0x1>
    12d8:	e5 52       	subi	r30, 0x25	; 37
    12da:	fe 4f       	sbci	r31, 0xFE	; 254
    12dc:	80 83       	st	Z, r24
			DataPos++; //TODO: maybe prevent this from exceeding 255?
    12de:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <DataPos>
    12e2:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <DataPos+0x1>
    12e6:	01 96       	adiw	r24, 0x01	; 1
    12e8:	1b c0       	rjmp	.+54     	; 0x1320 <__vector_18+0xbc>
		}	    
    	} else 
	if (!(BusState & (1<<ReceiveCompleted)) && !(BusState & (1<<TransmitRequested)) && !(BusState & (1<<Transmitting)) && !(BusState & (1<<Receiving)) && (BusState & (1<<BusTimedOut))) 
    12ea:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <BusState>
    12ee:	93 fd       	sbrc	r25, 3
    12f0:	1b c0       	rjmp	.+54     	; 0x1328 <__vector_18+0xc4>
    12f2:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <BusState>
    12f6:	94 fd       	sbrc	r25, 4
    12f8:	17 c0       	rjmp	.+46     	; 0x1328 <__vector_18+0xc4>
    12fa:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <BusState>
    12fe:	92 fd       	sbrc	r25, 2
    1300:	13 c0       	rjmp	.+38     	; 0x1328 <__vector_18+0xc4>
    1302:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <BusState>
    1306:	91 fd       	sbrc	r25, 1
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <__vector_18+0xc4>
    130a:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <BusState>
    130e:	90 ff       	sbrs	r25, 0
    1310:	0b c0       	rjmp	.+22     	; 0x1328 <__vector_18+0xc4>
	{ 
		 rxbuffer[0]=data;
    1312:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <rxbuffer>
		 BusState=((1<<Receiving)|(1<<TimerActive));
    1316:	82 e2       	ldi	r24, 0x22	; 34
    1318:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <BusState>
		 DataPos=1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <DataPos+0x1>
    1324:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <DataPos>
    	}
}
    1328:	ff 91       	pop	r31
    132a:	ef 91       	pop	r30
    132c:	bf 91       	pop	r27
    132e:	af 91       	pop	r26
    1330:	9f 91       	pop	r25
    1332:	8f 91       	pop	r24
    1334:	7f 91       	pop	r23
    1336:	6f 91       	pop	r22
    1338:	5f 91       	pop	r21
    133a:	4f 91       	pop	r20
    133c:	3f 91       	pop	r19
    133e:	2f 91       	pop	r18
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	0f 90       	pop	r0
    1346:	1f 90       	pop	r1
    1348:	18 95       	reti

0000134a <__vector_19>:

ISR(UART_TRANSMIT_INTERRUPT)
{
    134a:	1f 92       	push	r1
    134c:	0f 92       	push	r0
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	0f 92       	push	r0
    1352:	11 24       	eor	r1, r1
    1354:	2f 93       	push	r18
    1356:	3f 93       	push	r19
    1358:	8f 93       	push	r24
    135a:	9f 93       	push	r25
    135c:	ef 93       	push	r30
    135e:	ff 93       	push	r31
	BusState&=~(1<<TransmitRequested);
    1360:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <BusState>
    1364:	8f 7e       	andi	r24, 0xEF	; 239
    1366:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <BusState>
	BusState|=(1<<Transmitting);
    136a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <BusState>
    136e:	84 60       	ori	r24, 0x04	; 4
    1370:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <BusState>
	UART_DATA=rxbuffer[DataPos];
    1374:	e0 91 91 01 	lds	r30, 0x0191	; 0x800191 <DataPos>
    1378:	f0 91 92 01 	lds	r31, 0x0192	; 0x800192 <DataPos+0x1>
    137c:	e5 52       	subi	r30, 0x25	; 37
    137e:	fe 4f       	sbci	r31, 0xFE	; 254
    1380:	80 81       	ld	r24, Z
    1382:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	DataPos++;
    1386:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <DataPos>
    138a:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <DataPos+0x1>
    138e:	01 96       	adiw	r24, 0x01	; 1
    1390:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <DataPos+0x1>
    1394:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <DataPos>
	if (DataPos==(PacketTopIndex+1)) {
    1398:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <DataPos>
    139c:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <DataPos+0x1>
    13a0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <PacketTopIndex>
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	01 96       	adiw	r24, 0x01	; 1
    13a8:	28 17       	cp	r18, r24
    13aa:	39 07       	cpc	r19, r25
    13ac:	29 f4       	brne	.+10     	; 0x13b8 <__vector_19+0x6e>
		UART_CONTROL&=~(1<<UART_UDRIE);
    13ae:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    13b2:	8f 7d       	andi	r24, 0xDF	; 223
    13b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	}
}
    13b8:	ff 91       	pop	r31
    13ba:	ef 91       	pop	r30
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_20>:

ISR(UART_TRANSMIT_COMPLETE_INTERRUPT)
{
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
	#if PHYSICAL_TYPE == 485
	transceiver_rxen();
    13f0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <transceiver_rxen>
	#endif
	modbusReset();
    13f4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <modbusReset>
}
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	7f 91       	pop	r23
    1406:	6f 91       	pop	r22
    1408:	5f 91       	pop	r21
    140a:	4f 91       	pop	r20
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	0f 90       	pop	r0
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	0f 90       	pop	r0
    1416:	1f 90       	pop	r1
    1418:	18 95       	reti

0000141a <modbusInit>:

void modbusInit(void)
{
	UBRRH = (unsigned char)((UBRR) >> 8);
    141a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRRL = (unsigned char) UBRR;
    141e:	8f ec       	ldi	r24, 0xCF	; 207
    1420:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UART_STATUS = (1<<U2X); //double speed mode.
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
#ifdef URSEL   // if UBRRH and UCSRC share the same I/O location , e.g. ATmega8
	UCSRC = (1<<URSEL)|(3<<UCSZ0); //Frame Size
#else
   UCSRC = (3<<UCSZ0); //Frame Size
    142a:	86 e0       	ldi	r24, 0x06	; 6
    142c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
#endif
	UART_CONTROL = (1<<TXCIE)|(1<<RXCIE)|(1<<RXEN)|(1<<TXEN); // USART receiver and transmitter and receive complete interrupt
    1430:	88 ed       	ldi	r24, 0xD8	; 216
    1432:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	#if PHYSICAL_TYPE == 485
	TRANSCEIVER_ENABLE_PORT_DDR|=(1<<TRANSCEIVER_ENABLE_PIN);
    1436:	52 9a       	sbi	0x0a, 2	; 10
	transceiver_rxen();
    1438:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <transceiver_rxen>
	#endif
	BusState=(1<<TimerActive);
    143c:	80 e2       	ldi	r24, 0x20	; 32
    143e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <BusState>
    1442:	08 95       	ret

00001444 <modbusSendMessage>:
*         Arguments: - packtop: Position of the last byte containing data.
*                               modbusSendException is a good usage example.
*/
void modbusSendMessage(unsigned char packtop)
{
	PacketTopIndex=packtop+2;
    1444:	92 e0       	ldi	r25, 0x02	; 2
    1446:	98 0f       	add	r25, r24
    1448:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <PacketTopIndex>
	crc16(rxbuffer,packtop);
    144c:	68 2f       	mov	r22, r24
    144e:	8b ed       	ldi	r24, 0xDB	; 219
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	0e 94 6d 08 	call	0x10da	; 0x10da <crc16>
	BusState|=(1<<TransmitRequested);
    1456:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <BusState>
    145a:	80 61       	ori	r24, 0x10	; 16
    145c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <BusState>
	DataPos=0;
    1460:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <DataPos+0x1>
    1464:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <DataPos>
	#if PHYSICAL_TYPE == 485
	transceiver_txen();
    1468:	0e 94 69 08 	call	0x10d2	; 0x10d2 <transceiver_txen>
	#endif
	UART_CONTROL|=(1<<UART_UDRIE);
    146c:	e1 ec       	ldi	r30, 0xC1	; 193
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 62       	ori	r24, 0x20	; 32
    1474:	80 83       	st	Z, r24
	BusState&=~(1<<ReceiveCompleted);
    1476:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <BusState>
    147a:	87 7f       	andi	r24, 0xF7	; 247
    147c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <BusState>
    1480:	08 95       	ret

00001482 <modbusSendException>:
*         Arguments: - exceptionCode
*                              
*/
void modbusSendException(unsigned char exceptionCode)
{
	rxbuffer[1]|=(1<<7); //setting MSB of the function code (the exception flag)
    1482:	eb ed       	ldi	r30, 0xDB	; 219
    1484:	f1 e0       	ldi	r31, 0x01	; 1
    1486:	91 81       	ldd	r25, Z+1	; 0x01
    1488:	90 68       	ori	r25, 0x80	; 128
    148a:	91 83       	std	Z+1, r25	; 0x01
	rxbuffer[2]=exceptionCode; //Exceptioncode. Also the last byte containing data
    148c:	82 83       	std	Z+2, r24	; 0x02
	modbusSendMessage(2);
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <modbusSendMessage>

00001494 <modbusRequestedAmount>:
/* @brief:  Returns the amount of requested data objects (coils, discretes, registers)
*
*/
uint16_t modbusRequestedAmount(void)
{
	return (rxbuffer[5]|(rxbuffer[4]<<8));
    1494:	eb ed       	ldi	r30, 0xDB	; 219
    1496:	f1 e0       	ldi	r31, 0x01	; 1
    1498:	85 81       	ldd	r24, Z+5	; 0x05
    149a:	24 81       	ldd	r18, Z+4	; 0x04
    149c:	90 e0       	ldi	r25, 0x00	; 0
}
    149e:	92 2b       	or	r25, r18
    14a0:	08 95       	ret

000014a2 <modbusRequestedAddress>:
/* @brief: Returns the address of the first requested data object (coils, discretes, registers)
*
*/
uint16_t modbusRequestedAddress(void)
{
	return (rxbuffer[3]|(rxbuffer[2]<<8));
    14a2:	eb ed       	ldi	r30, 0xDB	; 219
    14a4:	f1 e0       	ldi	r31, 0x01	; 1
    14a6:	83 81       	ldd	r24, Z+3	; 0x03
    14a8:	22 81       	ldd	r18, Z+2	; 0x02
    14aa:	90 e0       	ldi	r25, 0x00	; 0
}
    14ac:	92 2b       	or	r25, r18
    14ae:	08 95       	ret

000014b0 <intToModbusRegister>:

/* @brief: copies a single or multiple bytes from one array of bytes to an array of 16-bit-words
*
*/
void intToModbusRegister(volatile uint16_t *inreg, volatile uint8_t *outreg, uint8_t amount)
{
    14b0:	dc 01       	movw	r26, r24
    14b2:	fb 01       	movw	r30, r22
	for (uint8_t c=0; c<amount; c++)
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	94 17       	cp	r25, r20
    14b8:	51 f0       	breq	.+20     	; 0x14ce <intToModbusRegister+0x1e>
	{
			*(outreg+c*2) = (uint8_t)(*(inreg+c) >> 8);
    14ba:	2d 91       	ld	r18, X+
    14bc:	3c 91       	ld	r19, X
    14be:	11 97       	sbiw	r26, 0x01	; 1
    14c0:	30 83       	st	Z, r19
			*(outreg+1+c*2) = (uint8_t)(*(inreg+c));
    14c2:	2d 91       	ld	r18, X+
    14c4:	3d 91       	ld	r19, X+
    14c6:	21 83       	std	Z+1, r18	; 0x01
/* @brief: copies a single or multiple bytes from one array of bytes to an array of 16-bit-words
*
*/
void intToModbusRegister(volatile uint16_t *inreg, volatile uint8_t *outreg, uint8_t amount)
{
	for (uint8_t c=0; c<amount; c++)
    14c8:	9f 5f       	subi	r25, 0xFF	; 255
    14ca:	32 96       	adiw	r30, 0x02	; 2
    14cc:	f4 cf       	rjmp	.-24     	; 0x14b6 <intToModbusRegister+0x6>
	{
			*(outreg+c*2) = (uint8_t)(*(inreg+c) >> 8);
			*(outreg+1+c*2) = (uint8_t)(*(inreg+c));
	}
}
    14ce:	08 95       	ret

000014d0 <modbusRegisterToInt>:

/* @brief: copies a single or multiple 16-bit-words from one array of integers to an array of bytes
*
*/
void modbusRegisterToInt(volatile uint8_t *inreg, volatile uint16_t *outreg, uint8_t amount)
{
    14d0:	fb 01       	movw	r30, r22
	for (uint8_t c=0; c<amount; c++)
    14d2:	50 e0       	ldi	r21, 0x00	; 0
    14d4:	54 17       	cp	r21, r20
    14d6:	79 f0       	breq	.+30     	; 0x14f6 <modbusRegisterToInt+0x26>
	{
		*(outreg+c) = (*(inreg+c*2) << 8) + *(inreg+1+c*2);
    14d8:	dc 01       	movw	r26, r24
    14da:	2c 91       	ld	r18, X
    14dc:	11 96       	adiw	r26, 0x01	; 1
    14de:	6c 91       	ld	r22, X
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	32 2f       	mov	r19, r18
    14e4:	22 27       	eor	r18, r18
    14e6:	26 0f       	add	r18, r22
    14e8:	31 1d       	adc	r19, r1
    14ea:	31 83       	std	Z+1, r19	; 0x01
    14ec:	20 83       	st	Z, r18
    14ee:	32 96       	adiw	r30, 0x02	; 2
/* @brief: copies a single or multiple 16-bit-words from one array of integers to an array of bytes
*
*/
void modbusRegisterToInt(volatile uint8_t *inreg, volatile uint16_t *outreg, uint8_t amount)
{
	for (uint8_t c=0; c<amount; c++)
    14f0:	5f 5f       	subi	r21, 0xFF	; 255
    14f2:	02 96       	adiw	r24, 0x02	; 2
    14f4:	ef cf       	rjmp	.-34     	; 0x14d4 <modbusRegisterToInt+0x4>
	{
		*(outreg+c) = (*(inreg+c*2) << 8) + *(inreg+1+c*2);
	}
}
    14f6:	08 95       	ret

000014f8 <modbusExchangeRegisters>:
*                    - startAddress: address of the first register in the supplied array
*                    - size: input array size in the requested format (16bit-registers)
*
*/
uint8_t modbusExchangeRegisters(volatile uint16_t *ptrToInArray, uint16_t startAddress, uint16_t size)
{
    14f8:	cf 92       	push	r12
    14fa:	df 92       	push	r13
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	7c 01       	movw	r14, r24
    150a:	8b 01       	movw	r16, r22
    150c:	6a 01       	movw	r12, r20
	uint16_t requestedAmount = modbusRequestedAmount();
    150e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <modbusRequestedAmount>
    1512:	ec 01       	movw	r28, r24
	uint16_t requestedAdr = modbusRequestedAddress();
    1514:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <modbusRequestedAddress>
    1518:	9c 01       	movw	r18, r24
	if (rxbuffer[1]==fcPresetSingleRegister) requestedAmount=1;
    151a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rxbuffer+0x1>
    151e:	86 30       	cpi	r24, 0x06	; 6
    1520:	11 f4       	brne	.+4      	; 0x1526 <modbusExchangeRegisters+0x2e>
    1522:	c1 e0       	ldi	r28, 0x01	; 1
    1524:	d0 e0       	ldi	r29, 0x00	; 0
	if ((requestedAdr>=startAddress) && ((startAddress+size)>=(requestedAmount+requestedAdr))) {
    1526:	20 17       	cp	r18, r16
    1528:	31 07       	cpc	r19, r17
    152a:	b0 f1       	brcs	.+108    	; 0x1598 <modbusExchangeRegisters+0xa0>
    152c:	c0 0e       	add	r12, r16
    152e:	d1 1e       	adc	r13, r17
    1530:	ce 01       	movw	r24, r28
    1532:	82 0f       	add	r24, r18
    1534:	93 1f       	adc	r25, r19
    1536:	c8 16       	cp	r12, r24
    1538:	d9 06       	cpc	r13, r25
    153a:	70 f1       	brcs	.+92     	; 0x1598 <modbusExchangeRegisters+0xa0>
		
		if ((rxbuffer[1]==fcReadHoldingRegisters) || (rxbuffer[1]==fcReadInputRegisters) )
    153c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rxbuffer+0x1>
    1540:	83 30       	cpi	r24, 0x03	; 3
    1542:	21 f0       	breq	.+8      	; 0x154c <modbusExchangeRegisters+0x54>
    1544:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rxbuffer+0x1>
    1548:	84 30       	cpi	r24, 0x04	; 4
    154a:	c9 f4       	brne	.+50     	; 0x157e <modbusExchangeRegisters+0x86>
		{
			if ((requestedAmount*2)<=(MaxFrameIndex-4)) //message buffer big enough?
    154c:	ce 01       	movw	r24, r28
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	8c 3f       	cpi	r24, 0xFC	; 252
    1554:	91 05       	cpc	r25, r1
    1556:	00 f5       	brcc	.+64     	; 0x1598 <modbusExchangeRegisters+0xa0>
			{
				rxbuffer[2]=(unsigned char)(requestedAmount*2);
    1558:	cc 0f       	add	r28, r28
    155a:	c0 93 dd 01 	sts	0x01DD, r28	; 0x8001dd <rxbuffer+0x2>
				intToModbusRegister(ptrToInArray+(unsigned char)(requestedAdr-startAddress),rxbuffer+3,rxbuffer[2]);
    155e:	40 91 dd 01 	lds	r20, 0x01DD	; 0x8001dd <rxbuffer+0x2>
    1562:	20 1b       	sub	r18, r16
    1564:	6e ed       	ldi	r22, 0xDE	; 222
    1566:	71 e0       	ldi	r23, 0x01	; 1
    1568:	c7 01       	movw	r24, r14
    156a:	82 0f       	add	r24, r18
    156c:	91 1d       	adc	r25, r1
    156e:	82 0f       	add	r24, r18
    1570:	91 1d       	adc	r25, r1
    1572:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <intToModbusRegister>
				modbusSendMessage(2+rxbuffer[2]);
    1576:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <rxbuffer+0x2>
    157a:	8e 5f       	subi	r24, 0xFE	; 254
    157c:	37 c0       	rjmp	.+110    	; 0x15ec <modbusExchangeRegisters+0xf4>
				return 1;
			} else modbusSendException(ecIllegalDataValue);
		}
		else if (rxbuffer[1]==fcPresetMultipleRegisters)
    157e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rxbuffer+0x1>
    1582:	80 31       	cpi	r24, 0x10	; 16
    1584:	19 f5       	brne	.+70     	; 0x15cc <modbusExchangeRegisters+0xd4>
		{
			if (((rxbuffer[6])>=requestedAmount*2) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
    1586:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <rxbuffer+0x6>
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	ae 01       	movw	r20, r28
    158e:	44 0f       	add	r20, r20
    1590:	55 1f       	adc	r21, r21
    1592:	84 17       	cp	r24, r20
    1594:	95 07       	cpc	r25, r21
    1596:	20 f4       	brcc	.+8      	; 0x15a0 <modbusExchangeRegisters+0xa8>
			{
				rxbuffer[2]=(unsigned char)(requestedAmount*2);
				intToModbusRegister(ptrToInArray+(unsigned char)(requestedAdr-startAddress),rxbuffer+3,rxbuffer[2]);
				modbusSendMessage(2+rxbuffer[2]);
				return 1;
			} else modbusSendException(ecIllegalDataValue);
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	0e 94 41 0a 	call	0x1482	; 0x1482 <modbusSendException>
    159e:	2a c0       	rjmp	.+84     	; 0x15f4 <modbusExchangeRegisters+0xfc>
		}
		else if (rxbuffer[1]==fcPresetMultipleRegisters)
		{
			if (((rxbuffer[6])>=requestedAmount*2) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
    15a0:	40 91 91 01 	lds	r20, 0x0191	; 0x800191 <DataPos>
    15a4:	50 91 92 01 	lds	r21, 0x0192	; 0x800192 <DataPos+0x1>
    15a8:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <rxbuffer+0x6>
    15ac:	49 50       	subi	r20, 0x09	; 9
    15ae:	51 09       	sbc	r21, r1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	48 17       	cp	r20, r24
    15b4:	59 07       	cpc	r21, r25
    15b6:	80 f3       	brcs	.-32     	; 0x1598 <modbusExchangeRegisters+0xa0>
			{
				modbusRegisterToInt(rxbuffer+7,ptrToInArray+(unsigned char)(requestedAdr-startAddress),(unsigned char)(requestedAmount));
    15b8:	20 1b       	sub	r18, r16
    15ba:	b7 01       	movw	r22, r14
    15bc:	62 0f       	add	r22, r18
    15be:	71 1d       	adc	r23, r1
    15c0:	62 0f       	add	r22, r18
    15c2:	71 1d       	adc	r23, r1
    15c4:	4c 2f       	mov	r20, r28
    15c6:	82 ee       	ldi	r24, 0xE2	; 226
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	0d c0       	rjmp	.+26     	; 0x15e6 <modbusExchangeRegisters+0xee>
				modbusSendMessage(5);
				return 1;
			} else modbusSendException(ecIllegalDataValue);//too few data bytes received
		}
		else if (rxbuffer[1]==fcPresetSingleRegister)
    15cc:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rxbuffer+0x1>
    15d0:	86 30       	cpi	r24, 0x06	; 6
    15d2:	81 f4       	brne	.+32     	; 0x15f4 <modbusExchangeRegisters+0xfc>
		{
			modbusRegisterToInt(rxbuffer+4,ptrToInArray+(unsigned char)(requestedAdr-startAddress),1);
    15d4:	20 1b       	sub	r18, r16
    15d6:	b7 01       	movw	r22, r14
    15d8:	62 0f       	add	r22, r18
    15da:	71 1d       	adc	r23, r1
    15dc:	62 0f       	add	r22, r18
    15de:	71 1d       	adc	r23, r1
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	8f ed       	ldi	r24, 0xDF	; 223
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <modbusRegisterToInt>
			modbusSendMessage(5);
    15ea:	85 e0       	ldi	r24, 0x05	; 5
    15ec:	0e 94 22 0a 	call	0x1444	; 0x1444 <modbusSendMessage>
			return 1;
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <modbusExchangeRegisters+0xfe>
		} 
		//modbusSendException(ecSlaveDeviceFailure); //inapropriate call of modbusExchangeRegisters
		return 0;
    15f4:	80 e0       	ldi	r24, 0x00	; 0
		} else {
		modbusSendException(ecIllegalDataValue);
		return 0;
	}
}
    15f6:	df 91       	pop	r29
    15f8:	cf 91       	pop	r28
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	08 95       	ret

00001608 <modbusExchangeBits>:
*                    - startAddress: address of the first bit in the supplied array
*                    - size: input array size in the requested format (bits)
*
*/
uint8_t modbusExchangeBits(volatile uint8_t *ptrToInArray, uint16_t startAddress, uint16_t size)
{
    1608:	cf 92       	push	r12
    160a:	df 92       	push	r13
    160c:	ef 92       	push	r14
    160e:	ff 92       	push	r15
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	6c 01       	movw	r12, r24
    161a:	8b 01       	movw	r16, r22
    161c:	7a 01       	movw	r14, r20
	uint16_t requestedAmount = modbusRequestedAmount();
    161e:	0e 94 4a 0a 	call	0x1494	; 0x1494 <modbusRequestedAmount>
    1622:	ec 01       	movw	r28, r24
	uint16_t requestedAdr = modbusRequestedAddress();
    1624:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <modbusRequestedAddress>
    1628:	fc 01       	movw	r30, r24
	if (rxbuffer[1]==fcForceSingleCoil) requestedAmount=1;
    162a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rxbuffer+0x1>
    162e:	85 30       	cpi	r24, 0x05	; 5
    1630:	11 f4       	brne	.+4      	; 0x1636 <modbusExchangeBits+0x2e>
    1632:	c1 e0       	ldi	r28, 0x01	; 1
    1634:	d0 e0       	ldi	r29, 0x00	; 0
	if ((requestedAdr>=startAddress) && ((startAddress+size)>=(requestedAmount+requestedAdr)))
    1636:	e0 17       	cp	r30, r16
    1638:	f1 07       	cpc	r31, r17
    163a:	08 f4       	brcc	.+2      	; 0x163e <modbusExchangeBits+0x36>
    163c:	52 c0       	rjmp	.+164    	; 0x16e2 <modbusExchangeBits+0xda>
    163e:	e0 0e       	add	r14, r16
    1640:	f1 1e       	adc	r15, r17
    1642:	ce 01       	movw	r24, r28
    1644:	8e 0f       	add	r24, r30
    1646:	9f 1f       	adc	r25, r31
    1648:	e8 16       	cp	r14, r24
    164a:	f9 06       	cpc	r15, r25
    164c:	08 f4       	brcc	.+2      	; 0x1650 <modbusExchangeBits+0x48>
    164e:	49 c0       	rjmp	.+146    	; 0x16e2 <modbusExchangeBits+0xda>
	{
		if ((rxbuffer[1]==fcReadInputStatus) || (rxbuffer[1]==fcReadCoilStatus))
    1650:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rxbuffer+0x1>
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	21 f0       	breq	.+8      	; 0x1660 <modbusExchangeBits+0x58>
    1658:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rxbuffer+0x1>
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	a1 f5       	brne	.+104    	; 0x16c8 <modbusExchangeBits+0xc0>
		{
			if (requestedAmount<=((MaxFrameIndex-4)*8)) //message buffer big enough?
    1660:	c9 3d       	cpi	r28, 0xD9	; 217
    1662:	27 e0       	ldi	r18, 0x07	; 7
    1664:	d2 07       	cpc	r29, r18
    1666:	e8 f5       	brcc	.+122    	; 0x16e2 <modbusExchangeBits+0xda>
			{
				rxbuffer[2]=(requestedAmount/8);
    1668:	ce 01       	movw	r24, r28
    166a:	23 e0       	ldi	r18, 0x03	; 3
    166c:	96 95       	lsr	r25
    166e:	87 95       	ror	r24
    1670:	2a 95       	dec	r18
    1672:	e1 f7       	brne	.-8      	; 0x166c <modbusExchangeBits+0x64>
    1674:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <rxbuffer+0x2>
				if (requestedAmount%8>0)
    1678:	9e 01       	movw	r18, r28
    167a:	27 70       	andi	r18, 0x07	; 7
    167c:	33 27       	eor	r19, r19
    167e:	23 2b       	or	r18, r19
    1680:	49 f0       	breq	.+18     	; 0x1694 <modbusExchangeBits+0x8c>
				{
					rxbuffer[(uint8_t)(requestedAmount/8)+3]=0x00; //fill last data byte with zeros
    1682:	dc 01       	movw	r26, r24
    1684:	a2 52       	subi	r26, 0x22	; 34
    1686:	be 4f       	sbci	r27, 0xFE	; 254
    1688:	1c 92       	st	X, r1
					rxbuffer[2]++;
    168a:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <rxbuffer+0x2>
    168e:	8f 5f       	subi	r24, 0xFF	; 255
    1690:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <rxbuffer+0x2>
*/
uint8_t modbusExchangeBits(volatile uint8_t *ptrToInArray, uint16_t startAddress, uint16_t size)
{
	uint16_t requestedAmount = modbusRequestedAmount();
	uint16_t requestedAdr = modbusRequestedAddress();
	if (rxbuffer[1]==fcForceSingleCoil) requestedAmount=1;
    1694:	e1 2c       	mov	r14, r1
    1696:	f1 2c       	mov	r15, r1
					rxbuffer[(uint8_t)(requestedAmount/8)+3]=0x00; //fill last data byte with zeros
					rxbuffer[2]++;
				}
				for (uint16_t c = 0; c<requestedAmount; c++)
				{
					listBitCopy(ptrToInArray,requestedAdr-startAddress+c,rxbuffer+3,c);
    1698:	cf 01       	movw	r24, r30
    169a:	80 1b       	sub	r24, r16
    169c:	91 0b       	sbc	r25, r17
    169e:	8c 01       	movw	r16, r24
				if (requestedAmount%8>0)
				{
					rxbuffer[(uint8_t)(requestedAmount/8)+3]=0x00; //fill last data byte with zeros
					rxbuffer[2]++;
				}
				for (uint16_t c = 0; c<requestedAmount; c++)
    16a0:	ec 16       	cp	r14, r28
    16a2:	fd 06       	cpc	r15, r29
    16a4:	69 f0       	breq	.+26     	; 0x16c0 <modbusExchangeBits+0xb8>
    16a6:	b8 01       	movw	r22, r16
    16a8:	6e 0d       	add	r22, r14
    16aa:	7f 1d       	adc	r23, r15
				{
					listBitCopy(ptrToInArray,requestedAdr-startAddress+c,rxbuffer+3,c);
    16ac:	97 01       	movw	r18, r14
    16ae:	4e ed       	ldi	r20, 0xDE	; 222
    16b0:	51 e0       	ldi	r21, 0x01	; 1
    16b2:	c6 01       	movw	r24, r12
    16b4:	0e 94 b7 08 	call	0x116e	; 0x116e <listBitCopy>
				if (requestedAmount%8>0)
				{
					rxbuffer[(uint8_t)(requestedAmount/8)+3]=0x00; //fill last data byte with zeros
					rxbuffer[2]++;
				}
				for (uint16_t c = 0; c<requestedAmount; c++)
    16b8:	9f ef       	ldi	r25, 0xFF	; 255
    16ba:	e9 1a       	sub	r14, r25
    16bc:	f9 0a       	sbc	r15, r25
    16be:	f0 cf       	rjmp	.-32     	; 0x16a0 <modbusExchangeBits+0x98>
				{
					listBitCopy(ptrToInArray,requestedAdr-startAddress+c,rxbuffer+3,c);
				}
				modbusSendMessage(rxbuffer[2]+2);
    16c0:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <rxbuffer+0x2>
    16c4:	8e 5f       	subi	r24, 0xFE	; 254
    16c6:	42 c0       	rjmp	.+132    	; 0x174c <modbusExchangeBits+0x144>
				return 1;
			} else modbusSendException(ecIllegalDataValue); //too many bits requested within single request
		}
		else if (rxbuffer[1]==fcForceMultipleCoils)
    16c8:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rxbuffer+0x1>
    16cc:	8f 30       	cpi	r24, 0x0F	; 15
    16ce:	79 f5       	brne	.+94     	; 0x172e <modbusExchangeBits+0x126>
		{
			if (((rxbuffer[6]*8)>=requestedAmount) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
    16d0:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <rxbuffer+0x6>
    16d4:	28 e0       	ldi	r18, 0x08	; 8
    16d6:	82 9f       	mul	r24, r18
    16d8:	c0 01       	movw	r24, r0
    16da:	11 24       	eor	r1, r1
    16dc:	8c 17       	cp	r24, r28
    16de:	9d 07       	cpc	r25, r29
    16e0:	20 f4       	brcc	.+8      	; 0x16ea <modbusExchangeBits+0xe2>
				{
					listBitCopy(ptrToInArray,requestedAdr-startAddress+c,rxbuffer+3,c);
				}
				modbusSendMessage(rxbuffer[2]+2);
				return 1;
			} else modbusSendException(ecIllegalDataValue); //too many bits requested within single request
    16e2:	83 e0       	ldi	r24, 0x03	; 3
    16e4:	0e 94 41 0a 	call	0x1482	; 0x1482 <modbusSendException>
    16e8:	35 c0       	rjmp	.+106    	; 0x1754 <modbusExchangeBits+0x14c>
		}
		else if (rxbuffer[1]==fcForceMultipleCoils)
		{
			if (((rxbuffer[6]*8)>=requestedAmount) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
    16ea:	20 91 91 01 	lds	r18, 0x0191	; 0x800191 <DataPos>
    16ee:	30 91 92 01 	lds	r19, 0x0192	; 0x800192 <DataPos+0x1>
    16f2:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <rxbuffer+0x6>
    16f6:	29 50       	subi	r18, 0x09	; 9
    16f8:	31 09       	sbc	r19, r1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	28 17       	cp	r18, r24
    16fe:	39 07       	cpc	r19, r25
    1700:	80 f3       	brcs	.-32     	; 0x16e2 <modbusExchangeBits+0xda>
    1702:	e1 2c       	mov	r14, r1
    1704:	f1 2c       	mov	r15, r1
			{
				for (uint16_t c = 0; c<requestedAmount; c++)
				{
					listBitCopy(rxbuffer+7,c,ptrToInArray,requestedAdr-startAddress+c);
    1706:	cf 01       	movw	r24, r30
    1708:	80 1b       	sub	r24, r16
    170a:	91 0b       	sbc	r25, r17
    170c:	8c 01       	movw	r16, r24
		}
		else if (rxbuffer[1]==fcForceMultipleCoils)
		{
			if (((rxbuffer[6]*8)>=requestedAmount) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
			{
				for (uint16_t c = 0; c<requestedAmount; c++)
    170e:	ec 16       	cp	r14, r28
    1710:	fd 06       	cpc	r15, r29
    1712:	d9 f0       	breq	.+54     	; 0x174a <modbusExchangeBits+0x142>
    1714:	98 01       	movw	r18, r16
    1716:	2e 0d       	add	r18, r14
    1718:	3f 1d       	adc	r19, r15
				{
					listBitCopy(rxbuffer+7,c,ptrToInArray,requestedAdr-startAddress+c);
    171a:	a6 01       	movw	r20, r12
    171c:	b7 01       	movw	r22, r14
    171e:	82 ee       	ldi	r24, 0xE2	; 226
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	0e 94 b7 08 	call	0x116e	; 0x116e <listBitCopy>
		}
		else if (rxbuffer[1]==fcForceMultipleCoils)
		{
			if (((rxbuffer[6]*8)>=requestedAmount) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
			{
				for (uint16_t c = 0; c<requestedAmount; c++)
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	e8 1a       	sub	r14, r24
    172a:	f8 0a       	sbc	r15, r24
    172c:	f0 cf       	rjmp	.-32     	; 0x170e <modbusExchangeBits+0x106>
				}
				modbusSendMessage(5);
				return 1;
			} else modbusSendException(ecIllegalDataValue);//exception too few data bytes received
		}
		else if (rxbuffer[1]==fcForceSingleCoil) {
    172e:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <rxbuffer+0x1>
    1732:	85 30       	cpi	r24, 0x05	; 5
    1734:	79 f4       	brne	.+30     	; 0x1754 <modbusExchangeBits+0x14c>
			listBitCopy(rxbuffer+4,0,ptrToInArray,requestedAdr-startAddress);
    1736:	9f 01       	movw	r18, r30
    1738:	20 1b       	sub	r18, r16
    173a:	31 0b       	sbc	r19, r17
    173c:	a6 01       	movw	r20, r12
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	8f ed       	ldi	r24, 0xDF	; 223
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	0e 94 b7 08 	call	0x116e	; 0x116e <listBitCopy>
			modbusSendMessage(5); 
    174a:	85 e0       	ldi	r24, 0x05	; 5
    174c:	0e 94 22 0a 	call	0x1444	; 0x1444 <modbusSendMessage>
			return 1;
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	01 c0       	rjmp	.+2      	; 0x1756 <modbusExchangeBits+0x14e>
		}
		//modbusSendException(ecSlaveDeviceFailure); //inanpropriate call of modbusExchangeBits
		return 0;
    1754:	80 e0       	ldi	r24, 0x00	; 0
	} else
	{
		modbusSendException(ecIllegalDataValue);
		return 0;
	}
}
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	ff 90       	pop	r15
    1760:	ef 90       	pop	r14
    1762:	df 90       	pop	r13
    1764:	cf 90       	pop	r12
    1766:	08 95       	ret

00001768 <main>:
	}
}
/////////////////////////////////////////////////////////////////////

int main(void)
{
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	00 d0       	rcall	.+0      	; 0x176e <main+0x6>
    176e:	00 d0       	rcall	.+0      	; 0x1770 <main+0x8>
    1770:	1f 92       	push	r1
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
       
	   
	//DDRB |=(1<<PB3); //LED blink
	//PORTB|=(1<<PB3);
	// Port C initialization DS18b20 //
	DDRC &= ~(1 << PC0);   
    1776:	38 98       	cbi	0x07, 0	; 7
    PORTC &= ~(1 << PC0);   
    1778:	40 98       	cbi	0x08, 0	; 8
	DDRC &= ~(1 << PC1);   
    177a:	39 98       	cbi	0x07, 1	; 7
    PORTC &= ~(1 << PC1);   
    177c:	41 98       	cbi	0x08, 1	; 8
	DDRC &= ~(1 << PC2);   
    177e:	3a 98       	cbi	0x07, 2	; 7
    PORTC &= ~(1 << PC2);   
    1780:	42 98       	cbi	0x08, 2	; 8
	DDRC &= ~(1 << PC3);   
    1782:	3b 98       	cbi	0x07, 3	; 7
    PORTC &= ~(1 << PC3);
    1784:	43 98       	cbi	0x08, 3	; 8
	DDRD &= ~(1 << PD3);   
    1786:	53 98       	cbi	0x0a, 3	; 10
    PORTD &= ~(1 << PD3);   
    1788:	5b 98       	cbi	0x0b, 3	; 11
	DDRD &= ~(1 << PD4);   
    178a:	54 98       	cbi	0x0a, 4	; 10
    PORTD &= ~(1 << PD4);   
    178c:	5c 98       	cbi	0x0b, 4	; 11
	//modbus------------------------------------------------------
	io_conf();	
    178e:	0e 94 22 01 	call	0x244	; 0x244 <io_conf>
	modbusSetAddress(clientAddress); // setting client address
    1792:	8a e0       	ldi	r24, 0x0A	; 10
    1794:	0e 94 66 08 	call	0x10cc	; 0x10cc <modbusSetAddress>
	modbusInit();
    1798:	0e 94 0d 0a 	call	0x141a	; 0x141a <modbusInit>
	//wdt_enable(7);
	timer0100us_start();
    179c:	0e 94 0a 01 	call	0x214	; 0x214 <timer0100us_start>
	//---------------------------------------------------------
	//deny interrupt
	cli(); 
    17a0:	f8 94       	cli
	//Watchdog initialization.
	//wdt_reset();
	//wdt_enable(WDTO_8S); // for 5V supply,  At lower supply voltages, the times will increase 

	lcd_init( LCD_DISP_ON);
    17a2:	8c e0       	ldi	r24, 0x0C	; 12
    17a4:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_init>
	 lcd_clrscr();
    17a8:	0e 94 02 02 	call	0x404	; 0x404 <lcd_clrscr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17ac:	2f ef       	ldi	r18, 0xFF	; 255
    17ae:	47 ee       	ldi	r20, 0xE7	; 231
    17b0:	53 e0       	ldi	r21, 0x03	; 3
    17b2:	21 50       	subi	r18, 0x01	; 1
    17b4:	40 40       	sbci	r20, 0x00	; 0
    17b6:	50 40       	sbci	r21, 0x00	; 0
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <main+0x4a>
    17ba:	00 c0       	rjmp	.+0      	; 0x17bc <main+0x54>
    17bc:	00 00       	nop
	 _delay_ms(80);
	
	 lcd_gotoxy( 1, 0);
    17be:	60 e0       	ldi	r22, 0x00	; 0
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	 lcd_puts_P( " modbus temp 0.1");
    17c6:	8c ea       	ldi	r24, 0xAC	; 172
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	97 e9       	ldi	r25, 0x97	; 151
    17d2:	aa e3       	ldi	r26, 0x3A	; 58
    17d4:	81 50       	subi	r24, 0x01	; 1
    17d6:	90 40       	sbci	r25, 0x00	; 0
    17d8:	a0 40       	sbci	r26, 0x00	; 0
    17da:	e1 f7       	brne	.-8      	; 0x17d4 <main+0x6c>
    17dc:	00 c0       	rjmp	.+0      	; 0x17de <main+0x76>
    17de:	00 00       	nop
	 _delay_ms(1200);
	 lcd_gotoxy( 2, 1);		//column , row
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	82 e0       	ldi	r24, 0x02	; 2
    17e4:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	 lcd_puts_P( "kontrola snimacov");
    17e8:	8a e9       	ldi	r24, 0x9A	; 154
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	 lcd_gotoxy( 3, 2);		//column , row
    17f0:	62 e0       	ldi	r22, 0x02	; 2
    17f2:	83 e0       	ldi	r24, 0x03	; 3
    17f4:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	 lcd_puts_P( "DS18b20"); // msg0
    17f8:	82 e9       	ldi	r24, 0x92	; 146
    17fa:	91 e0       	ldi	r25, 0x01	; 1
    17fc:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
    1800:	bf ef       	ldi	r27, 0xFF	; 255
    1802:	e9 e6       	ldi	r30, 0x69	; 105
    1804:	f8 e1       	ldi	r31, 0x18	; 24
    1806:	b1 50       	subi	r27, 0x01	; 1
    1808:	e0 40       	sbci	r30, 0x00	; 0
    180a:	f0 40       	sbci	r31, 0x00	; 0
    180c:	e1 f7       	brne	.-8      	; 0x1806 <main+0x9e>
    180e:	00 c0       	rjmp	.+0      	; 0x1810 <main+0xa8>
    1810:	00 00       	nop
	 _delay_ms(500);
	lcd_clrscr();
    1812:	0e 94 02 02 	call	0x404	; 0x404 <lcd_clrscr>
	//---------------------------------
	lcd_gotoxy( 0, 0); // stlpec-riadok
    1816:	60 e0       	ldi	r22, 0x00	; 0
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S1:");
    181e:	8e e8       	ldi	r24, 0x8E	; 142
    1820:	91 e0       	ldi	r25, 0x01	; 1
    1822:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	Device1Presence = ds18b20_reset(&PORTC,PC0);
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	88 e2       	ldi	r24, 0x28	; 40
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 8d 02 	call	0x51a	; 0x51a <ds18b20_reset>
    1830:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Device1Presence>
	lcd_gotoxy( 4, 0);
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	84 e0       	ldi	r24, 0x04	; 4
    1838:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	if(Device1Presence)
    183c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Device1Presence>
    1840:	88 23       	and	r24, r24
    1842:	31 f0       	breq	.+12     	; 0x1850 <main+0xe8>
			lcd_puts_P( "OK");
    1844:	8b e8       	ldi	r24, 0x8B	; 139
    1846:	91 e0       	ldi	r25, 0x01	; 1
    1848:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    184c:	00 e0       	ldi	r16, 0x00	; 0
    184e:	09 c0       	rjmp	.+18     	; 0x1862 <main+0xfa>
	lcd_puts_P( "S1:");
	Device1Presence = ds18b20_reset(&PORTC,PC0);
	lcd_gotoxy( 4, 0);
	if(Device1Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 0);lcd_puts_P( "----");chyba1=1;}
    1850:	60 e0       	ldi	r22, 0x00	; 0
    1852:	84 e0       	ldi	r24, 0x04	; 4
    1854:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
    1858:	86 e8       	ldi	r24, 0x86	; 134
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
    1860:	01 e0       	ldi	r16, 0x01	; 1
	//_delay_ms(100);
	//---------------------------------
	Device2Presence = ds18b20_reset(&PORTC,PC1);
    1862:	61 e0       	ldi	r22, 0x01	; 1
    1864:	88 e2       	ldi	r24, 0x28	; 40
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 8d 02 	call	0x51a	; 0x51a <ds18b20_reset>
    186c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Device2Presence>
	lcd_gotoxy( 0, 1);
    1870:	61 e0       	ldi	r22, 0x01	; 1
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S2:");
    1878:	82 e8       	ldi	r24, 0x82	; 130
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 4, 1);
    1880:	61 e0       	ldi	r22, 0x01	; 1
    1882:	84 e0       	ldi	r24, 0x04	; 4
    1884:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	if(Device2Presence)
    1888:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Device2Presence>
    188c:	88 23       	and	r24, r24
    188e:	31 f0       	breq	.+12     	; 0x189c <main+0x134>
			lcd_puts_P( "OK");
    1890:	8f e7       	ldi	r24, 0x7F	; 127
    1892:	91 e0       	ldi	r25, 0x01	; 1
    1894:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    1898:	19 82       	std	Y+1, r1	; 0x01
    189a:	0a c0       	rjmp	.+20     	; 0x18b0 <main+0x148>
	lcd_gotoxy( 0, 1);
	lcd_puts_P( "S2:");
	lcd_gotoxy( 4, 1);
	if(Device2Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 1);lcd_puts_P( "----");chyba2=1;}
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	84 e0       	ldi	r24, 0x04	; 4
    18a0:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
    18a4:	8a e7       	ldi	r24, 0x7A	; 122
    18a6:	91 e0       	ldi	r25, 0x01	; 1
    18a8:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
    18ac:	21 e0       	ldi	r18, 0x01	; 1
    18ae:	29 83       	std	Y+1, r18	; 0x01
	//_delay_ms(100);
	//---------------------------------
	Device3Presence = ds18b20_reset(&PORTC,PC2);
    18b0:	62 e0       	ldi	r22, 0x02	; 2
    18b2:	88 e2       	ldi	r24, 0x28	; 40
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	0e 94 8d 02 	call	0x51a	; 0x51a <ds18b20_reset>
    18ba:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Device3Presence>
	lcd_gotoxy( 0, 2);
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S3:");
    18c6:	86 e7       	ldi	r24, 0x76	; 118
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 4, 2);
    18ce:	62 e0       	ldi	r22, 0x02	; 2
    18d0:	84 e0       	ldi	r24, 0x04	; 4
    18d2:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	if(Device3Presence)
    18d6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Device3Presence>
    18da:	88 23       	and	r24, r24
    18dc:	31 f0       	breq	.+12     	; 0x18ea <main+0x182>
			lcd_puts_P( "OK");
    18de:	83 e7       	ldi	r24, 0x73	; 115
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    18e6:	1a 82       	std	Y+2, r1	; 0x02
    18e8:	0a c0       	rjmp	.+20     	; 0x18fe <main+0x196>
	lcd_gotoxy( 0, 2);
	lcd_puts_P( "S3:");
	lcd_gotoxy( 4, 2);
	if(Device3Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 1);lcd_puts_P( "----");chyba3=1;}
    18ea:	61 e0       	ldi	r22, 0x01	; 1
    18ec:	84 e0       	ldi	r24, 0x04	; 4
    18ee:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
    18f2:	8e e6       	ldi	r24, 0x6E	; 110
    18f4:	91 e0       	ldi	r25, 0x01	; 1
    18f6:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
    18fa:	41 e0       	ldi	r20, 0x01	; 1
    18fc:	4a 83       	std	Y+2, r20	; 0x02
	//_delay_ms(100);
	//---------------------------------
	Device4Presence = ds18b20_reset(&PORTC,PC3);
    18fe:	63 e0       	ldi	r22, 0x03	; 3
    1900:	88 e2       	ldi	r24, 0x28	; 40
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 8d 02 	call	0x51a	; 0x51a <ds18b20_reset>
    1908:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <Device4Presence>
	lcd_gotoxy( 0, 3);
    190c:	63 e0       	ldi	r22, 0x03	; 3
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S4:");
    1914:	8a e6       	ldi	r24, 0x6A	; 106
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 4, 3);
    191c:	63 e0       	ldi	r22, 0x03	; 3
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>

	if(Device4Presence)
    1924:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Device4Presence>
    1928:	88 23       	and	r24, r24
    192a:	31 f0       	breq	.+12     	; 0x1938 <main+0x1d0>
			lcd_puts_P( "OK");
    192c:	87 e6       	ldi	r24, 0x67	; 103
    192e:	91 e0       	ldi	r25, 0x01	; 1
    1930:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    1934:	1b 82       	std	Y+3, r1	; 0x03
    1936:	0a c0       	rjmp	.+20     	; 0x194c <main+0x1e4>
	lcd_puts_P( "S4:");
	lcd_gotoxy( 4, 3);

	if(Device4Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 3);lcd_puts_P( "----");chyba4=1;}
    1938:	63 e0       	ldi	r22, 0x03	; 3
    193a:	84 e0       	ldi	r24, 0x04	; 4
    193c:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
    1940:	82 e6       	ldi	r24, 0x62	; 98
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
    1948:	51 e0       	ldi	r21, 0x01	; 1
    194a:	5b 83       	std	Y+3, r21	; 0x03
	//---------------------------------
	Device5Presence = ds18b20_reset(&PORTD,PD3);
    194c:	63 e0       	ldi	r22, 0x03	; 3
    194e:	8b e2       	ldi	r24, 0x2B	; 43
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 8d 02 	call	0x51a	; 0x51a <ds18b20_reset>
    1956:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Device5Presence>
	lcd_gotoxy( 9, 2);
    195a:	62 e0       	ldi	r22, 0x02	; 2
    195c:	89 e0       	ldi	r24, 0x09	; 9
    195e:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S5:");
    1962:	8e e5       	ldi	r24, 0x5E	; 94
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 11, 2);
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	8b e0       	ldi	r24, 0x0B	; 11
    196e:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>

	if(Device5Presence)
    1972:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Device5Presence>
    1976:	88 23       	and	r24, r24
    1978:	31 f0       	breq	.+12     	; 0x1986 <main+0x21e>
			lcd_puts_P( "OK");
    197a:	8b e5       	ldi	r24, 0x5B	; 91
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    1982:	1c 82       	std	Y+4, r1	; 0x04
    1984:	0a c0       	rjmp	.+20     	; 0x199a <main+0x232>
	lcd_puts_P( "S5:");
	lcd_gotoxy( 11, 2);

	if(Device5Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 9, 2);lcd_puts_P( "----");chyba5=1;}
    1986:	62 e0       	ldi	r22, 0x02	; 2
    1988:	89 e0       	ldi	r24, 0x09	; 9
    198a:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
    198e:	86 e5       	ldi	r24, 0x56	; 86
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	8c 83       	std	Y+4, r24	; 0x04
	//---------------------------------
	Device6Presence = ds18b20_reset(&PORTD,PD4);
    199a:	64 e0       	ldi	r22, 0x04	; 4
    199c:	8b e2       	ldi	r24, 0x2B	; 43
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 8d 02 	call	0x51a	; 0x51a <ds18b20_reset>
    19a4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <Device6Presence>
	lcd_gotoxy( 9, 3);
    19a8:	63 e0       	ldi	r22, 0x03	; 3
    19aa:	89 e0       	ldi	r24, 0x09	; 9
    19ac:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S6:");
    19b0:	82 e5       	ldi	r24, 0x52	; 82
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 11, 3);
    19b8:	63 e0       	ldi	r22, 0x03	; 3
    19ba:	8b e0       	ldi	r24, 0x0B	; 11
    19bc:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>

	if(Device6Presence)
    19c0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Device6Presence>
    19c4:	88 23       	and	r24, r24
    19c6:	31 f0       	breq	.+12     	; 0x19d4 <main+0x26c>
			lcd_puts_P( "OK");
    19c8:	8f e4       	ldi	r24, 0x4F	; 79
    19ca:	91 e0       	ldi	r25, 0x01	; 1
    19cc:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    19d0:	1d 82       	std	Y+5, r1	; 0x05
    19d2:	0a c0       	rjmp	.+20     	; 0x19e8 <main+0x280>
	lcd_puts_P( "S6:");
	lcd_gotoxy( 11, 3);

	if(Device6Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 9, 3);lcd_puts_P( "----");chyba6=1;}
    19d4:	63 e0       	ldi	r22, 0x03	; 3
    19d6:	89 e0       	ldi	r24, 0x09	; 9
    19d8:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
    19dc:	8a e4       	ldi	r24, 0x4A	; 74
    19de:	91 e0       	ldi	r25, 0x01	; 1
    19e0:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	9d 83       	std	Y+5, r25	; 0x05
    19e8:	af ef       	ldi	r26, 0xFF	; 255
    19ea:	b3 ed       	ldi	r27, 0xD3	; 211
    19ec:	e0 e3       	ldi	r30, 0x30	; 48
    19ee:	a1 50       	subi	r26, 0x01	; 1
    19f0:	b0 40       	sbci	r27, 0x00	; 0
    19f2:	e0 40       	sbci	r30, 0x00	; 0
    19f4:	e1 f7       	brne	.-8      	; 0x19ee <main+0x286>
    19f6:	00 c0       	rjmp	.+0      	; 0x19f8 <main+0x290>
    19f8:	00 00       	nop

	_delay_ms(1000);

// ----------print ROM code----------------

	lcd_gotoxy( 0, 0);
    19fa:	60 e0       	ldi	r22, 0x00	; 0
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "K1:");
    1a02:	86 e4       	ldi	r24, 0x46	; 70
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 3, 0);
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>

	if(chyba1==0)
    1a12:	01 11       	cpse	r16, r1
    1a14:	06 c0       	rjmp	.+12     	; 0x1a22 <main+0x2ba>
		{	read_ROM_CODE(&PORTC,PC0); 
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	88 e2       	ldi	r24, 0x28	; 40
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 54 03 	call	0x6a8	; 0x6a8 <read_ROM_CODE>
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <main+0x2c2>
			
		}
		else {
			lcd_puts_P( "----");
    1a22:	81 e4       	ldi	r24, 0x41	; 65
    1a24:	91 e0       	ldi	r25, 0x01	; 1
    1a26:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
			}
	lcd_gotoxy( 0, 1);
    1a2a:	61 e0       	ldi	r22, 0x01	; 1
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "K2:");
    1a32:	8d e3       	ldi	r24, 0x3D	; 61
    1a34:	91 e0       	ldi	r25, 0x01	; 1
    1a36:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 3, 1);
    1a3a:	61 e0       	ldi	r22, 0x01	; 1
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>

	if(chyba2==0)
    1a42:	f9 81       	ldd	r31, Y+1	; 0x01
    1a44:	f1 11       	cpse	r31, r1
    1a46:	06 c0       	rjmp	.+12     	; 0x1a54 <main+0x2ec>
		{	read_ROM_CODE(&PORTC,PC1); 
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	88 e2       	ldi	r24, 0x28	; 40
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <read_ROM_CODE>
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <main+0x2f4>
			
		}
		else {
			lcd_puts_P( "----");
    1a54:	88 e3       	ldi	r24, 0x38	; 56
    1a56:	91 e0       	ldi	r25, 0x01	; 1
    1a58:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
			}
	
	lcd_gotoxy( 0, 2);
    1a5c:	62 e0       	ldi	r22, 0x02	; 2
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "K3:");
    1a64:	84 e3       	ldi	r24, 0x34	; 52
    1a66:	91 e0       	ldi	r25, 0x01	; 1
    1a68:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 3, 2);
    1a6c:	62 e0       	ldi	r22, 0x02	; 2
    1a6e:	83 e0       	ldi	r24, 0x03	; 3
    1a70:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	
	if(chyba3==0)
    1a74:	2a 81       	ldd	r18, Y+2	; 0x02
    1a76:	21 11       	cpse	r18, r1
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <main+0x31e>
		{
			read_ROM_CODE(&PORTC,PC2);
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	88 e2       	ldi	r24, 0x28	; 40
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 54 03 	call	0x6a8	; 0x6a8 <read_ROM_CODE>
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <main+0x326>
		}
		else {
			lcd_puts_P( "----");
    1a86:	8f e2       	ldi	r24, 0x2F	; 47
    1a88:	91 e0       	ldi	r25, 0x01	; 1
    1a8a:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
			}
	lcd_gotoxy( 0, 3);
    1a8e:	63 e0       	ldi	r22, 0x03	; 3
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "K4:");
    1a96:	8b e2       	ldi	r24, 0x2B	; 43
    1a98:	91 e0       	ldi	r25, 0x01	; 1
    1a9a:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 3, 3);
    1a9e:	63 e0       	ldi	r22, 0x03	; 3
    1aa0:	83 e0       	ldi	r24, 0x03	; 3
    1aa2:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	
	if(chyba4==0)
    1aa6:	4b 81       	ldd	r20, Y+3	; 0x03
    1aa8:	41 11       	cpse	r20, r1
    1aaa:	06 c0       	rjmp	.+12     	; 0x1ab8 <main+0x350>
		{
			read_ROM_CODE(&PORTC,PC3);
    1aac:	63 e0       	ldi	r22, 0x03	; 3
    1aae:	88 e2       	ldi	r24, 0x28	; 40
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <read_ROM_CODE>
    1ab6:	04 c0       	rjmp	.+8      	; 0x1ac0 <main+0x358>
		}
		else {
			lcd_puts_P( "----");
    1ab8:	86 e2       	ldi	r24, 0x26	; 38
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>

		/*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
    1ac0:	80 e4       	ldi	r24, 0x40	; 64
    1ac2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_command>
    1ac6:	4d eb       	ldi	r20, 0xBD	; 189
    1ac8:	e4 2e       	mov	r14, r20
    1aca:	41 e0       	ldi	r20, 0x01	; 1
    1acc:	f4 2e       	mov	r15, r20
    1ace:	18 e1       	ldi	r17, 0x18	; 24
    1ad0:	1e 0d       	add	r17, r14
       for(i=0; i<24; i++)
       {
          lcd_data(pgm_read_byte_near(&userChar[i]));
    1ad2:	f7 01       	movw	r30, r14
    1ad4:	84 91       	lpm	r24, Z
    1ad6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <lcd_data>
    1ada:	ff ef       	ldi	r31, 0xFF	; 255
    1adc:	ef 1a       	sub	r14, r31
    1ade:	ff 0a       	sbc	r15, r31
		/*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
       for(i=0; i<24; i++)
    1ae0:	1e 11       	cpse	r17, r14
    1ae2:	f7 cf       	rjmp	.-18     	; 0x1ad2 <main+0x36a>
       {
          lcd_data(pgm_read_byte_near(&userChar[i]));
       }

// set up bmp085board
	bmp085_init();
    1ae4:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <bmp085_init>
    1ae8:	2f ef       	ldi	r18, 0xFF	; 255
    1aea:	49 e6       	ldi	r20, 0x69	; 105
    1aec:	58 e1       	ldi	r21, 0x18	; 24
    1aee:	21 50       	subi	r18, 0x01	; 1
    1af0:	40 40       	sbci	r20, 0x00	; 0
    1af2:	50 40       	sbci	r21, 0x00	; 0
    1af4:	e1 f7       	brne	.-8      	; 0x1aee <main+0x386>
    1af6:	00 c0       	rjmp	.+0      	; 0x1af8 <main+0x390>
    1af8:	00 00       	nop

	_delay_ms(500);
	lcd_clrscr();
    1afa:	0e 94 02 02 	call	0x404	; 0x404 <lcd_clrscr>

	lcd_gotoxy( 0, 0);
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S1:");
    1b06:	82 e2       	ldi	r24, 0x22	; 34
    1b08:	91 e0       	ldi	r25, 0x01	; 1
    1b0a:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 0, 1);
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S2:");
    1b16:	8e e1       	ldi	r24, 0x1E	; 30
    1b18:	91 e0       	ldi	r25, 0x01	; 1
    1b1a:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 0, 2);
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S3:");
    1b26:	8a e1       	ldi	r24, 0x1A	; 26
    1b28:	91 e0       	ldi	r25, 0x01	; 1
    1b2a:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 0, 3);
    1b2e:	63 e0       	ldi	r22, 0x03	; 3
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S4:");
    1b36:	86 e1       	ldi	r24, 0x16	; 22
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 11, 2);
    1b3e:	62 e0       	ldi	r22, 0x02	; 2
    1b40:	8b e0       	ldi	r24, 0x0B	; 11
    1b42:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S5:");
    1b46:	82 e1       	ldi	r24, 0x12	; 18
    1b48:	91 e0       	ldi	r25, 0x01	; 1
    1b4a:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
	lcd_gotoxy( 11, 3);
    1b4e:	63 e0       	ldi	r22, 0x03	; 3
    1b50:	8b e0       	ldi	r24, 0x0B	; 11
    1b52:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
	lcd_puts_P( "S6:");
    1b56:	8e e0       	ldi	r24, 0x0E	; 14
    1b58:	91 e0       	ldi	r25, 0x01	; 1
    1b5a:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
}
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
    1b5e:	94 e1       	ldi	r25, 0x14	; 20
    1b60:	c9 2e       	mov	r12, r25
    1b62:	d1 2c       	mov	r13, r1
		sei();
	//----------------------------------------------------	
		if(chyba1==0)
		{
		CurrentTemp1 = ds18b20_gettemp(&PORTC,PC0); // decicelsius
		cele = CurrentTemp1/10;
    1b64:	2a e0       	ldi	r18, 0x0A	; 10
    1b66:	22 2e       	mov	r2, r18
    1b68:	31 2c       	mov	r3, r1
		desatiny = ( CurrentTemp1 - (cele*10) );
    1b6a:	16 ef       	ldi	r17, 0xF6	; 246
		lcd_gotoxy( 3, 0);
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    1b6c:	37 e1       	ldi	r19, 0x17	; 23
    1b6e:	e3 2e       	mov	r14, r19
    1b70:	31 e0       	ldi	r19, 0x01	; 1
    1b72:	f3 2e       	mov	r15, r19

//------------main loop-------------------------------------
	while(1)
 	{

		wdt_reset(); 
    1b74:	a8 95       	wdr
		sei();
    1b76:	78 94       	sei
	//----------------------------------------------------	
		if(chyba1==0)
    1b78:	01 11       	cpse	r16, r1
    1b7a:	2e c0       	rjmp	.+92     	; 0x1bd8 <main+0x470>
		{
		CurrentTemp1 = ds18b20_gettemp(&PORTC,PC0); // decicelsius
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	88 e2       	ldi	r24, 0x28	; 40
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	0e 94 9d 03 	call	0x73a	; 0x73a <ds18b20_gettemp>
    1b86:	9c 01       	movw	r18, r24
    1b88:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <CurrentTemp1+0x1>
    1b8c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <CurrentTemp1>
		cele = CurrentTemp1/10;
    1b90:	b1 01       	movw	r22, r2
    1b92:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__divmodhi4>
    1b96:	4b 01       	movw	r8, r22
		desatiny = ( CurrentTemp1 - (cele*10) );
    1b98:	16 03       	mulsu	r17, r22
    1b9a:	50 01       	movw	r10, r0
    1b9c:	17 9f       	mul	r17, r23
    1b9e:	b0 0c       	add	r11, r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	a2 0e       	add	r10, r18
    1ba4:	b3 1e       	adc	r11, r19
		lcd_gotoxy( 3, 0);
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    1bae:	bf 92       	push	r11
    1bb0:	af 92       	push	r10
    1bb2:	9f 92       	push	r9
    1bb4:	8f 92       	push	r8
    1bb6:	ff 92       	push	r15
    1bb8:	ef 92       	push	r14
    1bba:	a0 ec       	ldi	r26, 0xC0	; 192
    1bbc:	b1 e0       	ldi	r27, 0x01	; 1
    1bbe:	bf 93       	push	r27
    1bc0:	af 93       	push	r26
    1bc2:	0e 94 53 14 	call	0x28a6	; 0x28a6 <sprintf>
		lcd_puts(CharBuffer);
    1bc6:	80 ec       	ldi	r24, 0xC0	; 192
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	0e 94 28 02 	call	0x450	; 0x450 <lcd_puts>
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 9, 0);
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	89 e0       	ldi	r24, 0x09	; 9
    1bdc:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	0e 94 08 02 	call	0x410	; 0x410 <lcd_putc>
		//lcd_putc(1);
		//lcd_putc(2);
	//----------------------------------------------------	
			
		if(chyba2==0)
    1be6:	59 81       	ldd	r21, Y+1	; 0x01
    1be8:	51 11       	cpse	r21, r1
    1bea:	2d c0       	rjmp	.+90     	; 0x1c46 <main+0x4de>
		{
		CurrentTemp2 = ds18b20_gettemp(&PORTC,PC1);
    1bec:	61 e0       	ldi	r22, 0x01	; 1
    1bee:	88 e2       	ldi	r24, 0x28	; 40
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	0e 94 9d 03 	call	0x73a	; 0x73a <ds18b20_gettemp>
    1bf6:	9c 01       	movw	r18, r24
    1bf8:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <CurrentTemp2+0x1>
    1bfc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <CurrentTemp2>
		cele = CurrentTemp2/10;
    1c00:	b1 01       	movw	r22, r2
    1c02:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__divmodhi4>
		desatiny = (CurrentTemp2 - (cele*10) );
    1c06:	16 03       	mulsu	r17, r22
    1c08:	c0 01       	movw	r24, r0
    1c0a:	17 9f       	mul	r17, r23
    1c0c:	90 0d       	add	r25, r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	28 0f       	add	r18, r24
    1c12:	39 1f       	adc	r19, r25
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    1c14:	3f 93       	push	r19
    1c16:	2f 93       	push	r18
    1c18:	7f 93       	push	r23
    1c1a:	6f 93       	push	r22
    1c1c:	ff 92       	push	r15
    1c1e:	ef 92       	push	r14
    1c20:	a0 ec       	ldi	r26, 0xC0	; 192
    1c22:	b1 e0       	ldi	r27, 0x01	; 1
    1c24:	bf 93       	push	r27
    1c26:	af 93       	push	r26
    1c28:	0e 94 53 14 	call	0x28a6	; 0x28a6 <sprintf>
		//sprintf( CharBuffer, "%i \xC6\n",CurrentTemp2);
		lcd_gotoxy( 3, 1);
    1c2c:	61 e0       	ldi	r22, 0x01	; 1
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1c34:	80 ec       	ldi	r24, 0xC0	; 192
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	0e 94 28 02 	call	0x450	; 0x450 <lcd_puts>
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 9, 1);
    1c46:	61 e0       	ldi	r22, 0x01	; 1
    1c48:	89 e0       	ldi	r24, 0x09	; 9
    1c4a:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	0e 94 08 02 	call	0x410	; 0x410 <lcd_putc>
			
		//_delay_ms(100);
	//----------------------------------------------------	
		if(chyba3==0)
    1c54:	5a 81       	ldd	r21, Y+2	; 0x02
    1c56:	51 11       	cpse	r21, r1
    1c58:	2d c0       	rjmp	.+90     	; 0x1cb4 <main+0x54c>
		{
		CurrentTemp3 = ds18b20_gettemp(&PORTC,PC2);
    1c5a:	62 e0       	ldi	r22, 0x02	; 2
    1c5c:	88 e2       	ldi	r24, 0x28	; 40
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	0e 94 9d 03 	call	0x73a	; 0x73a <ds18b20_gettemp>
    1c64:	9c 01       	movw	r18, r24
    1c66:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <CurrentTemp3+0x1>
    1c6a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <CurrentTemp3>
		cele = CurrentTemp3/10;
    1c6e:	b1 01       	movw	r22, r2
    1c70:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__divmodhi4>
		desatiny = (CurrentTemp3 - (cele*10) );
    1c74:	16 03       	mulsu	r17, r22
    1c76:	c0 01       	movw	r24, r0
    1c78:	17 9f       	mul	r17, r23
    1c7a:	90 0d       	add	r25, r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	28 0f       	add	r18, r24
    1c80:	39 1f       	adc	r19, r25
		
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    1c82:	3f 93       	push	r19
    1c84:	2f 93       	push	r18
    1c86:	7f 93       	push	r23
    1c88:	6f 93       	push	r22
    1c8a:	ff 92       	push	r15
    1c8c:	ef 92       	push	r14
    1c8e:	a0 ec       	ldi	r26, 0xC0	; 192
    1c90:	b1 e0       	ldi	r27, 0x01	; 1
    1c92:	bf 93       	push	r27
    1c94:	af 93       	push	r26
    1c96:	0e 94 53 14 	call	0x28a6	; 0x28a6 <sprintf>
		lcd_gotoxy( 3, 2);
    1c9a:	62 e0       	ldi	r22, 0x02	; 2
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1ca2:	80 ec       	ldi	r24, 0xC0	; 192
    1ca4:	91 e0       	ldi	r25, 0x01	; 1
    1ca6:	0e 94 28 02 	call	0x450	; 0x450 <lcd_puts>
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 9, 2);
    1cb4:	62 e0       	ldi	r22, 0x02	; 2
    1cb6:	89 e0       	ldi	r24, 0x09	; 9
    1cb8:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	0e 94 08 02 	call	0x410	; 0x410 <lcd_putc>
			
		//_delay_ms(100);
	//----------------------------------------------------	
		if(chyba4==0)
    1cc2:	5b 81       	ldd	r21, Y+3	; 0x03
    1cc4:	51 11       	cpse	r21, r1
    1cc6:	2d c0       	rjmp	.+90     	; 0x1d22 <main+0x5ba>
		{
		CurrentTemp4 = ds18b20_gettemp(&PORTC,PC3);
    1cc8:	63 e0       	ldi	r22, 0x03	; 3
    1cca:	88 e2       	ldi	r24, 0x28	; 40
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 9d 03 	call	0x73a	; 0x73a <ds18b20_gettemp>
    1cd2:	9c 01       	movw	r18, r24
    1cd4:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <CurrentTemp4+0x1>
    1cd8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <CurrentTemp4>
		cele = CurrentTemp4/10;
    1cdc:	b1 01       	movw	r22, r2
    1cde:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__divmodhi4>
		desatiny = (CurrentTemp4 - (cele*10) );
    1ce2:	16 03       	mulsu	r17, r22
    1ce4:	c0 01       	movw	r24, r0
    1ce6:	17 9f       	mul	r17, r23
    1ce8:	90 0d       	add	r25, r0
    1cea:	11 24       	eor	r1, r1
    1cec:	28 0f       	add	r18, r24
    1cee:	39 1f       	adc	r19, r25
		sprintf( CharBuffer, "%+i.%i\xC6\n",cele,desatiny);
    1cf0:	3f 93       	push	r19
    1cf2:	2f 93       	push	r18
    1cf4:	7f 93       	push	r23
    1cf6:	6f 93       	push	r22
    1cf8:	ff 92       	push	r15
    1cfa:	ef 92       	push	r14
    1cfc:	a0 ec       	ldi	r26, 0xC0	; 192
    1cfe:	b1 e0       	ldi	r27, 0x01	; 1
    1d00:	bf 93       	push	r27
    1d02:	af 93       	push	r26
    1d04:	0e 94 53 14 	call	0x28a6	; 0x28a6 <sprintf>
		lcd_gotoxy( 3, 3);
    1d08:	63 e0       	ldi	r22, 0x03	; 3
    1d0a:	83 e0       	ldi	r24, 0x03	; 3
    1d0c:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1d10:	80 ec       	ldi	r24, 0xC0	; 192
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	0e 94 28 02 	call	0x450	; 0x450 <lcd_puts>
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 9, 3);
    1d22:	63 e0       	ldi	r22, 0x03	; 3
    1d24:	89 e0       	ldi	r24, 0x09	; 9
    1d26:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	0e 94 08 02 	call	0x410	; 0x410 <lcd_putc>
			
		//_delay_ms(100);
	//----------------------------------------------------			
		if(chyba5==0)
    1d30:	5c 81       	ldd	r21, Y+4	; 0x04
    1d32:	51 11       	cpse	r21, r1
    1d34:	2f c0       	rjmp	.+94     	; 0x1d94 <main+0x62c>
		{
		CurrentTemp5 = ds18b20_gettemp(&PORTD,PD3);
    1d36:	63 e0       	ldi	r22, 0x03	; 3
    1d38:	8b e2       	ldi	r24, 0x2B	; 43
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	0e 94 9d 03 	call	0x73a	; 0x73a <ds18b20_gettemp>
    1d40:	9c 01       	movw	r18, r24
    1d42:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <CurrentTemp5+0x1>
    1d46:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <CurrentTemp5>
		cele = CurrentTemp5/10;
    1d4a:	b1 01       	movw	r22, r2
    1d4c:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__divmodhi4>
		desatiny = (CurrentTemp5 - (cele*10) );
    1d50:	16 03       	mulsu	r17, r22
    1d52:	c0 01       	movw	r24, r0
    1d54:	17 9f       	mul	r17, r23
    1d56:	90 0d       	add	r25, r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	28 0f       	add	r18, r24
    1d5c:	39 1f       	adc	r19, r25
		sprintf( CharBuffer, "%+i.%i",cele,desatiny);
    1d5e:	3f 93       	push	r19
    1d60:	2f 93       	push	r18
    1d62:	7f 93       	push	r23
    1d64:	6f 93       	push	r22
    1d66:	a0 e2       	ldi	r26, 0x20	; 32
    1d68:	b1 e0       	ldi	r27, 0x01	; 1
    1d6a:	bf 93       	push	r27
    1d6c:	af 93       	push	r26
    1d6e:	a0 ec       	ldi	r26, 0xC0	; 192
    1d70:	b1 e0       	ldi	r27, 0x01	; 1
    1d72:	bf 93       	push	r27
    1d74:	af 93       	push	r26
    1d76:	0e 94 53 14 	call	0x28a6	; 0x28a6 <sprintf>
		//sprintf( CharBuffer, "%i\xC6\n",CurrentTemp4);
		lcd_gotoxy( 14, 2);
    1d7a:	62 e0       	ldi	r22, 0x02	; 2
    1d7c:	8e e0       	ldi	r24, 0x0E	; 14
    1d7e:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1d82:	80 ec       	ldi	r24, 0xC0	; 192
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	0e 94 28 02 	call	0x450	; 0x450 <lcd_puts>
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 19, 2);
    1d94:	62 e0       	ldi	r22, 0x02	; 2
    1d96:	83 e1       	ldi	r24, 0x13	; 19
    1d98:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	0e 94 08 02 	call	0x410	; 0x410 <lcd_putc>
	//----------------------------------------------------			
		if(chyba6==0)
    1da2:	5d 81       	ldd	r21, Y+5	; 0x05
    1da4:	51 11       	cpse	r21, r1
    1da6:	2f c0       	rjmp	.+94     	; 0x1e06 <main+0x69e>
		{
		CurrentTemp6 = ds18b20_gettemp(&PORTD,PD4);
    1da8:	64 e0       	ldi	r22, 0x04	; 4
    1daa:	8b e2       	ldi	r24, 0x2B	; 43
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 9d 03 	call	0x73a	; 0x73a <ds18b20_gettemp>
    1db2:	9c 01       	movw	r18, r24
    1db4:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <CurrentTemp6+0x1>
    1db8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <CurrentTemp6>
		cele = CurrentTemp6/10;
    1dbc:	b1 01       	movw	r22, r2
    1dbe:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <__divmodhi4>
		desatiny = (CurrentTemp6 - (cele*10) );
    1dc2:	16 03       	mulsu	r17, r22
    1dc4:	c0 01       	movw	r24, r0
    1dc6:	17 9f       	mul	r17, r23
    1dc8:	90 0d       	add	r25, r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	28 0f       	add	r18, r24
    1dce:	39 1f       	adc	r19, r25
		sprintf( CharBuffer, "%+i.%i",cele,desatiny);
    1dd0:	3f 93       	push	r19
    1dd2:	2f 93       	push	r18
    1dd4:	7f 93       	push	r23
    1dd6:	6f 93       	push	r22
    1dd8:	a0 e2       	ldi	r26, 0x20	; 32
    1dda:	b1 e0       	ldi	r27, 0x01	; 1
    1ddc:	bf 93       	push	r27
    1dde:	af 93       	push	r26
    1de0:	a0 ec       	ldi	r26, 0xC0	; 192
    1de2:	b1 e0       	ldi	r27, 0x01	; 1
    1de4:	bf 93       	push	r27
    1de6:	af 93       	push	r26
    1de8:	0e 94 53 14 	call	0x28a6	; 0x28a6 <sprintf>
		//sprintf( CharBuffer, "%i\xC6\n",CurrentTemp4);
		lcd_gotoxy( 14, 3);
    1dec:	63 e0       	ldi	r22, 0x03	; 3
    1dee:	8e e0       	ldi	r24, 0x0E	; 14
    1df0:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1df4:	80 ec       	ldi	r24, 0xC0	; 192
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	0e 94 28 02 	call	0x450	; 0x450 <lcd_puts>
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 19, 3);
    1e06:	63 e0       	ldi	r22, 0x03	; 3
    1e08:	83 e1       	ldi	r24, 0x13	; 19
    1e0a:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD	
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	0e 94 08 02 	call	0x410	; 0x410 <lcd_putc>
		//_delay_ms(100);
	//----------------------------------------------------			
		
	//get temperature BMP085
		d = bmp085_gettemperature();
    1e14:	0e 94 60 07 	call	0xec0	; 0xec0 <bmp085_gettemperature>
    1e18:	2b 01       	movw	r4, r22
    1e1a:	3c 01       	movw	r6, r24
    1e1c:	60 93 b2 01 	sts	0x01B2, r22	; 0x8001b2 <d>
    1e20:	70 93 b3 01 	sts	0x01B3, r23	; 0x8001b3 <d+0x1>
    1e24:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <d+0x2>
    1e28:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <d+0x3>
		cele = d/10;
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e2       	ldi	r20, 0x20	; 32
    1e32:	51 e4       	ldi	r21, 0x41	; 65
    1e34:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <__divsf3>
    1e38:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__fixsfsi>
    1e3c:	4b 01       	movw	r8, r22
    1e3e:	5c 01       	movw	r10, r24
		desatiny = d - cele*10;
    1e40:	5a e0       	ldi	r21, 0x0A	; 10
    1e42:	58 9d       	mul	r21, r8
    1e44:	b0 01       	movw	r22, r0
    1e46:	59 9d       	mul	r21, r9
    1e48:	70 0d       	add	r23, r0
    1e4a:	11 24       	eor	r1, r1
    1e4c:	07 2e       	mov	r0, r23
    1e4e:	00 0c       	add	r0, r0
    1e50:	88 0b       	sbc	r24, r24
    1e52:	99 0b       	sbc	r25, r25
    1e54:	0e 94 a4 11 	call	0x2348	; 0x2348 <__floatsisf>
    1e58:	9b 01       	movw	r18, r22
    1e5a:	ac 01       	movw	r20, r24
    1e5c:	c3 01       	movw	r24, r6
    1e5e:	b2 01       	movw	r22, r4
    1e60:	0e 94 8d 10 	call	0x211a	; 0x211a <__subsf3>
    1e64:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__fixsfsi>
		sprintf( CharBuffer, "%+i.%i",cele,desatiny);
    1e68:	7f 93       	push	r23
    1e6a:	6f 93       	push	r22
    1e6c:	9f 92       	push	r9
    1e6e:	8f 92       	push	r8
    1e70:	a0 e2       	ldi	r26, 0x20	; 32
    1e72:	b1 e0       	ldi	r27, 0x01	; 1
    1e74:	bf 93       	push	r27
    1e76:	af 93       	push	r26
    1e78:	a0 ec       	ldi	r26, 0xC0	; 192
    1e7a:	b1 e0       	ldi	r27, 0x01	; 1
    1e7c:	bf 93       	push	r27
    1e7e:	af 93       	push	r26
    1e80:	0e 94 53 14 	call	0x28a6	; 0x28a6 <sprintf>
		//ltoa((d*10), printbuff, 10); // for long conversion function to string
		lcd_gotoxy( 14, 1);
    1e84:	61 e0       	ldi	r22, 0x01	; 1
    1e86:	8e e0       	ldi	r24, 0x0E	; 14
    1e88:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1e8c:	80 ec       	ldi	r24, 0xC0	; 192
    1e8e:	91 e0       	ldi	r25, 0x01	; 1
    1e90:	0e 94 28 02 	call	0x450	; 0x450 <lcd_puts>
		//lcd_puts( printbuff);
		lcd_putc(0); // print user character on LCD
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	0e 94 08 02 	call	0x410	; 0x410 <lcd_putc>
		//_delay_ms(100);
		
		if(press==20)
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	54 e1       	ldi	r21, 0x14	; 20
    1ea6:	c5 16       	cp	r12, r21
    1ea8:	d1 04       	cpc	r13, r1
    1eaa:	89 f5       	brne	.+98     	; 0x1f0e <main+0x7a6>
		{
		//get pressure BMP085
		l = bmp085_getpressure(gAltitudeCorr);			// in Pa
    1eac:	60 91 9d 01 	lds	r22, 0x019D	; 0x80019d <gAltitudeCorr>
    1eb0:	70 91 9e 01 	lds	r23, 0x019E	; 0x80019e <gAltitudeCorr+0x1>
    1eb4:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <gAltitudeCorr+0x2>
    1eb8:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <gAltitudeCorr+0x3>
    1ebc:	0e 94 79 07 	call	0xef2	; 0xef2 <bmp085_getpressure>
    1ec0:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <l>
    1ec4:	70 93 a2 01 	sts	0x01A2, r23	; 0x8001a2 <l+0x1>
    1ec8:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <l+0x2>
    1ecc:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <l+0x3>
		//l = bmp085_getpressure(gAltitudeCorr*100); // in hPa 
		//ltoa(l, printbuff, 10);  				// convert long to string , for UART
		lcd_gotoxy( 17, 0);
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	81 e1       	ldi	r24, 0x11	; 17
    1ed4:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
		lcd_puts_P( "hPa");
    1ed8:	8a e0       	ldi	r24, 0x0A	; 10
    1eda:	91 e0       	ldi	r25, 0x01	; 1
    1edc:	0e 94 34 02 	call	0x468	; 0x468 <lcd_puts_p>
		lcd_gotoxy( 13, 0);
    1ee0:	60 e0       	ldi	r22, 0x00	; 0
    1ee2:	8d e0       	ldi	r24, 0x0D	; 13
    1ee4:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    1ee8:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <l>
    1eec:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <l+0x1>
    1ef0:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <l+0x2>
    1ef4:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <l+0x3>
    1ef8:	2a e0       	ldi	r18, 0x0A	; 10
    1efa:	4b ed       	ldi	r20, 0xDB	; 219
    1efc:	52 e0       	ldi	r21, 0x02	; 2
    1efe:	0e 94 22 14 	call	0x2844	; 0x2844 <__ltoa_ncheck>
		ltoa((l) , printbuff, 10); // in hPa (/100) in relative pressure to sea level, bmp085.h , for LCD
		lcd_puts( printbuff);
    1f02:	8b ed       	ldi	r24, 0xDB	; 219
    1f04:	92 e0       	ldi	r25, 0x02	; 2
    1f06:	0e 94 28 02 	call	0x450	; 0x450 <lcd_puts>
		press=0;
    1f0a:	c1 2c       	mov	r12, r1
    1f0c:	d1 2c       	mov	r13, r1
		}	
		//wdt_reset();
		//modbus-------------------------
		holdingRegisters[0]=CurrentTemp1;
    1f0e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <CurrentTemp1>
    1f12:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <CurrentTemp1+0x1>
    1f16:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1f1a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		holdingRegisters[1]=CurrentTemp2;
    1f1e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <CurrentTemp2>
    1f22:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <CurrentTemp2+0x1>
    1f26:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    1f2a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
		holdingRegisters[2]=CurrentTemp3;
    1f2e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <CurrentTemp3>
    1f32:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <CurrentTemp3+0x1>
    1f36:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_start+0x5>
    1f3a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
		holdingRegisters[3]=CurrentTemp4;
    1f3e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <CurrentTemp4>
    1f42:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <CurrentTemp4+0x1>
    1f46:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_start+0x7>
    1f4a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_start+0x6>
		holdingRegisters[4]=CurrentTemp5;
    1f4e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <CurrentTemp5>
    1f52:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <CurrentTemp5+0x1>
    1f56:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_start+0x9>
    1f5a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_start+0x8>
		holdingRegisters[5]=CurrentTemp6;
    1f5e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <CurrentTemp6>
    1f62:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <CurrentTemp6+0x1>
    1f66:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_start+0xb>
    1f6a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_start+0xa>
		holdingRegisters[6]= l/100; //hPa
    1f6e:	60 91 a1 01 	lds	r22, 0x01A1	; 0x8001a1 <l>
    1f72:	70 91 a2 01 	lds	r23, 0x01A2	; 0x8001a2 <l+0x1>
    1f76:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <l+0x2>
    1f7a:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <l+0x3>
    1f7e:	24 e6       	ldi	r18, 0x64	; 100
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	40 e0       	ldi	r20, 0x00	; 0
    1f84:	50 e0       	ldi	r21, 0x00	; 0
    1f86:	0e 94 32 10 	call	0x2064	; 0x2064 <__divmodsi4>
    1f8a:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_start+0xd>
    1f8e:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_start+0xc>
		holdingRegisters[7]= d;
    1f92:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <d>
    1f96:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <d+0x1>
    1f9a:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <d+0x2>
    1f9e:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <d+0x3>
    1fa2:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__fixunssfsi>
    1fa6:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <__data_start+0xf>
    1faa:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_start+0xe>
		// end of loop--------------------
		// enable interrupt
		sei();
    1fae:	78 94       	sei
    1fb0:	88 ee       	ldi	r24, 0xE8	; 232
    1fb2:	a8 2e       	mov	r10, r24
    1fb4:	83 e0       	ldi	r24, 0x03	; 3
    1fb6:	b8 2e       	mov	r11, r24
	// loop for communication, and delay between reading temperatures
		for(j=0;j<1000;j++)
			{
			modbusGet();
    1fb8:	0e 94 27 01 	call	0x24e	; 0x24e <modbusGet>
    1fbc:	8f e3       	ldi	r24, 0x3F	; 63
    1fbe:	9c e9       	ldi	r25, 0x9C	; 156
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <main+0x858>
    1fc4:	00 c0       	rjmp	.+0      	; 0x1fc6 <main+0x85e>
    1fc6:	00 00       	nop
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	a9 1a       	sub	r10, r25
    1fcc:	b1 08       	sbc	r11, r1
		holdingRegisters[7]= d;
		// end of loop--------------------
		// enable interrupt
		sei();
	// loop for communication, and delay between reading temperatures
		for(j=0;j<1000;j++)
    1fce:	a1 f7       	brne	.-24     	; 0x1fb8 <main+0x850>
			{
			modbusGet();
			_delay_ms(10);
			}//for(j
		press++; // increment press - more delay for measurment of atmospheric pressure
    1fd0:	af ef       	ldi	r26, 0xFF	; 255
    1fd2:	ca 1a       	sub	r12, r26
    1fd4:	da 0a       	sbc	r13, r26

	}	// while
    1fd6:	ce cd       	rjmp	.-1124   	; 0x1b74 <main+0x40c>

00001fd8 <__mulsi3>:
    1fd8:	db 01       	movw	r26, r22
    1fda:	8f 93       	push	r24
    1fdc:	9f 93       	push	r25
    1fde:	0e 94 57 10 	call	0x20ae	; 0x20ae <__muluhisi3>
    1fe2:	bf 91       	pop	r27
    1fe4:	af 91       	pop	r26
    1fe6:	a2 9f       	mul	r26, r18
    1fe8:	80 0d       	add	r24, r0
    1fea:	91 1d       	adc	r25, r1
    1fec:	a3 9f       	mul	r26, r19
    1fee:	90 0d       	add	r25, r0
    1ff0:	b2 9f       	mul	r27, r18
    1ff2:	90 0d       	add	r25, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	08 95       	ret

00001ff8 <__divmodhi4>:
    1ff8:	97 fb       	bst	r25, 7
    1ffa:	07 2e       	mov	r0, r23
    1ffc:	16 f4       	brtc	.+4      	; 0x2002 <__divmodhi4+0xa>
    1ffe:	00 94       	com	r0
    2000:	07 d0       	rcall	.+14     	; 0x2010 <__divmodhi4_neg1>
    2002:	77 fd       	sbrc	r23, 7
    2004:	09 d0       	rcall	.+18     	; 0x2018 <__divmodhi4_neg2>
    2006:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__udivmodhi4>
    200a:	07 fc       	sbrc	r0, 7
    200c:	05 d0       	rcall	.+10     	; 0x2018 <__divmodhi4_neg2>
    200e:	3e f4       	brtc	.+14     	; 0x201e <__divmodhi4_exit>

00002010 <__divmodhi4_neg1>:
    2010:	90 95       	com	r25
    2012:	81 95       	neg	r24
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	08 95       	ret

00002018 <__divmodhi4_neg2>:
    2018:	70 95       	com	r23
    201a:	61 95       	neg	r22
    201c:	7f 4f       	sbci	r23, 0xFF	; 255

0000201e <__divmodhi4_exit>:
    201e:	08 95       	ret

00002020 <__udivmodsi4>:
    2020:	a1 e2       	ldi	r26, 0x21	; 33
    2022:	1a 2e       	mov	r1, r26
    2024:	aa 1b       	sub	r26, r26
    2026:	bb 1b       	sub	r27, r27
    2028:	fd 01       	movw	r30, r26
    202a:	0d c0       	rjmp	.+26     	; 0x2046 <__udivmodsi4_ep>

0000202c <__udivmodsi4_loop>:
    202c:	aa 1f       	adc	r26, r26
    202e:	bb 1f       	adc	r27, r27
    2030:	ee 1f       	adc	r30, r30
    2032:	ff 1f       	adc	r31, r31
    2034:	a2 17       	cp	r26, r18
    2036:	b3 07       	cpc	r27, r19
    2038:	e4 07       	cpc	r30, r20
    203a:	f5 07       	cpc	r31, r21
    203c:	20 f0       	brcs	.+8      	; 0x2046 <__udivmodsi4_ep>
    203e:	a2 1b       	sub	r26, r18
    2040:	b3 0b       	sbc	r27, r19
    2042:	e4 0b       	sbc	r30, r20
    2044:	f5 0b       	sbc	r31, r21

00002046 <__udivmodsi4_ep>:
    2046:	66 1f       	adc	r22, r22
    2048:	77 1f       	adc	r23, r23
    204a:	88 1f       	adc	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	1a 94       	dec	r1
    2050:	69 f7       	brne	.-38     	; 0x202c <__udivmodsi4_loop>
    2052:	60 95       	com	r22
    2054:	70 95       	com	r23
    2056:	80 95       	com	r24
    2058:	90 95       	com	r25
    205a:	9b 01       	movw	r18, r22
    205c:	ac 01       	movw	r20, r24
    205e:	bd 01       	movw	r22, r26
    2060:	cf 01       	movw	r24, r30
    2062:	08 95       	ret

00002064 <__divmodsi4>:
    2064:	05 2e       	mov	r0, r21
    2066:	97 fb       	bst	r25, 7
    2068:	1e f4       	brtc	.+6      	; 0x2070 <__divmodsi4+0xc>
    206a:	00 94       	com	r0
    206c:	0e 94 49 10 	call	0x2092	; 0x2092 <__negsi2>
    2070:	57 fd       	sbrc	r21, 7
    2072:	07 d0       	rcall	.+14     	; 0x2082 <__divmodsi4_neg2>
    2074:	0e 94 10 10 	call	0x2020	; 0x2020 <__udivmodsi4>
    2078:	07 fc       	sbrc	r0, 7
    207a:	03 d0       	rcall	.+6      	; 0x2082 <__divmodsi4_neg2>
    207c:	4e f4       	brtc	.+18     	; 0x2090 <__divmodsi4_exit>
    207e:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__negsi2>

00002082 <__divmodsi4_neg2>:
    2082:	50 95       	com	r21
    2084:	40 95       	com	r20
    2086:	30 95       	com	r19
    2088:	21 95       	neg	r18
    208a:	3f 4f       	sbci	r19, 0xFF	; 255
    208c:	4f 4f       	sbci	r20, 0xFF	; 255
    208e:	5f 4f       	sbci	r21, 0xFF	; 255

00002090 <__divmodsi4_exit>:
    2090:	08 95       	ret

00002092 <__negsi2>:
    2092:	90 95       	com	r25
    2094:	80 95       	com	r24
    2096:	70 95       	com	r23
    2098:	61 95       	neg	r22
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	8f 4f       	sbci	r24, 0xFF	; 255
    209e:	9f 4f       	sbci	r25, 0xFF	; 255
    20a0:	08 95       	ret

000020a2 <__tablejump2__>:
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	05 90       	lpm	r0, Z+
    20a8:	f4 91       	lpm	r31, Z
    20aa:	e0 2d       	mov	r30, r0
    20ac:	09 94       	ijmp

000020ae <__muluhisi3>:
    20ae:	0e 94 7e 10 	call	0x20fc	; 0x20fc <__umulhisi3>
    20b2:	a5 9f       	mul	r26, r21
    20b4:	90 0d       	add	r25, r0
    20b6:	b4 9f       	mul	r27, r20
    20b8:	90 0d       	add	r25, r0
    20ba:	a4 9f       	mul	r26, r20
    20bc:	80 0d       	add	r24, r0
    20be:	91 1d       	adc	r25, r1
    20c0:	11 24       	eor	r1, r1
    20c2:	08 95       	ret

000020c4 <__mulshisi3>:
    20c4:	b7 ff       	sbrs	r27, 7
    20c6:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <__muluhisi3>

000020ca <__mulohisi3>:
    20ca:	0e 94 57 10 	call	0x20ae	; 0x20ae <__muluhisi3>
    20ce:	82 1b       	sub	r24, r18
    20d0:	93 0b       	sbc	r25, r19
    20d2:	08 95       	ret

000020d4 <__udivmodhi4>:
    20d4:	aa 1b       	sub	r26, r26
    20d6:	bb 1b       	sub	r27, r27
    20d8:	51 e1       	ldi	r21, 0x11	; 17
    20da:	07 c0       	rjmp	.+14     	; 0x20ea <__udivmodhi4_ep>

000020dc <__udivmodhi4_loop>:
    20dc:	aa 1f       	adc	r26, r26
    20de:	bb 1f       	adc	r27, r27
    20e0:	a6 17       	cp	r26, r22
    20e2:	b7 07       	cpc	r27, r23
    20e4:	10 f0       	brcs	.+4      	; 0x20ea <__udivmodhi4_ep>
    20e6:	a6 1b       	sub	r26, r22
    20e8:	b7 0b       	sbc	r27, r23

000020ea <__udivmodhi4_ep>:
    20ea:	88 1f       	adc	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	5a 95       	dec	r21
    20f0:	a9 f7       	brne	.-22     	; 0x20dc <__udivmodhi4_loop>
    20f2:	80 95       	com	r24
    20f4:	90 95       	com	r25
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	08 95       	ret

000020fc <__umulhisi3>:
    20fc:	a2 9f       	mul	r26, r18
    20fe:	b0 01       	movw	r22, r0
    2100:	b3 9f       	mul	r27, r19
    2102:	c0 01       	movw	r24, r0
    2104:	a3 9f       	mul	r26, r19
    2106:	70 0d       	add	r23, r0
    2108:	81 1d       	adc	r24, r1
    210a:	11 24       	eor	r1, r1
    210c:	91 1d       	adc	r25, r1
    210e:	b2 9f       	mul	r27, r18
    2110:	70 0d       	add	r23, r0
    2112:	81 1d       	adc	r24, r1
    2114:	11 24       	eor	r1, r1
    2116:	91 1d       	adc	r25, r1
    2118:	08 95       	ret

0000211a <__subsf3>:
    211a:	50 58       	subi	r21, 0x80	; 128

0000211c <__addsf3>:
    211c:	bb 27       	eor	r27, r27
    211e:	aa 27       	eor	r26, r26
    2120:	0e 94 a5 10 	call	0x214a	; 0x214a <__addsf3x>
    2124:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__fp_round>
    2128:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fp_pscA>
    212c:	38 f0       	brcs	.+14     	; 0x213c <__addsf3+0x20>
    212e:	0e 94 ef 11 	call	0x23de	; 0x23de <__fp_pscB>
    2132:	20 f0       	brcs	.+8      	; 0x213c <__addsf3+0x20>
    2134:	39 f4       	brne	.+14     	; 0x2144 <__addsf3+0x28>
    2136:	9f 3f       	cpi	r25, 0xFF	; 255
    2138:	19 f4       	brne	.+6      	; 0x2140 <__addsf3+0x24>
    213a:	26 f4       	brtc	.+8      	; 0x2144 <__addsf3+0x28>
    213c:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__fp_nan>
    2140:	0e f4       	brtc	.+2      	; 0x2144 <__addsf3+0x28>
    2142:	e0 95       	com	r30
    2144:	e7 fb       	bst	r30, 7
    2146:	0c 94 df 11 	jmp	0x23be	; 0x23be <__fp_inf>

0000214a <__addsf3x>:
    214a:	e9 2f       	mov	r30, r25
    214c:	0e 94 07 12 	call	0x240e	; 0x240e <__fp_split3>
    2150:	58 f3       	brcs	.-42     	; 0x2128 <__addsf3+0xc>
    2152:	ba 17       	cp	r27, r26
    2154:	62 07       	cpc	r22, r18
    2156:	73 07       	cpc	r23, r19
    2158:	84 07       	cpc	r24, r20
    215a:	95 07       	cpc	r25, r21
    215c:	20 f0       	brcs	.+8      	; 0x2166 <__addsf3x+0x1c>
    215e:	79 f4       	brne	.+30     	; 0x217e <__addsf3x+0x34>
    2160:	a6 f5       	brtc	.+104    	; 0x21ca <__addsf3x+0x80>
    2162:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__fp_zero>
    2166:	0e f4       	brtc	.+2      	; 0x216a <__addsf3x+0x20>
    2168:	e0 95       	com	r30
    216a:	0b 2e       	mov	r0, r27
    216c:	ba 2f       	mov	r27, r26
    216e:	a0 2d       	mov	r26, r0
    2170:	0b 01       	movw	r0, r22
    2172:	b9 01       	movw	r22, r18
    2174:	90 01       	movw	r18, r0
    2176:	0c 01       	movw	r0, r24
    2178:	ca 01       	movw	r24, r20
    217a:	a0 01       	movw	r20, r0
    217c:	11 24       	eor	r1, r1
    217e:	ff 27       	eor	r31, r31
    2180:	59 1b       	sub	r21, r25
    2182:	99 f0       	breq	.+38     	; 0x21aa <__addsf3x+0x60>
    2184:	59 3f       	cpi	r21, 0xF9	; 249
    2186:	50 f4       	brcc	.+20     	; 0x219c <__addsf3x+0x52>
    2188:	50 3e       	cpi	r21, 0xE0	; 224
    218a:	68 f1       	brcs	.+90     	; 0x21e6 <__addsf3x+0x9c>
    218c:	1a 16       	cp	r1, r26
    218e:	f0 40       	sbci	r31, 0x00	; 0
    2190:	a2 2f       	mov	r26, r18
    2192:	23 2f       	mov	r18, r19
    2194:	34 2f       	mov	r19, r20
    2196:	44 27       	eor	r20, r20
    2198:	58 5f       	subi	r21, 0xF8	; 248
    219a:	f3 cf       	rjmp	.-26     	; 0x2182 <__addsf3x+0x38>
    219c:	46 95       	lsr	r20
    219e:	37 95       	ror	r19
    21a0:	27 95       	ror	r18
    21a2:	a7 95       	ror	r26
    21a4:	f0 40       	sbci	r31, 0x00	; 0
    21a6:	53 95       	inc	r21
    21a8:	c9 f7       	brne	.-14     	; 0x219c <__addsf3x+0x52>
    21aa:	7e f4       	brtc	.+30     	; 0x21ca <__addsf3x+0x80>
    21ac:	1f 16       	cp	r1, r31
    21ae:	ba 0b       	sbc	r27, r26
    21b0:	62 0b       	sbc	r22, r18
    21b2:	73 0b       	sbc	r23, r19
    21b4:	84 0b       	sbc	r24, r20
    21b6:	ba f0       	brmi	.+46     	; 0x21e6 <__addsf3x+0x9c>
    21b8:	91 50       	subi	r25, 0x01	; 1
    21ba:	a1 f0       	breq	.+40     	; 0x21e4 <__addsf3x+0x9a>
    21bc:	ff 0f       	add	r31, r31
    21be:	bb 1f       	adc	r27, r27
    21c0:	66 1f       	adc	r22, r22
    21c2:	77 1f       	adc	r23, r23
    21c4:	88 1f       	adc	r24, r24
    21c6:	c2 f7       	brpl	.-16     	; 0x21b8 <__addsf3x+0x6e>
    21c8:	0e c0       	rjmp	.+28     	; 0x21e6 <__addsf3x+0x9c>
    21ca:	ba 0f       	add	r27, r26
    21cc:	62 1f       	adc	r22, r18
    21ce:	73 1f       	adc	r23, r19
    21d0:	84 1f       	adc	r24, r20
    21d2:	48 f4       	brcc	.+18     	; 0x21e6 <__addsf3x+0x9c>
    21d4:	87 95       	ror	r24
    21d6:	77 95       	ror	r23
    21d8:	67 95       	ror	r22
    21da:	b7 95       	ror	r27
    21dc:	f7 95       	ror	r31
    21de:	9e 3f       	cpi	r25, 0xFE	; 254
    21e0:	08 f0       	brcs	.+2      	; 0x21e4 <__addsf3x+0x9a>
    21e2:	b0 cf       	rjmp	.-160    	; 0x2144 <__addsf3+0x28>
    21e4:	93 95       	inc	r25
    21e6:	88 0f       	add	r24, r24
    21e8:	08 f0       	brcs	.+2      	; 0x21ec <__addsf3x+0xa2>
    21ea:	99 27       	eor	r25, r25
    21ec:	ee 0f       	add	r30, r30
    21ee:	97 95       	ror	r25
    21f0:	87 95       	ror	r24
    21f2:	08 95       	ret

000021f4 <__divsf3>:
    21f4:	0e 94 0e 11 	call	0x221c	; 0x221c <__divsf3x>
    21f8:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__fp_round>
    21fc:	0e 94 ef 11 	call	0x23de	; 0x23de <__fp_pscB>
    2200:	58 f0       	brcs	.+22     	; 0x2218 <__divsf3+0x24>
    2202:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fp_pscA>
    2206:	40 f0       	brcs	.+16     	; 0x2218 <__divsf3+0x24>
    2208:	29 f4       	brne	.+10     	; 0x2214 <__divsf3+0x20>
    220a:	5f 3f       	cpi	r21, 0xFF	; 255
    220c:	29 f0       	breq	.+10     	; 0x2218 <__divsf3+0x24>
    220e:	0c 94 df 11 	jmp	0x23be	; 0x23be <__fp_inf>
    2212:	51 11       	cpse	r21, r1
    2214:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_szero>
    2218:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__fp_nan>

0000221c <__divsf3x>:
    221c:	0e 94 07 12 	call	0x240e	; 0x240e <__fp_split3>
    2220:	68 f3       	brcs	.-38     	; 0x21fc <__divsf3+0x8>

00002222 <__divsf3_pse>:
    2222:	99 23       	and	r25, r25
    2224:	b1 f3       	breq	.-20     	; 0x2212 <__divsf3+0x1e>
    2226:	55 23       	and	r21, r21
    2228:	91 f3       	breq	.-28     	; 0x220e <__divsf3+0x1a>
    222a:	95 1b       	sub	r25, r21
    222c:	55 0b       	sbc	r21, r21
    222e:	bb 27       	eor	r27, r27
    2230:	aa 27       	eor	r26, r26
    2232:	62 17       	cp	r22, r18
    2234:	73 07       	cpc	r23, r19
    2236:	84 07       	cpc	r24, r20
    2238:	38 f0       	brcs	.+14     	; 0x2248 <__divsf3_pse+0x26>
    223a:	9f 5f       	subi	r25, 0xFF	; 255
    223c:	5f 4f       	sbci	r21, 0xFF	; 255
    223e:	22 0f       	add	r18, r18
    2240:	33 1f       	adc	r19, r19
    2242:	44 1f       	adc	r20, r20
    2244:	aa 1f       	adc	r26, r26
    2246:	a9 f3       	breq	.-22     	; 0x2232 <__divsf3_pse+0x10>
    2248:	35 d0       	rcall	.+106    	; 0x22b4 <__divsf3_pse+0x92>
    224a:	0e 2e       	mov	r0, r30
    224c:	3a f0       	brmi	.+14     	; 0x225c <__divsf3_pse+0x3a>
    224e:	e0 e8       	ldi	r30, 0x80	; 128
    2250:	32 d0       	rcall	.+100    	; 0x22b6 <__divsf3_pse+0x94>
    2252:	91 50       	subi	r25, 0x01	; 1
    2254:	50 40       	sbci	r21, 0x00	; 0
    2256:	e6 95       	lsr	r30
    2258:	00 1c       	adc	r0, r0
    225a:	ca f7       	brpl	.-14     	; 0x224e <__divsf3_pse+0x2c>
    225c:	2b d0       	rcall	.+86     	; 0x22b4 <__divsf3_pse+0x92>
    225e:	fe 2f       	mov	r31, r30
    2260:	29 d0       	rcall	.+82     	; 0x22b4 <__divsf3_pse+0x92>
    2262:	66 0f       	add	r22, r22
    2264:	77 1f       	adc	r23, r23
    2266:	88 1f       	adc	r24, r24
    2268:	bb 1f       	adc	r27, r27
    226a:	26 17       	cp	r18, r22
    226c:	37 07       	cpc	r19, r23
    226e:	48 07       	cpc	r20, r24
    2270:	ab 07       	cpc	r26, r27
    2272:	b0 e8       	ldi	r27, 0x80	; 128
    2274:	09 f0       	breq	.+2      	; 0x2278 <__divsf3_pse+0x56>
    2276:	bb 0b       	sbc	r27, r27
    2278:	80 2d       	mov	r24, r0
    227a:	bf 01       	movw	r22, r30
    227c:	ff 27       	eor	r31, r31
    227e:	93 58       	subi	r25, 0x83	; 131
    2280:	5f 4f       	sbci	r21, 0xFF	; 255
    2282:	3a f0       	brmi	.+14     	; 0x2292 <__divsf3_pse+0x70>
    2284:	9e 3f       	cpi	r25, 0xFE	; 254
    2286:	51 05       	cpc	r21, r1
    2288:	78 f0       	brcs	.+30     	; 0x22a8 <__divsf3_pse+0x86>
    228a:	0c 94 df 11 	jmp	0x23be	; 0x23be <__fp_inf>
    228e:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_szero>
    2292:	5f 3f       	cpi	r21, 0xFF	; 255
    2294:	e4 f3       	brlt	.-8      	; 0x228e <__divsf3_pse+0x6c>
    2296:	98 3e       	cpi	r25, 0xE8	; 232
    2298:	d4 f3       	brlt	.-12     	; 0x228e <__divsf3_pse+0x6c>
    229a:	86 95       	lsr	r24
    229c:	77 95       	ror	r23
    229e:	67 95       	ror	r22
    22a0:	b7 95       	ror	r27
    22a2:	f7 95       	ror	r31
    22a4:	9f 5f       	subi	r25, 0xFF	; 255
    22a6:	c9 f7       	brne	.-14     	; 0x229a <__divsf3_pse+0x78>
    22a8:	88 0f       	add	r24, r24
    22aa:	91 1d       	adc	r25, r1
    22ac:	96 95       	lsr	r25
    22ae:	87 95       	ror	r24
    22b0:	97 f9       	bld	r25, 7
    22b2:	08 95       	ret
    22b4:	e1 e0       	ldi	r30, 0x01	; 1
    22b6:	66 0f       	add	r22, r22
    22b8:	77 1f       	adc	r23, r23
    22ba:	88 1f       	adc	r24, r24
    22bc:	bb 1f       	adc	r27, r27
    22be:	62 17       	cp	r22, r18
    22c0:	73 07       	cpc	r23, r19
    22c2:	84 07       	cpc	r24, r20
    22c4:	ba 07       	cpc	r27, r26
    22c6:	20 f0       	brcs	.+8      	; 0x22d0 <__divsf3_pse+0xae>
    22c8:	62 1b       	sub	r22, r18
    22ca:	73 0b       	sbc	r23, r19
    22cc:	84 0b       	sbc	r24, r20
    22ce:	ba 0b       	sbc	r27, r26
    22d0:	ee 1f       	adc	r30, r30
    22d2:	88 f7       	brcc	.-30     	; 0x22b6 <__divsf3_pse+0x94>
    22d4:	e0 95       	com	r30
    22d6:	08 95       	ret

000022d8 <__fixsfsi>:
    22d8:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__fixunssfsi>
    22dc:	68 94       	set
    22de:	b1 11       	cpse	r27, r1
    22e0:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_szero>
    22e4:	08 95       	ret

000022e6 <__fixunssfsi>:
    22e6:	0e 94 0f 12 	call	0x241e	; 0x241e <__fp_splitA>
    22ea:	88 f0       	brcs	.+34     	; 0x230e <__fixunssfsi+0x28>
    22ec:	9f 57       	subi	r25, 0x7F	; 127
    22ee:	98 f0       	brcs	.+38     	; 0x2316 <__fixunssfsi+0x30>
    22f0:	b9 2f       	mov	r27, r25
    22f2:	99 27       	eor	r25, r25
    22f4:	b7 51       	subi	r27, 0x17	; 23
    22f6:	b0 f0       	brcs	.+44     	; 0x2324 <__fixunssfsi+0x3e>
    22f8:	e1 f0       	breq	.+56     	; 0x2332 <__fixunssfsi+0x4c>
    22fa:	66 0f       	add	r22, r22
    22fc:	77 1f       	adc	r23, r23
    22fe:	88 1f       	adc	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	1a f0       	brmi	.+6      	; 0x230a <__fixunssfsi+0x24>
    2304:	ba 95       	dec	r27
    2306:	c9 f7       	brne	.-14     	; 0x22fa <__fixunssfsi+0x14>
    2308:	14 c0       	rjmp	.+40     	; 0x2332 <__fixunssfsi+0x4c>
    230a:	b1 30       	cpi	r27, 0x01	; 1
    230c:	91 f0       	breq	.+36     	; 0x2332 <__fixunssfsi+0x4c>
    230e:	0e 94 29 12 	call	0x2452	; 0x2452 <__fp_zero>
    2312:	b1 e0       	ldi	r27, 0x01	; 1
    2314:	08 95       	ret
    2316:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__fp_zero>
    231a:	67 2f       	mov	r22, r23
    231c:	78 2f       	mov	r23, r24
    231e:	88 27       	eor	r24, r24
    2320:	b8 5f       	subi	r27, 0xF8	; 248
    2322:	39 f0       	breq	.+14     	; 0x2332 <__fixunssfsi+0x4c>
    2324:	b9 3f       	cpi	r27, 0xF9	; 249
    2326:	cc f3       	brlt	.-14     	; 0x231a <__fixunssfsi+0x34>
    2328:	86 95       	lsr	r24
    232a:	77 95       	ror	r23
    232c:	67 95       	ror	r22
    232e:	b3 95       	inc	r27
    2330:	d9 f7       	brne	.-10     	; 0x2328 <__fixunssfsi+0x42>
    2332:	3e f4       	brtc	.+14     	; 0x2342 <__fixunssfsi+0x5c>
    2334:	90 95       	com	r25
    2336:	80 95       	com	r24
    2338:	70 95       	com	r23
    233a:	61 95       	neg	r22
    233c:	7f 4f       	sbci	r23, 0xFF	; 255
    233e:	8f 4f       	sbci	r24, 0xFF	; 255
    2340:	9f 4f       	sbci	r25, 0xFF	; 255
    2342:	08 95       	ret

00002344 <__floatunsisf>:
    2344:	e8 94       	clt
    2346:	09 c0       	rjmp	.+18     	; 0x235a <__floatsisf+0x12>

00002348 <__floatsisf>:
    2348:	97 fb       	bst	r25, 7
    234a:	3e f4       	brtc	.+14     	; 0x235a <__floatsisf+0x12>
    234c:	90 95       	com	r25
    234e:	80 95       	com	r24
    2350:	70 95       	com	r23
    2352:	61 95       	neg	r22
    2354:	7f 4f       	sbci	r23, 0xFF	; 255
    2356:	8f 4f       	sbci	r24, 0xFF	; 255
    2358:	9f 4f       	sbci	r25, 0xFF	; 255
    235a:	99 23       	and	r25, r25
    235c:	a9 f0       	breq	.+42     	; 0x2388 <__floatsisf+0x40>
    235e:	f9 2f       	mov	r31, r25
    2360:	96 e9       	ldi	r25, 0x96	; 150
    2362:	bb 27       	eor	r27, r27
    2364:	93 95       	inc	r25
    2366:	f6 95       	lsr	r31
    2368:	87 95       	ror	r24
    236a:	77 95       	ror	r23
    236c:	67 95       	ror	r22
    236e:	b7 95       	ror	r27
    2370:	f1 11       	cpse	r31, r1
    2372:	f8 cf       	rjmp	.-16     	; 0x2364 <__floatsisf+0x1c>
    2374:	fa f4       	brpl	.+62     	; 0x23b4 <__floatsisf+0x6c>
    2376:	bb 0f       	add	r27, r27
    2378:	11 f4       	brne	.+4      	; 0x237e <__floatsisf+0x36>
    237a:	60 ff       	sbrs	r22, 0
    237c:	1b c0       	rjmp	.+54     	; 0x23b4 <__floatsisf+0x6c>
    237e:	6f 5f       	subi	r22, 0xFF	; 255
    2380:	7f 4f       	sbci	r23, 0xFF	; 255
    2382:	8f 4f       	sbci	r24, 0xFF	; 255
    2384:	9f 4f       	sbci	r25, 0xFF	; 255
    2386:	16 c0       	rjmp	.+44     	; 0x23b4 <__floatsisf+0x6c>
    2388:	88 23       	and	r24, r24
    238a:	11 f0       	breq	.+4      	; 0x2390 <__floatsisf+0x48>
    238c:	96 e9       	ldi	r25, 0x96	; 150
    238e:	11 c0       	rjmp	.+34     	; 0x23b2 <__floatsisf+0x6a>
    2390:	77 23       	and	r23, r23
    2392:	21 f0       	breq	.+8      	; 0x239c <__floatsisf+0x54>
    2394:	9e e8       	ldi	r25, 0x8E	; 142
    2396:	87 2f       	mov	r24, r23
    2398:	76 2f       	mov	r23, r22
    239a:	05 c0       	rjmp	.+10     	; 0x23a6 <__floatsisf+0x5e>
    239c:	66 23       	and	r22, r22
    239e:	71 f0       	breq	.+28     	; 0x23bc <__floatsisf+0x74>
    23a0:	96 e8       	ldi	r25, 0x86	; 134
    23a2:	86 2f       	mov	r24, r22
    23a4:	70 e0       	ldi	r23, 0x00	; 0
    23a6:	60 e0       	ldi	r22, 0x00	; 0
    23a8:	2a f0       	brmi	.+10     	; 0x23b4 <__floatsisf+0x6c>
    23aa:	9a 95       	dec	r25
    23ac:	66 0f       	add	r22, r22
    23ae:	77 1f       	adc	r23, r23
    23b0:	88 1f       	adc	r24, r24
    23b2:	da f7       	brpl	.-10     	; 0x23aa <__floatsisf+0x62>
    23b4:	88 0f       	add	r24, r24
    23b6:	96 95       	lsr	r25
    23b8:	87 95       	ror	r24
    23ba:	97 f9       	bld	r25, 7
    23bc:	08 95       	ret

000023be <__fp_inf>:
    23be:	97 f9       	bld	r25, 7
    23c0:	9f 67       	ori	r25, 0x7F	; 127
    23c2:	80 e8       	ldi	r24, 0x80	; 128
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	08 95       	ret

000023ca <__fp_nan>:
    23ca:	9f ef       	ldi	r25, 0xFF	; 255
    23cc:	80 ec       	ldi	r24, 0xC0	; 192
    23ce:	08 95       	ret

000023d0 <__fp_pscA>:
    23d0:	00 24       	eor	r0, r0
    23d2:	0a 94       	dec	r0
    23d4:	16 16       	cp	r1, r22
    23d6:	17 06       	cpc	r1, r23
    23d8:	18 06       	cpc	r1, r24
    23da:	09 06       	cpc	r0, r25
    23dc:	08 95       	ret

000023de <__fp_pscB>:
    23de:	00 24       	eor	r0, r0
    23e0:	0a 94       	dec	r0
    23e2:	12 16       	cp	r1, r18
    23e4:	13 06       	cpc	r1, r19
    23e6:	14 06       	cpc	r1, r20
    23e8:	05 06       	cpc	r0, r21
    23ea:	08 95       	ret

000023ec <__fp_round>:
    23ec:	09 2e       	mov	r0, r25
    23ee:	03 94       	inc	r0
    23f0:	00 0c       	add	r0, r0
    23f2:	11 f4       	brne	.+4      	; 0x23f8 <__fp_round+0xc>
    23f4:	88 23       	and	r24, r24
    23f6:	52 f0       	brmi	.+20     	; 0x240c <__fp_round+0x20>
    23f8:	bb 0f       	add	r27, r27
    23fa:	40 f4       	brcc	.+16     	; 0x240c <__fp_round+0x20>
    23fc:	bf 2b       	or	r27, r31
    23fe:	11 f4       	brne	.+4      	; 0x2404 <__fp_round+0x18>
    2400:	60 ff       	sbrs	r22, 0
    2402:	04 c0       	rjmp	.+8      	; 0x240c <__fp_round+0x20>
    2404:	6f 5f       	subi	r22, 0xFF	; 255
    2406:	7f 4f       	sbci	r23, 0xFF	; 255
    2408:	8f 4f       	sbci	r24, 0xFF	; 255
    240a:	9f 4f       	sbci	r25, 0xFF	; 255
    240c:	08 95       	ret

0000240e <__fp_split3>:
    240e:	57 fd       	sbrc	r21, 7
    2410:	90 58       	subi	r25, 0x80	; 128
    2412:	44 0f       	add	r20, r20
    2414:	55 1f       	adc	r21, r21
    2416:	59 f0       	breq	.+22     	; 0x242e <__fp_splitA+0x10>
    2418:	5f 3f       	cpi	r21, 0xFF	; 255
    241a:	71 f0       	breq	.+28     	; 0x2438 <__fp_splitA+0x1a>
    241c:	47 95       	ror	r20

0000241e <__fp_splitA>:
    241e:	88 0f       	add	r24, r24
    2420:	97 fb       	bst	r25, 7
    2422:	99 1f       	adc	r25, r25
    2424:	61 f0       	breq	.+24     	; 0x243e <__fp_splitA+0x20>
    2426:	9f 3f       	cpi	r25, 0xFF	; 255
    2428:	79 f0       	breq	.+30     	; 0x2448 <__fp_splitA+0x2a>
    242a:	87 95       	ror	r24
    242c:	08 95       	ret
    242e:	12 16       	cp	r1, r18
    2430:	13 06       	cpc	r1, r19
    2432:	14 06       	cpc	r1, r20
    2434:	55 1f       	adc	r21, r21
    2436:	f2 cf       	rjmp	.-28     	; 0x241c <__fp_split3+0xe>
    2438:	46 95       	lsr	r20
    243a:	f1 df       	rcall	.-30     	; 0x241e <__fp_splitA>
    243c:	08 c0       	rjmp	.+16     	; 0x244e <__fp_splitA+0x30>
    243e:	16 16       	cp	r1, r22
    2440:	17 06       	cpc	r1, r23
    2442:	18 06       	cpc	r1, r24
    2444:	99 1f       	adc	r25, r25
    2446:	f1 cf       	rjmp	.-30     	; 0x242a <__fp_splitA+0xc>
    2448:	86 95       	lsr	r24
    244a:	71 05       	cpc	r23, r1
    244c:	61 05       	cpc	r22, r1
    244e:	08 94       	sec
    2450:	08 95       	ret

00002452 <__fp_zero>:
    2452:	e8 94       	clt

00002454 <__fp_szero>:
    2454:	bb 27       	eor	r27, r27
    2456:	66 27       	eor	r22, r22
    2458:	77 27       	eor	r23, r23
    245a:	cb 01       	movw	r24, r22
    245c:	97 f9       	bld	r25, 7
    245e:	08 95       	ret

00002460 <__mulsf3>:
    2460:	0e 94 43 12 	call	0x2486	; 0x2486 <__mulsf3x>
    2464:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__fp_round>
    2468:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fp_pscA>
    246c:	38 f0       	brcs	.+14     	; 0x247c <__mulsf3+0x1c>
    246e:	0e 94 ef 11 	call	0x23de	; 0x23de <__fp_pscB>
    2472:	20 f0       	brcs	.+8      	; 0x247c <__mulsf3+0x1c>
    2474:	95 23       	and	r25, r21
    2476:	11 f0       	breq	.+4      	; 0x247c <__mulsf3+0x1c>
    2478:	0c 94 df 11 	jmp	0x23be	; 0x23be <__fp_inf>
    247c:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__fp_nan>
    2480:	11 24       	eor	r1, r1
    2482:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_szero>

00002486 <__mulsf3x>:
    2486:	0e 94 07 12 	call	0x240e	; 0x240e <__fp_split3>
    248a:	70 f3       	brcs	.-36     	; 0x2468 <__mulsf3+0x8>

0000248c <__mulsf3_pse>:
    248c:	95 9f       	mul	r25, r21
    248e:	c1 f3       	breq	.-16     	; 0x2480 <__mulsf3+0x20>
    2490:	95 0f       	add	r25, r21
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	55 1f       	adc	r21, r21
    2496:	62 9f       	mul	r22, r18
    2498:	f0 01       	movw	r30, r0
    249a:	72 9f       	mul	r23, r18
    249c:	bb 27       	eor	r27, r27
    249e:	f0 0d       	add	r31, r0
    24a0:	b1 1d       	adc	r27, r1
    24a2:	63 9f       	mul	r22, r19
    24a4:	aa 27       	eor	r26, r26
    24a6:	f0 0d       	add	r31, r0
    24a8:	b1 1d       	adc	r27, r1
    24aa:	aa 1f       	adc	r26, r26
    24ac:	64 9f       	mul	r22, r20
    24ae:	66 27       	eor	r22, r22
    24b0:	b0 0d       	add	r27, r0
    24b2:	a1 1d       	adc	r26, r1
    24b4:	66 1f       	adc	r22, r22
    24b6:	82 9f       	mul	r24, r18
    24b8:	22 27       	eor	r18, r18
    24ba:	b0 0d       	add	r27, r0
    24bc:	a1 1d       	adc	r26, r1
    24be:	62 1f       	adc	r22, r18
    24c0:	73 9f       	mul	r23, r19
    24c2:	b0 0d       	add	r27, r0
    24c4:	a1 1d       	adc	r26, r1
    24c6:	62 1f       	adc	r22, r18
    24c8:	83 9f       	mul	r24, r19
    24ca:	a0 0d       	add	r26, r0
    24cc:	61 1d       	adc	r22, r1
    24ce:	22 1f       	adc	r18, r18
    24d0:	74 9f       	mul	r23, r20
    24d2:	33 27       	eor	r19, r19
    24d4:	a0 0d       	add	r26, r0
    24d6:	61 1d       	adc	r22, r1
    24d8:	23 1f       	adc	r18, r19
    24da:	84 9f       	mul	r24, r20
    24dc:	60 0d       	add	r22, r0
    24de:	21 1d       	adc	r18, r1
    24e0:	82 2f       	mov	r24, r18
    24e2:	76 2f       	mov	r23, r22
    24e4:	6a 2f       	mov	r22, r26
    24e6:	11 24       	eor	r1, r1
    24e8:	9f 57       	subi	r25, 0x7F	; 127
    24ea:	50 40       	sbci	r21, 0x00	; 0
    24ec:	9a f0       	brmi	.+38     	; 0x2514 <__mulsf3_pse+0x88>
    24ee:	f1 f0       	breq	.+60     	; 0x252c <__mulsf3_pse+0xa0>
    24f0:	88 23       	and	r24, r24
    24f2:	4a f0       	brmi	.+18     	; 0x2506 <__mulsf3_pse+0x7a>
    24f4:	ee 0f       	add	r30, r30
    24f6:	ff 1f       	adc	r31, r31
    24f8:	bb 1f       	adc	r27, r27
    24fa:	66 1f       	adc	r22, r22
    24fc:	77 1f       	adc	r23, r23
    24fe:	88 1f       	adc	r24, r24
    2500:	91 50       	subi	r25, 0x01	; 1
    2502:	50 40       	sbci	r21, 0x00	; 0
    2504:	a9 f7       	brne	.-22     	; 0x24f0 <__mulsf3_pse+0x64>
    2506:	9e 3f       	cpi	r25, 0xFE	; 254
    2508:	51 05       	cpc	r21, r1
    250a:	80 f0       	brcs	.+32     	; 0x252c <__mulsf3_pse+0xa0>
    250c:	0c 94 df 11 	jmp	0x23be	; 0x23be <__fp_inf>
    2510:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_szero>
    2514:	5f 3f       	cpi	r21, 0xFF	; 255
    2516:	e4 f3       	brlt	.-8      	; 0x2510 <__mulsf3_pse+0x84>
    2518:	98 3e       	cpi	r25, 0xE8	; 232
    251a:	d4 f3       	brlt	.-12     	; 0x2510 <__mulsf3_pse+0x84>
    251c:	86 95       	lsr	r24
    251e:	77 95       	ror	r23
    2520:	67 95       	ror	r22
    2522:	b7 95       	ror	r27
    2524:	f7 95       	ror	r31
    2526:	e7 95       	ror	r30
    2528:	9f 5f       	subi	r25, 0xFF	; 255
    252a:	c1 f7       	brne	.-16     	; 0x251c <__mulsf3_pse+0x90>
    252c:	fe 2b       	or	r31, r30
    252e:	88 0f       	add	r24, r24
    2530:	91 1d       	adc	r25, r1
    2532:	96 95       	lsr	r25
    2534:	87 95       	ror	r24
    2536:	97 f9       	bld	r25, 7
    2538:	08 95       	ret

0000253a <pow>:
    253a:	fa 01       	movw	r30, r20
    253c:	ee 0f       	add	r30, r30
    253e:	ff 1f       	adc	r31, r31
    2540:	30 96       	adiw	r30, 0x00	; 0
    2542:	21 05       	cpc	r18, r1
    2544:	31 05       	cpc	r19, r1
    2546:	a1 f1       	breq	.+104    	; 0x25b0 <pow+0x76>
    2548:	61 15       	cp	r22, r1
    254a:	71 05       	cpc	r23, r1
    254c:	61 f4       	brne	.+24     	; 0x2566 <pow+0x2c>
    254e:	80 38       	cpi	r24, 0x80	; 128
    2550:	bf e3       	ldi	r27, 0x3F	; 63
    2552:	9b 07       	cpc	r25, r27
    2554:	49 f1       	breq	.+82     	; 0x25a8 <pow+0x6e>
    2556:	68 94       	set
    2558:	90 38       	cpi	r25, 0x80	; 128
    255a:	81 05       	cpc	r24, r1
    255c:	61 f0       	breq	.+24     	; 0x2576 <pow+0x3c>
    255e:	80 38       	cpi	r24, 0x80	; 128
    2560:	bf ef       	ldi	r27, 0xFF	; 255
    2562:	9b 07       	cpc	r25, r27
    2564:	41 f0       	breq	.+16     	; 0x2576 <pow+0x3c>
    2566:	99 23       	and	r25, r25
    2568:	4a f5       	brpl	.+82     	; 0x25bc <pow+0x82>
    256a:	ff 3f       	cpi	r31, 0xFF	; 255
    256c:	e1 05       	cpc	r30, r1
    256e:	31 05       	cpc	r19, r1
    2570:	21 05       	cpc	r18, r1
    2572:	19 f1       	breq	.+70     	; 0x25ba <pow+0x80>
    2574:	e8 94       	clt
    2576:	08 94       	sec
    2578:	e7 95       	ror	r30
    257a:	d9 01       	movw	r26, r18
    257c:	aa 23       	and	r26, r26
    257e:	29 f4       	brne	.+10     	; 0x258a <pow+0x50>
    2580:	ab 2f       	mov	r26, r27
    2582:	be 2f       	mov	r27, r30
    2584:	f8 5f       	subi	r31, 0xF8	; 248
    2586:	d0 f3       	brcs	.-12     	; 0x257c <pow+0x42>
    2588:	10 c0       	rjmp	.+32     	; 0x25aa <pow+0x70>
    258a:	ff 5f       	subi	r31, 0xFF	; 255
    258c:	70 f4       	brcc	.+28     	; 0x25aa <pow+0x70>
    258e:	a6 95       	lsr	r26
    2590:	e0 f7       	brcc	.-8      	; 0x258a <pow+0x50>
    2592:	f7 39       	cpi	r31, 0x97	; 151
    2594:	50 f0       	brcs	.+20     	; 0x25aa <pow+0x70>
    2596:	19 f0       	breq	.+6      	; 0x259e <pow+0x64>
    2598:	ff 3a       	cpi	r31, 0xAF	; 175
    259a:	38 f4       	brcc	.+14     	; 0x25aa <pow+0x70>
    259c:	9f 77       	andi	r25, 0x7F	; 127
    259e:	9f 93       	push	r25
    25a0:	0d d0       	rcall	.+26     	; 0x25bc <pow+0x82>
    25a2:	0f 90       	pop	r0
    25a4:	07 fc       	sbrc	r0, 7
    25a6:	90 58       	subi	r25, 0x80	; 128
    25a8:	08 95       	ret
    25aa:	46 f0       	brts	.+16     	; 0x25bc <pow+0x82>
    25ac:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__fp_nan>
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	80 e8       	ldi	r24, 0x80	; 128
    25b6:	9f e3       	ldi	r25, 0x3F	; 63
    25b8:	08 95       	ret
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	9f 77       	andi	r25, 0x7F	; 127
    25be:	5f 93       	push	r21
    25c0:	4f 93       	push	r20
    25c2:	3f 93       	push	r19
    25c4:	2f 93       	push	r18
    25c6:	0e 94 98 13 	call	0x2730	; 0x2730 <log>
    25ca:	2f 91       	pop	r18
    25cc:	3f 91       	pop	r19
    25ce:	4f 91       	pop	r20
    25d0:	5f 91       	pop	r21
    25d2:	0e 94 30 12 	call	0x2460	; 0x2460 <__mulsf3>
    25d6:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <exp>
    25da:	29 f4       	brne	.+10     	; 0x25e6 <pow+0xac>
    25dc:	16 f0       	brts	.+4      	; 0x25e2 <pow+0xa8>
    25de:	0c 94 df 11 	jmp	0x23be	; 0x23be <__fp_inf>
    25e2:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__fp_zero>
    25e6:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__fp_nan>

000025ea <exp>:
    25ea:	0e 94 0f 12 	call	0x241e	; 0x241e <__fp_splitA>
    25ee:	a8 f3       	brcs	.-22     	; 0x25da <pow+0xa0>
    25f0:	96 38       	cpi	r25, 0x86	; 134
    25f2:	a0 f7       	brcc	.-24     	; 0x25dc <pow+0xa2>
    25f4:	07 f8       	bld	r0, 7
    25f6:	0f 92       	push	r0
    25f8:	e8 94       	clt
    25fa:	2b e3       	ldi	r18, 0x3B	; 59
    25fc:	3a ea       	ldi	r19, 0xAA	; 170
    25fe:	48 eb       	ldi	r20, 0xB8	; 184
    2600:	5f e7       	ldi	r21, 0x7F	; 127
    2602:	0e 94 46 12 	call	0x248c	; 0x248c <__mulsf3_pse>
    2606:	0f 92       	push	r0
    2608:	0f 92       	push	r0
    260a:	0f 92       	push	r0
    260c:	4d b7       	in	r20, 0x3d	; 61
    260e:	5e b7       	in	r21, 0x3e	; 62
    2610:	0f 92       	push	r0
    2612:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <modf>
    2616:	e8 e8       	ldi	r30, 0x88	; 136
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	0e 94 27 13 	call	0x264e	; 0x264e <__fp_powser>
    261e:	4f 91       	pop	r20
    2620:	5f 91       	pop	r21
    2622:	ef 91       	pop	r30
    2624:	ff 91       	pop	r31
    2626:	e5 95       	asr	r30
    2628:	ee 1f       	adc	r30, r30
    262a:	ff 1f       	adc	r31, r31
    262c:	49 f0       	breq	.+18     	; 0x2640 <exp+0x56>
    262e:	fe 57       	subi	r31, 0x7E	; 126
    2630:	e0 68       	ori	r30, 0x80	; 128
    2632:	44 27       	eor	r20, r20
    2634:	ee 0f       	add	r30, r30
    2636:	44 1f       	adc	r20, r20
    2638:	fa 95       	dec	r31
    263a:	e1 f7       	brne	.-8      	; 0x2634 <exp+0x4a>
    263c:	41 95       	neg	r20
    263e:	55 0b       	sbc	r21, r21
    2640:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <ldexp>
    2644:	0f 90       	pop	r0
    2646:	07 fe       	sbrs	r0, 7
    2648:	0c 94 4e 13 	jmp	0x269c	; 0x269c <inverse>
    264c:	08 95       	ret

0000264e <__fp_powser>:
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	1f 93       	push	r17
    2654:	0f 93       	push	r16
    2656:	ff 92       	push	r15
    2658:	ef 92       	push	r14
    265a:	df 92       	push	r13
    265c:	7b 01       	movw	r14, r22
    265e:	8c 01       	movw	r16, r24
    2660:	68 94       	set
    2662:	06 c0       	rjmp	.+12     	; 0x2670 <__fp_powser+0x22>
    2664:	da 2e       	mov	r13, r26
    2666:	ef 01       	movw	r28, r30
    2668:	0e 94 43 12 	call	0x2486	; 0x2486 <__mulsf3x>
    266c:	fe 01       	movw	r30, r28
    266e:	e8 94       	clt
    2670:	a5 91       	lpm	r26, Z+
    2672:	25 91       	lpm	r18, Z+
    2674:	35 91       	lpm	r19, Z+
    2676:	45 91       	lpm	r20, Z+
    2678:	55 91       	lpm	r21, Z+
    267a:	a6 f3       	brts	.-24     	; 0x2664 <__fp_powser+0x16>
    267c:	ef 01       	movw	r28, r30
    267e:	0e 94 a5 10 	call	0x214a	; 0x214a <__addsf3x>
    2682:	fe 01       	movw	r30, r28
    2684:	97 01       	movw	r18, r14
    2686:	a8 01       	movw	r20, r16
    2688:	da 94       	dec	r13
    268a:	69 f7       	brne	.-38     	; 0x2666 <__fp_powser+0x18>
    268c:	df 90       	pop	r13
    268e:	ef 90       	pop	r14
    2690:	ff 90       	pop	r15
    2692:	0f 91       	pop	r16
    2694:	1f 91       	pop	r17
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <inverse>:
    269c:	9b 01       	movw	r18, r22
    269e:	ac 01       	movw	r20, r24
    26a0:	60 e0       	ldi	r22, 0x00	; 0
    26a2:	70 e0       	ldi	r23, 0x00	; 0
    26a4:	80 e8       	ldi	r24, 0x80	; 128
    26a6:	9f e3       	ldi	r25, 0x3F	; 63
    26a8:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <__divsf3>
    26ac:	0c 94 df 11 	jmp	0x23be	; 0x23be <__fp_inf>
    26b0:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__fp_mpack>

000026b4 <ldexp>:
    26b4:	0e 94 0f 12 	call	0x241e	; 0x241e <__fp_splitA>
    26b8:	d8 f3       	brcs	.-10     	; 0x26b0 <inverse+0x14>
    26ba:	99 23       	and	r25, r25
    26bc:	c9 f3       	breq	.-14     	; 0x26b0 <inverse+0x14>
    26be:	94 0f       	add	r25, r20
    26c0:	51 1d       	adc	r21, r1
    26c2:	a3 f3       	brvs	.-24     	; 0x26ac <inverse+0x10>
    26c4:	91 50       	subi	r25, 0x01	; 1
    26c6:	50 40       	sbci	r21, 0x00	; 0
    26c8:	94 f0       	brlt	.+36     	; 0x26ee <ldexp+0x3a>
    26ca:	59 f0       	breq	.+22     	; 0x26e2 <ldexp+0x2e>
    26cc:	88 23       	and	r24, r24
    26ce:	32 f0       	brmi	.+12     	; 0x26dc <ldexp+0x28>
    26d0:	66 0f       	add	r22, r22
    26d2:	77 1f       	adc	r23, r23
    26d4:	88 1f       	adc	r24, r24
    26d6:	91 50       	subi	r25, 0x01	; 1
    26d8:	50 40       	sbci	r21, 0x00	; 0
    26da:	c1 f7       	brne	.-16     	; 0x26cc <ldexp+0x18>
    26dc:	9e 3f       	cpi	r25, 0xFE	; 254
    26de:	51 05       	cpc	r21, r1
    26e0:	2c f7       	brge	.-54     	; 0x26ac <inverse+0x10>
    26e2:	88 0f       	add	r24, r24
    26e4:	91 1d       	adc	r25, r1
    26e6:	96 95       	lsr	r25
    26e8:	87 95       	ror	r24
    26ea:	97 f9       	bld	r25, 7
    26ec:	08 95       	ret
    26ee:	5f 3f       	cpi	r21, 0xFF	; 255
    26f0:	ac f0       	brlt	.+42     	; 0x271c <ldexp+0x68>
    26f2:	98 3e       	cpi	r25, 0xE8	; 232
    26f4:	9c f0       	brlt	.+38     	; 0x271c <ldexp+0x68>
    26f6:	bb 27       	eor	r27, r27
    26f8:	86 95       	lsr	r24
    26fa:	77 95       	ror	r23
    26fc:	67 95       	ror	r22
    26fe:	b7 95       	ror	r27
    2700:	08 f4       	brcc	.+2      	; 0x2704 <ldexp+0x50>
    2702:	b1 60       	ori	r27, 0x01	; 1
    2704:	93 95       	inc	r25
    2706:	c1 f7       	brne	.-16     	; 0x26f8 <ldexp+0x44>
    2708:	bb 0f       	add	r27, r27
    270a:	58 f7       	brcc	.-42     	; 0x26e2 <ldexp+0x2e>
    270c:	11 f4       	brne	.+4      	; 0x2712 <ldexp+0x5e>
    270e:	60 ff       	sbrs	r22, 0
    2710:	e8 cf       	rjmp	.-48     	; 0x26e2 <ldexp+0x2e>
    2712:	6f 5f       	subi	r22, 0xFF	; 255
    2714:	7f 4f       	sbci	r23, 0xFF	; 255
    2716:	8f 4f       	sbci	r24, 0xFF	; 255
    2718:	9f 4f       	sbci	r25, 0xFF	; 255
    271a:	e3 cf       	rjmp	.-58     	; 0x26e2 <ldexp+0x2e>
    271c:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__fp_szero>
    2720:	16 f0       	brts	.+4      	; 0x2726 <ldexp+0x72>
    2722:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__fp_mpack>
    2726:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__fp_nan>
    272a:	68 94       	set
    272c:	0c 94 df 11 	jmp	0x23be	; 0x23be <__fp_inf>

00002730 <log>:
    2730:	0e 94 0f 12 	call	0x241e	; 0x241e <__fp_splitA>
    2734:	a8 f3       	brcs	.-22     	; 0x2720 <ldexp+0x6c>
    2736:	99 23       	and	r25, r25
    2738:	c1 f3       	breq	.-16     	; 0x272a <ldexp+0x76>
    273a:	ae f3       	brts	.-22     	; 0x2726 <ldexp+0x72>
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	1f 93       	push	r17
    2742:	0f 93       	push	r16
    2744:	ff 92       	push	r15
    2746:	c9 2f       	mov	r28, r25
    2748:	dd 27       	eor	r29, r29
    274a:	88 23       	and	r24, r24
    274c:	2a f0       	brmi	.+10     	; 0x2758 <log+0x28>
    274e:	21 97       	sbiw	r28, 0x01	; 1
    2750:	66 0f       	add	r22, r22
    2752:	77 1f       	adc	r23, r23
    2754:	88 1f       	adc	r24, r24
    2756:	da f7       	brpl	.-10     	; 0x274e <log+0x1e>
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e8       	ldi	r20, 0x80	; 128
    275e:	5f eb       	ldi	r21, 0xBF	; 191
    2760:	9f e3       	ldi	r25, 0x3F	; 63
    2762:	88 39       	cpi	r24, 0x98	; 152
    2764:	20 f0       	brcs	.+8      	; 0x276e <log+0x3e>
    2766:	80 3e       	cpi	r24, 0xE0	; 224
    2768:	38 f0       	brcs	.+14     	; 0x2778 <log+0x48>
    276a:	21 96       	adiw	r28, 0x01	; 1
    276c:	8f 77       	andi	r24, 0x7F	; 127
    276e:	0e 94 8e 10 	call	0x211c	; 0x211c <__addsf3>
    2772:	e0 eb       	ldi	r30, 0xB0	; 176
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <log+0x50>
    2778:	0e 94 8e 10 	call	0x211c	; 0x211c <__addsf3>
    277c:	ed ed       	ldi	r30, 0xDD	; 221
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	0e 94 27 13 	call	0x264e	; 0x264e <__fp_powser>
    2784:	8b 01       	movw	r16, r22
    2786:	be 01       	movw	r22, r28
    2788:	ec 01       	movw	r28, r24
    278a:	fb 2e       	mov	r15, r27
    278c:	6f 57       	subi	r22, 0x7F	; 127
    278e:	71 09       	sbc	r23, r1
    2790:	75 95       	asr	r23
    2792:	77 1f       	adc	r23, r23
    2794:	88 0b       	sbc	r24, r24
    2796:	99 0b       	sbc	r25, r25
    2798:	0e 94 a4 11 	call	0x2348	; 0x2348 <__floatsisf>
    279c:	28 e1       	ldi	r18, 0x18	; 24
    279e:	32 e7       	ldi	r19, 0x72	; 114
    27a0:	41 e3       	ldi	r20, 0x31	; 49
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 43 12 	call	0x2486	; 0x2486 <__mulsf3x>
    27a8:	af 2d       	mov	r26, r15
    27aa:	98 01       	movw	r18, r16
    27ac:	ae 01       	movw	r20, r28
    27ae:	ff 90       	pop	r15
    27b0:	0f 91       	pop	r16
    27b2:	1f 91       	pop	r17
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	0e 94 a5 10 	call	0x214a	; 0x214a <__addsf3x>
    27bc:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__fp_round>

000027c0 <modf>:
    27c0:	fa 01       	movw	r30, r20
    27c2:	dc 01       	movw	r26, r24
    27c4:	aa 0f       	add	r26, r26
    27c6:	bb 1f       	adc	r27, r27
    27c8:	9b 01       	movw	r18, r22
    27ca:	ac 01       	movw	r20, r24
    27cc:	bf 57       	subi	r27, 0x7F	; 127
    27ce:	28 f4       	brcc	.+10     	; 0x27da <modf+0x1a>
    27d0:	22 27       	eor	r18, r18
    27d2:	33 27       	eor	r19, r19
    27d4:	44 27       	eor	r20, r20
    27d6:	50 78       	andi	r21, 0x80	; 128
    27d8:	20 c0       	rjmp	.+64     	; 0x281a <modf+0x5a>
    27da:	b7 51       	subi	r27, 0x17	; 23
    27dc:	90 f4       	brcc	.+36     	; 0x2802 <modf+0x42>
    27de:	ab 2f       	mov	r26, r27
    27e0:	00 24       	eor	r0, r0
    27e2:	46 95       	lsr	r20
    27e4:	37 95       	ror	r19
    27e6:	27 95       	ror	r18
    27e8:	01 1c       	adc	r0, r1
    27ea:	a3 95       	inc	r26
    27ec:	d2 f3       	brmi	.-12     	; 0x27e2 <modf+0x22>
    27ee:	00 20       	and	r0, r0
    27f0:	71 f0       	breq	.+28     	; 0x280e <modf+0x4e>
    27f2:	22 0f       	add	r18, r18
    27f4:	33 1f       	adc	r19, r19
    27f6:	44 1f       	adc	r20, r20
    27f8:	b3 95       	inc	r27
    27fa:	da f3       	brmi	.-10     	; 0x27f2 <modf+0x32>
    27fc:	0e d0       	rcall	.+28     	; 0x281a <modf+0x5a>
    27fe:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__subsf3>
    2802:	61 30       	cpi	r22, 0x01	; 1
    2804:	71 05       	cpc	r23, r1
    2806:	a0 e8       	ldi	r26, 0x80	; 128
    2808:	8a 07       	cpc	r24, r26
    280a:	b9 46       	sbci	r27, 0x69	; 105
    280c:	30 f4       	brcc	.+12     	; 0x281a <modf+0x5a>
    280e:	9b 01       	movw	r18, r22
    2810:	ac 01       	movw	r20, r24
    2812:	66 27       	eor	r22, r22
    2814:	77 27       	eor	r23, r23
    2816:	88 27       	eor	r24, r24
    2818:	90 78       	andi	r25, 0x80	; 128
    281a:	30 96       	adiw	r30, 0x00	; 0
    281c:	21 f0       	breq	.+8      	; 0x2826 <modf+0x66>
    281e:	20 83       	st	Z, r18
    2820:	31 83       	std	Z+1, r19	; 0x01
    2822:	42 83       	std	Z+2, r20	; 0x02
    2824:	53 83       	std	Z+3, r21	; 0x03
    2826:	08 95       	ret

00002828 <__fp_mpack>:
    2828:	9f 3f       	cpi	r25, 0xFF	; 255
    282a:	31 f0       	breq	.+12     	; 0x2838 <__fp_mpack_finite+0xc>

0000282c <__fp_mpack_finite>:
    282c:	91 50       	subi	r25, 0x01	; 1
    282e:	20 f4       	brcc	.+8      	; 0x2838 <__fp_mpack_finite+0xc>
    2830:	87 95       	ror	r24
    2832:	77 95       	ror	r23
    2834:	67 95       	ror	r22
    2836:	b7 95       	ror	r27
    2838:	88 0f       	add	r24, r24
    283a:	91 1d       	adc	r25, r1
    283c:	96 95       	lsr	r25
    283e:	87 95       	ror	r24
    2840:	97 f9       	bld	r25, 7
    2842:	08 95       	ret

00002844 <__ltoa_ncheck>:
    2844:	bb 27       	eor	r27, r27
    2846:	2a 30       	cpi	r18, 0x0A	; 10
    2848:	51 f4       	brne	.+20     	; 0x285e <__ltoa_ncheck+0x1a>
    284a:	99 23       	and	r25, r25
    284c:	42 f4       	brpl	.+16     	; 0x285e <__ltoa_ncheck+0x1a>
    284e:	bd e2       	ldi	r27, 0x2D	; 45
    2850:	90 95       	com	r25
    2852:	80 95       	com	r24
    2854:	70 95       	com	r23
    2856:	61 95       	neg	r22
    2858:	7f 4f       	sbci	r23, 0xFF	; 255
    285a:	8f 4f       	sbci	r24, 0xFF	; 255
    285c:	9f 4f       	sbci	r25, 0xFF	; 255
    285e:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__ultoa_common>

00002862 <__ultoa_ncheck>:
    2862:	bb 27       	eor	r27, r27

00002864 <__ultoa_common>:
    2864:	fa 01       	movw	r30, r20
    2866:	a6 2f       	mov	r26, r22
    2868:	62 17       	cp	r22, r18
    286a:	71 05       	cpc	r23, r1
    286c:	81 05       	cpc	r24, r1
    286e:	91 05       	cpc	r25, r1
    2870:	33 0b       	sbc	r19, r19
    2872:	30 fb       	bst	r19, 0
    2874:	66 f0       	brts	.+24     	; 0x288e <__ultoa_common+0x2a>
    2876:	aa 27       	eor	r26, r26
    2878:	66 0f       	add	r22, r22
    287a:	77 1f       	adc	r23, r23
    287c:	88 1f       	adc	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	aa 1f       	adc	r26, r26
    2882:	a2 17       	cp	r26, r18
    2884:	10 f0       	brcs	.+4      	; 0x288a <__ultoa_common+0x26>
    2886:	a2 1b       	sub	r26, r18
    2888:	63 95       	inc	r22
    288a:	38 50       	subi	r19, 0x08	; 8
    288c:	a9 f7       	brne	.-22     	; 0x2878 <__ultoa_common+0x14>
    288e:	a0 5d       	subi	r26, 0xD0	; 208
    2890:	aa 33       	cpi	r26, 0x3A	; 58
    2892:	08 f0       	brcs	.+2      	; 0x2896 <__ultoa_common+0x32>
    2894:	a9 5d       	subi	r26, 0xD9	; 217
    2896:	a1 93       	st	Z+, r26
    2898:	36 f7       	brtc	.-52     	; 0x2866 <__ultoa_common+0x2>
    289a:	b1 11       	cpse	r27, r1
    289c:	b1 93       	st	Z+, r27
    289e:	10 82       	st	Z, r1
    28a0:	ca 01       	movw	r24, r20
    28a2:	0c 94 5e 16 	jmp	0x2cbc	; 0x2cbc <strrev>

000028a6 <sprintf>:
    28a6:	ae e0       	ldi	r26, 0x0E	; 14
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	e9 e5       	ldi	r30, 0x59	; 89
    28ac:	f4 e1       	ldi	r31, 0x14	; 20
    28ae:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__prologue_saves__+0x1c>
    28b2:	0d 89       	ldd	r16, Y+21	; 0x15
    28b4:	1e 89       	ldd	r17, Y+22	; 0x16
    28b6:	86 e0       	ldi	r24, 0x06	; 6
    28b8:	8c 83       	std	Y+4, r24	; 0x04
    28ba:	1a 83       	std	Y+2, r17	; 0x02
    28bc:	09 83       	std	Y+1, r16	; 0x01
    28be:	8f ef       	ldi	r24, 0xFF	; 255
    28c0:	9f e7       	ldi	r25, 0x7F	; 127
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	ae 01       	movw	r20, r28
    28c8:	47 5e       	subi	r20, 0xE7	; 231
    28ca:	5f 4f       	sbci	r21, 0xFF	; 255
    28cc:	6f 89       	ldd	r22, Y+23	; 0x17
    28ce:	78 8d       	ldd	r23, Y+24	; 0x18
    28d0:	ce 01       	movw	r24, r28
    28d2:	01 96       	adiw	r24, 0x01	; 1
    28d4:	0e 94 76 14 	call	0x28ec	; 0x28ec <vfprintf>
    28d8:	2f 81       	ldd	r18, Y+7	; 0x07
    28da:	38 85       	ldd	r19, Y+8	; 0x08
    28dc:	f8 01       	movw	r30, r16
    28de:	e2 0f       	add	r30, r18
    28e0:	f3 1f       	adc	r31, r19
    28e2:	10 82       	st	Z, r1
    28e4:	2e 96       	adiw	r28, 0x0e	; 14
    28e6:	e4 e0       	ldi	r30, 0x04	; 4
    28e8:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <__epilogue_restores__+0x1c>

000028ec <vfprintf>:
    28ec:	ac e0       	ldi	r26, 0x0C	; 12
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ec e7       	ldi	r30, 0x7C	; 124
    28f2:	f4 e1       	ldi	r31, 0x14	; 20
    28f4:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__prologue_saves__>
    28f8:	7c 01       	movw	r14, r24
    28fa:	6b 01       	movw	r12, r22
    28fc:	8a 01       	movw	r16, r20
    28fe:	fc 01       	movw	r30, r24
    2900:	17 82       	std	Z+7, r1	; 0x07
    2902:	16 82       	std	Z+6, r1	; 0x06
    2904:	83 81       	ldd	r24, Z+3	; 0x03
    2906:	81 ff       	sbrs	r24, 1
    2908:	bd c1       	rjmp	.+890    	; 0x2c84 <vfprintf+0x398>
    290a:	ce 01       	movw	r24, r28
    290c:	01 96       	adiw	r24, 0x01	; 1
    290e:	4c 01       	movw	r8, r24
    2910:	f7 01       	movw	r30, r14
    2912:	93 81       	ldd	r25, Z+3	; 0x03
    2914:	f6 01       	movw	r30, r12
    2916:	93 fd       	sbrc	r25, 3
    2918:	85 91       	lpm	r24, Z+
    291a:	93 ff       	sbrs	r25, 3
    291c:	81 91       	ld	r24, Z+
    291e:	6f 01       	movw	r12, r30
    2920:	88 23       	and	r24, r24
    2922:	09 f4       	brne	.+2      	; 0x2926 <vfprintf+0x3a>
    2924:	ab c1       	rjmp	.+854    	; 0x2c7c <vfprintf+0x390>
    2926:	85 32       	cpi	r24, 0x25	; 37
    2928:	39 f4       	brne	.+14     	; 0x2938 <vfprintf+0x4c>
    292a:	93 fd       	sbrc	r25, 3
    292c:	85 91       	lpm	r24, Z+
    292e:	93 ff       	sbrs	r25, 3
    2930:	81 91       	ld	r24, Z+
    2932:	6f 01       	movw	r12, r30
    2934:	85 32       	cpi	r24, 0x25	; 37
    2936:	29 f4       	brne	.+10     	; 0x2942 <vfprintf+0x56>
    2938:	b7 01       	movw	r22, r14
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2940:	e7 cf       	rjmp	.-50     	; 0x2910 <vfprintf+0x24>
    2942:	51 2c       	mov	r5, r1
    2944:	31 2c       	mov	r3, r1
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	20 32       	cpi	r18, 0x20	; 32
    294a:	a0 f4       	brcc	.+40     	; 0x2974 <vfprintf+0x88>
    294c:	8b 32       	cpi	r24, 0x2B	; 43
    294e:	69 f0       	breq	.+26     	; 0x296a <vfprintf+0x7e>
    2950:	30 f4       	brcc	.+12     	; 0x295e <vfprintf+0x72>
    2952:	80 32       	cpi	r24, 0x20	; 32
    2954:	59 f0       	breq	.+22     	; 0x296c <vfprintf+0x80>
    2956:	83 32       	cpi	r24, 0x23	; 35
    2958:	69 f4       	brne	.+26     	; 0x2974 <vfprintf+0x88>
    295a:	20 61       	ori	r18, 0x10	; 16
    295c:	2c c0       	rjmp	.+88     	; 0x29b6 <vfprintf+0xca>
    295e:	8d 32       	cpi	r24, 0x2D	; 45
    2960:	39 f0       	breq	.+14     	; 0x2970 <vfprintf+0x84>
    2962:	80 33       	cpi	r24, 0x30	; 48
    2964:	39 f4       	brne	.+14     	; 0x2974 <vfprintf+0x88>
    2966:	21 60       	ori	r18, 0x01	; 1
    2968:	26 c0       	rjmp	.+76     	; 0x29b6 <vfprintf+0xca>
    296a:	22 60       	ori	r18, 0x02	; 2
    296c:	24 60       	ori	r18, 0x04	; 4
    296e:	23 c0       	rjmp	.+70     	; 0x29b6 <vfprintf+0xca>
    2970:	28 60       	ori	r18, 0x08	; 8
    2972:	21 c0       	rjmp	.+66     	; 0x29b6 <vfprintf+0xca>
    2974:	27 fd       	sbrc	r18, 7
    2976:	27 c0       	rjmp	.+78     	; 0x29c6 <vfprintf+0xda>
    2978:	30 ed       	ldi	r19, 0xD0	; 208
    297a:	38 0f       	add	r19, r24
    297c:	3a 30       	cpi	r19, 0x0A	; 10
    297e:	78 f4       	brcc	.+30     	; 0x299e <vfprintf+0xb2>
    2980:	26 ff       	sbrs	r18, 6
    2982:	06 c0       	rjmp	.+12     	; 0x2990 <vfprintf+0xa4>
    2984:	fa e0       	ldi	r31, 0x0A	; 10
    2986:	5f 9e       	mul	r5, r31
    2988:	30 0d       	add	r19, r0
    298a:	11 24       	eor	r1, r1
    298c:	53 2e       	mov	r5, r19
    298e:	13 c0       	rjmp	.+38     	; 0x29b6 <vfprintf+0xca>
    2990:	8a e0       	ldi	r24, 0x0A	; 10
    2992:	38 9e       	mul	r3, r24
    2994:	30 0d       	add	r19, r0
    2996:	11 24       	eor	r1, r1
    2998:	33 2e       	mov	r3, r19
    299a:	20 62       	ori	r18, 0x20	; 32
    299c:	0c c0       	rjmp	.+24     	; 0x29b6 <vfprintf+0xca>
    299e:	8e 32       	cpi	r24, 0x2E	; 46
    29a0:	21 f4       	brne	.+8      	; 0x29aa <vfprintf+0xbe>
    29a2:	26 fd       	sbrc	r18, 6
    29a4:	6b c1       	rjmp	.+726    	; 0x2c7c <vfprintf+0x390>
    29a6:	20 64       	ori	r18, 0x40	; 64
    29a8:	06 c0       	rjmp	.+12     	; 0x29b6 <vfprintf+0xca>
    29aa:	8c 36       	cpi	r24, 0x6C	; 108
    29ac:	11 f4       	brne	.+4      	; 0x29b2 <vfprintf+0xc6>
    29ae:	20 68       	ori	r18, 0x80	; 128
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <vfprintf+0xca>
    29b2:	88 36       	cpi	r24, 0x68	; 104
    29b4:	41 f4       	brne	.+16     	; 0x29c6 <vfprintf+0xda>
    29b6:	f6 01       	movw	r30, r12
    29b8:	93 fd       	sbrc	r25, 3
    29ba:	85 91       	lpm	r24, Z+
    29bc:	93 ff       	sbrs	r25, 3
    29be:	81 91       	ld	r24, Z+
    29c0:	6f 01       	movw	r12, r30
    29c2:	81 11       	cpse	r24, r1
    29c4:	c1 cf       	rjmp	.-126    	; 0x2948 <vfprintf+0x5c>
    29c6:	98 2f       	mov	r25, r24
    29c8:	9f 7d       	andi	r25, 0xDF	; 223
    29ca:	95 54       	subi	r25, 0x45	; 69
    29cc:	93 30       	cpi	r25, 0x03	; 3
    29ce:	28 f4       	brcc	.+10     	; 0x29da <vfprintf+0xee>
    29d0:	0c 5f       	subi	r16, 0xFC	; 252
    29d2:	1f 4f       	sbci	r17, 0xFF	; 255
    29d4:	ff e3       	ldi	r31, 0x3F	; 63
    29d6:	f9 83       	std	Y+1, r31	; 0x01
    29d8:	0d c0       	rjmp	.+26     	; 0x29f4 <vfprintf+0x108>
    29da:	83 36       	cpi	r24, 0x63	; 99
    29dc:	31 f0       	breq	.+12     	; 0x29ea <vfprintf+0xfe>
    29de:	83 37       	cpi	r24, 0x73	; 115
    29e0:	71 f0       	breq	.+28     	; 0x29fe <vfprintf+0x112>
    29e2:	83 35       	cpi	r24, 0x53	; 83
    29e4:	09 f0       	breq	.+2      	; 0x29e8 <vfprintf+0xfc>
    29e6:	5b c0       	rjmp	.+182    	; 0x2a9e <vfprintf+0x1b2>
    29e8:	22 c0       	rjmp	.+68     	; 0x2a2e <vfprintf+0x142>
    29ea:	f8 01       	movw	r30, r16
    29ec:	80 81       	ld	r24, Z
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	0e 5f       	subi	r16, 0xFE	; 254
    29f2:	1f 4f       	sbci	r17, 0xFF	; 255
    29f4:	44 24       	eor	r4, r4
    29f6:	43 94       	inc	r4
    29f8:	51 2c       	mov	r5, r1
    29fa:	54 01       	movw	r10, r8
    29fc:	15 c0       	rjmp	.+42     	; 0x2a28 <vfprintf+0x13c>
    29fe:	38 01       	movw	r6, r16
    2a00:	f2 e0       	ldi	r31, 0x02	; 2
    2a02:	6f 0e       	add	r6, r31
    2a04:	71 1c       	adc	r7, r1
    2a06:	f8 01       	movw	r30, r16
    2a08:	a0 80       	ld	r10, Z
    2a0a:	b1 80       	ldd	r11, Z+1	; 0x01
    2a0c:	26 ff       	sbrs	r18, 6
    2a0e:	03 c0       	rjmp	.+6      	; 0x2a16 <vfprintf+0x12a>
    2a10:	65 2d       	mov	r22, r5
    2a12:	70 e0       	ldi	r23, 0x00	; 0
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <vfprintf+0x12e>
    2a16:	6f ef       	ldi	r22, 0xFF	; 255
    2a18:	7f ef       	ldi	r23, 0xFF	; 255
    2a1a:	c5 01       	movw	r24, r10
    2a1c:	2c 87       	std	Y+12, r18	; 0x0c
    2a1e:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <strnlen>
    2a22:	2c 01       	movw	r4, r24
    2a24:	83 01       	movw	r16, r6
    2a26:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a28:	2f 77       	andi	r18, 0x7F	; 127
    2a2a:	22 2e       	mov	r2, r18
    2a2c:	17 c0       	rjmp	.+46     	; 0x2a5c <vfprintf+0x170>
    2a2e:	38 01       	movw	r6, r16
    2a30:	f2 e0       	ldi	r31, 0x02	; 2
    2a32:	6f 0e       	add	r6, r31
    2a34:	71 1c       	adc	r7, r1
    2a36:	f8 01       	movw	r30, r16
    2a38:	a0 80       	ld	r10, Z
    2a3a:	b1 80       	ldd	r11, Z+1	; 0x01
    2a3c:	26 ff       	sbrs	r18, 6
    2a3e:	03 c0       	rjmp	.+6      	; 0x2a46 <vfprintf+0x15a>
    2a40:	65 2d       	mov	r22, r5
    2a42:	70 e0       	ldi	r23, 0x00	; 0
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <vfprintf+0x15e>
    2a46:	6f ef       	ldi	r22, 0xFF	; 255
    2a48:	7f ef       	ldi	r23, 0xFF	; 255
    2a4a:	c5 01       	movw	r24, r10
    2a4c:	2c 87       	std	Y+12, r18	; 0x0c
    2a4e:	0e 94 48 16 	call	0x2c90	; 0x2c90 <strnlen_P>
    2a52:	2c 01       	movw	r4, r24
    2a54:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a56:	20 68       	ori	r18, 0x80	; 128
    2a58:	22 2e       	mov	r2, r18
    2a5a:	83 01       	movw	r16, r6
    2a5c:	23 fc       	sbrc	r2, 3
    2a5e:	1b c0       	rjmp	.+54     	; 0x2a96 <vfprintf+0x1aa>
    2a60:	83 2d       	mov	r24, r3
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	48 16       	cp	r4, r24
    2a66:	59 06       	cpc	r5, r25
    2a68:	b0 f4       	brcc	.+44     	; 0x2a96 <vfprintf+0x1aa>
    2a6a:	b7 01       	movw	r22, r14
    2a6c:	80 e2       	ldi	r24, 0x20	; 32
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2a74:	3a 94       	dec	r3
    2a76:	f4 cf       	rjmp	.-24     	; 0x2a60 <vfprintf+0x174>
    2a78:	f5 01       	movw	r30, r10
    2a7a:	27 fc       	sbrc	r2, 7
    2a7c:	85 91       	lpm	r24, Z+
    2a7e:	27 fe       	sbrs	r2, 7
    2a80:	81 91       	ld	r24, Z+
    2a82:	5f 01       	movw	r10, r30
    2a84:	b7 01       	movw	r22, r14
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2a8c:	31 10       	cpse	r3, r1
    2a8e:	3a 94       	dec	r3
    2a90:	f1 e0       	ldi	r31, 0x01	; 1
    2a92:	4f 1a       	sub	r4, r31
    2a94:	51 08       	sbc	r5, r1
    2a96:	41 14       	cp	r4, r1
    2a98:	51 04       	cpc	r5, r1
    2a9a:	71 f7       	brne	.-36     	; 0x2a78 <vfprintf+0x18c>
    2a9c:	e5 c0       	rjmp	.+458    	; 0x2c68 <vfprintf+0x37c>
    2a9e:	84 36       	cpi	r24, 0x64	; 100
    2aa0:	11 f0       	breq	.+4      	; 0x2aa6 <vfprintf+0x1ba>
    2aa2:	89 36       	cpi	r24, 0x69	; 105
    2aa4:	39 f5       	brne	.+78     	; 0x2af4 <vfprintf+0x208>
    2aa6:	f8 01       	movw	r30, r16
    2aa8:	27 ff       	sbrs	r18, 7
    2aaa:	07 c0       	rjmp	.+14     	; 0x2aba <vfprintf+0x1ce>
    2aac:	60 81       	ld	r22, Z
    2aae:	71 81       	ldd	r23, Z+1	; 0x01
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	93 81       	ldd	r25, Z+3	; 0x03
    2ab4:	0c 5f       	subi	r16, 0xFC	; 252
    2ab6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab8:	08 c0       	rjmp	.+16     	; 0x2aca <vfprintf+0x1de>
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	07 2e       	mov	r0, r23
    2ac0:	00 0c       	add	r0, r0
    2ac2:	88 0b       	sbc	r24, r24
    2ac4:	99 0b       	sbc	r25, r25
    2ac6:	0e 5f       	subi	r16, 0xFE	; 254
    2ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aca:	2f 76       	andi	r18, 0x6F	; 111
    2acc:	72 2e       	mov	r7, r18
    2ace:	97 ff       	sbrs	r25, 7
    2ad0:	09 c0       	rjmp	.+18     	; 0x2ae4 <vfprintf+0x1f8>
    2ad2:	90 95       	com	r25
    2ad4:	80 95       	com	r24
    2ad6:	70 95       	com	r23
    2ad8:	61 95       	neg	r22
    2ada:	7f 4f       	sbci	r23, 0xFF	; 255
    2adc:	8f 4f       	sbci	r24, 0xFF	; 255
    2ade:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae0:	20 68       	ori	r18, 0x80	; 128
    2ae2:	72 2e       	mov	r7, r18
    2ae4:	2a e0       	ldi	r18, 0x0A	; 10
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	a4 01       	movw	r20, r8
    2aea:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__ultoa_invert>
    2aee:	a8 2e       	mov	r10, r24
    2af0:	a8 18       	sub	r10, r8
    2af2:	44 c0       	rjmp	.+136    	; 0x2b7c <vfprintf+0x290>
    2af4:	85 37       	cpi	r24, 0x75	; 117
    2af6:	29 f4       	brne	.+10     	; 0x2b02 <vfprintf+0x216>
    2af8:	2f 7e       	andi	r18, 0xEF	; 239
    2afa:	b2 2e       	mov	r11, r18
    2afc:	2a e0       	ldi	r18, 0x0A	; 10
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	25 c0       	rjmp	.+74     	; 0x2b4c <vfprintf+0x260>
    2b02:	f2 2f       	mov	r31, r18
    2b04:	f9 7f       	andi	r31, 0xF9	; 249
    2b06:	bf 2e       	mov	r11, r31
    2b08:	8f 36       	cpi	r24, 0x6F	; 111
    2b0a:	c1 f0       	breq	.+48     	; 0x2b3c <vfprintf+0x250>
    2b0c:	18 f4       	brcc	.+6      	; 0x2b14 <vfprintf+0x228>
    2b0e:	88 35       	cpi	r24, 0x58	; 88
    2b10:	79 f0       	breq	.+30     	; 0x2b30 <vfprintf+0x244>
    2b12:	b4 c0       	rjmp	.+360    	; 0x2c7c <vfprintf+0x390>
    2b14:	80 37       	cpi	r24, 0x70	; 112
    2b16:	19 f0       	breq	.+6      	; 0x2b1e <vfprintf+0x232>
    2b18:	88 37       	cpi	r24, 0x78	; 120
    2b1a:	21 f0       	breq	.+8      	; 0x2b24 <vfprintf+0x238>
    2b1c:	af c0       	rjmp	.+350    	; 0x2c7c <vfprintf+0x390>
    2b1e:	2f 2f       	mov	r18, r31
    2b20:	20 61       	ori	r18, 0x10	; 16
    2b22:	b2 2e       	mov	r11, r18
    2b24:	b4 fe       	sbrs	r11, 4
    2b26:	0d c0       	rjmp	.+26     	; 0x2b42 <vfprintf+0x256>
    2b28:	8b 2d       	mov	r24, r11
    2b2a:	84 60       	ori	r24, 0x04	; 4
    2b2c:	b8 2e       	mov	r11, r24
    2b2e:	09 c0       	rjmp	.+18     	; 0x2b42 <vfprintf+0x256>
    2b30:	24 ff       	sbrs	r18, 4
    2b32:	0a c0       	rjmp	.+20     	; 0x2b48 <vfprintf+0x25c>
    2b34:	9f 2f       	mov	r25, r31
    2b36:	96 60       	ori	r25, 0x06	; 6
    2b38:	b9 2e       	mov	r11, r25
    2b3a:	06 c0       	rjmp	.+12     	; 0x2b48 <vfprintf+0x25c>
    2b3c:	28 e0       	ldi	r18, 0x08	; 8
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	05 c0       	rjmp	.+10     	; 0x2b4c <vfprintf+0x260>
    2b42:	20 e1       	ldi	r18, 0x10	; 16
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <vfprintf+0x260>
    2b48:	20 e1       	ldi	r18, 0x10	; 16
    2b4a:	32 e0       	ldi	r19, 0x02	; 2
    2b4c:	f8 01       	movw	r30, r16
    2b4e:	b7 fe       	sbrs	r11, 7
    2b50:	07 c0       	rjmp	.+14     	; 0x2b60 <vfprintf+0x274>
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	82 81       	ldd	r24, Z+2	; 0x02
    2b58:	93 81       	ldd	r25, Z+3	; 0x03
    2b5a:	0c 5f       	subi	r16, 0xFC	; 252
    2b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5e:	06 c0       	rjmp	.+12     	; 0x2b6c <vfprintf+0x280>
    2b60:	60 81       	ld	r22, Z
    2b62:	71 81       	ldd	r23, Z+1	; 0x01
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 5f       	subi	r16, 0xFE	; 254
    2b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b6c:	a4 01       	movw	r20, r8
    2b6e:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <__ultoa_invert>
    2b72:	a8 2e       	mov	r10, r24
    2b74:	a8 18       	sub	r10, r8
    2b76:	fb 2d       	mov	r31, r11
    2b78:	ff 77       	andi	r31, 0x7F	; 127
    2b7a:	7f 2e       	mov	r7, r31
    2b7c:	76 fe       	sbrs	r7, 6
    2b7e:	0b c0       	rjmp	.+22     	; 0x2b96 <vfprintf+0x2aa>
    2b80:	37 2d       	mov	r19, r7
    2b82:	3e 7f       	andi	r19, 0xFE	; 254
    2b84:	a5 14       	cp	r10, r5
    2b86:	50 f4       	brcc	.+20     	; 0x2b9c <vfprintf+0x2b0>
    2b88:	74 fe       	sbrs	r7, 4
    2b8a:	0a c0       	rjmp	.+20     	; 0x2ba0 <vfprintf+0x2b4>
    2b8c:	72 fc       	sbrc	r7, 2
    2b8e:	08 c0       	rjmp	.+16     	; 0x2ba0 <vfprintf+0x2b4>
    2b90:	37 2d       	mov	r19, r7
    2b92:	3e 7e       	andi	r19, 0xEE	; 238
    2b94:	05 c0       	rjmp	.+10     	; 0x2ba0 <vfprintf+0x2b4>
    2b96:	ba 2c       	mov	r11, r10
    2b98:	37 2d       	mov	r19, r7
    2b9a:	03 c0       	rjmp	.+6      	; 0x2ba2 <vfprintf+0x2b6>
    2b9c:	ba 2c       	mov	r11, r10
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <vfprintf+0x2b6>
    2ba0:	b5 2c       	mov	r11, r5
    2ba2:	34 ff       	sbrs	r19, 4
    2ba4:	0d c0       	rjmp	.+26     	; 0x2bc0 <vfprintf+0x2d4>
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	ea 0d       	add	r30, r10
    2baa:	f1 1d       	adc	r31, r1
    2bac:	80 81       	ld	r24, Z
    2bae:	80 33       	cpi	r24, 0x30	; 48
    2bb0:	11 f4       	brne	.+4      	; 0x2bb6 <vfprintf+0x2ca>
    2bb2:	39 7e       	andi	r19, 0xE9	; 233
    2bb4:	09 c0       	rjmp	.+18     	; 0x2bc8 <vfprintf+0x2dc>
    2bb6:	32 ff       	sbrs	r19, 2
    2bb8:	06 c0       	rjmp	.+12     	; 0x2bc6 <vfprintf+0x2da>
    2bba:	b3 94       	inc	r11
    2bbc:	b3 94       	inc	r11
    2bbe:	04 c0       	rjmp	.+8      	; 0x2bc8 <vfprintf+0x2dc>
    2bc0:	83 2f       	mov	r24, r19
    2bc2:	86 78       	andi	r24, 0x86	; 134
    2bc4:	09 f0       	breq	.+2      	; 0x2bc8 <vfprintf+0x2dc>
    2bc6:	b3 94       	inc	r11
    2bc8:	33 fd       	sbrc	r19, 3
    2bca:	13 c0       	rjmp	.+38     	; 0x2bf2 <vfprintf+0x306>
    2bcc:	30 ff       	sbrs	r19, 0
    2bce:	06 c0       	rjmp	.+12     	; 0x2bdc <vfprintf+0x2f0>
    2bd0:	5a 2c       	mov	r5, r10
    2bd2:	b3 14       	cp	r11, r3
    2bd4:	18 f4       	brcc	.+6      	; 0x2bdc <vfprintf+0x2f0>
    2bd6:	53 0c       	add	r5, r3
    2bd8:	5b 18       	sub	r5, r11
    2bda:	b3 2c       	mov	r11, r3
    2bdc:	b3 14       	cp	r11, r3
    2bde:	68 f4       	brcc	.+26     	; 0x2bfa <vfprintf+0x30e>
    2be0:	b7 01       	movw	r22, r14
    2be2:	80 e2       	ldi	r24, 0x20	; 32
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	3c 87       	std	Y+12, r19	; 0x0c
    2be8:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2bec:	b3 94       	inc	r11
    2bee:	3c 85       	ldd	r19, Y+12	; 0x0c
    2bf0:	f5 cf       	rjmp	.-22     	; 0x2bdc <vfprintf+0x2f0>
    2bf2:	b3 14       	cp	r11, r3
    2bf4:	10 f4       	brcc	.+4      	; 0x2bfa <vfprintf+0x30e>
    2bf6:	3b 18       	sub	r3, r11
    2bf8:	01 c0       	rjmp	.+2      	; 0x2bfc <vfprintf+0x310>
    2bfa:	31 2c       	mov	r3, r1
    2bfc:	34 ff       	sbrs	r19, 4
    2bfe:	12 c0       	rjmp	.+36     	; 0x2c24 <vfprintf+0x338>
    2c00:	b7 01       	movw	r22, r14
    2c02:	80 e3       	ldi	r24, 0x30	; 48
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	3c 87       	std	Y+12, r19	; 0x0c
    2c08:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c0c:	3c 85       	ldd	r19, Y+12	; 0x0c
    2c0e:	32 ff       	sbrs	r19, 2
    2c10:	17 c0       	rjmp	.+46     	; 0x2c40 <vfprintf+0x354>
    2c12:	31 fd       	sbrc	r19, 1
    2c14:	03 c0       	rjmp	.+6      	; 0x2c1c <vfprintf+0x330>
    2c16:	88 e7       	ldi	r24, 0x78	; 120
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <vfprintf+0x334>
    2c1c:	88 e5       	ldi	r24, 0x58	; 88
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	b7 01       	movw	r22, r14
    2c22:	0c c0       	rjmp	.+24     	; 0x2c3c <vfprintf+0x350>
    2c24:	83 2f       	mov	r24, r19
    2c26:	86 78       	andi	r24, 0x86	; 134
    2c28:	59 f0       	breq	.+22     	; 0x2c40 <vfprintf+0x354>
    2c2a:	31 ff       	sbrs	r19, 1
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <vfprintf+0x346>
    2c2e:	8b e2       	ldi	r24, 0x2B	; 43
    2c30:	01 c0       	rjmp	.+2      	; 0x2c34 <vfprintf+0x348>
    2c32:	80 e2       	ldi	r24, 0x20	; 32
    2c34:	37 fd       	sbrc	r19, 7
    2c36:	8d e2       	ldi	r24, 0x2D	; 45
    2c38:	b7 01       	movw	r22, r14
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c40:	a5 14       	cp	r10, r5
    2c42:	38 f4       	brcc	.+14     	; 0x2c52 <vfprintf+0x366>
    2c44:	b7 01       	movw	r22, r14
    2c46:	80 e3       	ldi	r24, 0x30	; 48
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c4e:	5a 94       	dec	r5
    2c50:	f7 cf       	rjmp	.-18     	; 0x2c40 <vfprintf+0x354>
    2c52:	aa 94       	dec	r10
    2c54:	f4 01       	movw	r30, r8
    2c56:	ea 0d       	add	r30, r10
    2c58:	f1 1d       	adc	r31, r1
    2c5a:	80 81       	ld	r24, Z
    2c5c:	b7 01       	movw	r22, r14
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c64:	a1 10       	cpse	r10, r1
    2c66:	f5 cf       	rjmp	.-22     	; 0x2c52 <vfprintf+0x366>
    2c68:	33 20       	and	r3, r3
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <vfprintf+0x382>
    2c6c:	51 ce       	rjmp	.-862    	; 0x2910 <vfprintf+0x24>
    2c6e:	b7 01       	movw	r22, r14
    2c70:	80 e2       	ldi	r24, 0x20	; 32
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <fputc>
    2c78:	3a 94       	dec	r3
    2c7a:	f6 cf       	rjmp	.-20     	; 0x2c68 <vfprintf+0x37c>
    2c7c:	f7 01       	movw	r30, r14
    2c7e:	86 81       	ldd	r24, Z+6	; 0x06
    2c80:	97 81       	ldd	r25, Z+7	; 0x07
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <vfprintf+0x39c>
    2c84:	8f ef       	ldi	r24, 0xFF	; 255
    2c86:	9f ef       	ldi	r25, 0xFF	; 255
    2c88:	2c 96       	adiw	r28, 0x0c	; 12
    2c8a:	e2 e1       	ldi	r30, 0x12	; 18
    2c8c:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__epilogue_restores__>

00002c90 <strnlen_P>:
    2c90:	fc 01       	movw	r30, r24
    2c92:	05 90       	lpm	r0, Z+
    2c94:	61 50       	subi	r22, 0x01	; 1
    2c96:	70 40       	sbci	r23, 0x00	; 0
    2c98:	01 10       	cpse	r0, r1
    2c9a:	d8 f7       	brcc	.-10     	; 0x2c92 <strnlen_P+0x2>
    2c9c:	80 95       	com	r24
    2c9e:	90 95       	com	r25
    2ca0:	8e 0f       	add	r24, r30
    2ca2:	9f 1f       	adc	r25, r31
    2ca4:	08 95       	ret

00002ca6 <strnlen>:
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	61 50       	subi	r22, 0x01	; 1
    2caa:	70 40       	sbci	r23, 0x00	; 0
    2cac:	01 90       	ld	r0, Z+
    2cae:	01 10       	cpse	r0, r1
    2cb0:	d8 f7       	brcc	.-10     	; 0x2ca8 <strnlen+0x2>
    2cb2:	80 95       	com	r24
    2cb4:	90 95       	com	r25
    2cb6:	8e 0f       	add	r24, r30
    2cb8:	9f 1f       	adc	r25, r31
    2cba:	08 95       	ret

00002cbc <strrev>:
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	67 2f       	mov	r22, r23
    2cc2:	71 91       	ld	r23, Z+
    2cc4:	77 23       	and	r23, r23
    2cc6:	e1 f7       	brne	.-8      	; 0x2cc0 <strrev+0x4>
    2cc8:	32 97       	sbiw	r30, 0x02	; 2
    2cca:	04 c0       	rjmp	.+8      	; 0x2cd4 <strrev+0x18>
    2ccc:	7c 91       	ld	r23, X
    2cce:	6d 93       	st	X+, r22
    2cd0:	70 83       	st	Z, r23
    2cd2:	62 91       	ld	r22, -Z
    2cd4:	ae 17       	cp	r26, r30
    2cd6:	bf 07       	cpc	r27, r31
    2cd8:	c8 f3       	brcs	.-14     	; 0x2ccc <strrev+0x10>
    2cda:	08 95       	ret

00002cdc <fputc>:
    2cdc:	0f 93       	push	r16
    2cde:	1f 93       	push	r17
    2ce0:	cf 93       	push	r28
    2ce2:	df 93       	push	r29
    2ce4:	fb 01       	movw	r30, r22
    2ce6:	23 81       	ldd	r18, Z+3	; 0x03
    2ce8:	21 fd       	sbrc	r18, 1
    2cea:	03 c0       	rjmp	.+6      	; 0x2cf2 <fputc+0x16>
    2cec:	8f ef       	ldi	r24, 0xFF	; 255
    2cee:	9f ef       	ldi	r25, 0xFF	; 255
    2cf0:	28 c0       	rjmp	.+80     	; 0x2d42 <fputc+0x66>
    2cf2:	22 ff       	sbrs	r18, 2
    2cf4:	16 c0       	rjmp	.+44     	; 0x2d22 <fputc+0x46>
    2cf6:	46 81       	ldd	r20, Z+6	; 0x06
    2cf8:	57 81       	ldd	r21, Z+7	; 0x07
    2cfa:	24 81       	ldd	r18, Z+4	; 0x04
    2cfc:	35 81       	ldd	r19, Z+5	; 0x05
    2cfe:	42 17       	cp	r20, r18
    2d00:	53 07       	cpc	r21, r19
    2d02:	44 f4       	brge	.+16     	; 0x2d14 <fputc+0x38>
    2d04:	a0 81       	ld	r26, Z
    2d06:	b1 81       	ldd	r27, Z+1	; 0x01
    2d08:	9d 01       	movw	r18, r26
    2d0a:	2f 5f       	subi	r18, 0xFF	; 255
    2d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0e:	31 83       	std	Z+1, r19	; 0x01
    2d10:	20 83       	st	Z, r18
    2d12:	8c 93       	st	X, r24
    2d14:	26 81       	ldd	r18, Z+6	; 0x06
    2d16:	37 81       	ldd	r19, Z+7	; 0x07
    2d18:	2f 5f       	subi	r18, 0xFF	; 255
    2d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1c:	37 83       	std	Z+7, r19	; 0x07
    2d1e:	26 83       	std	Z+6, r18	; 0x06
    2d20:	10 c0       	rjmp	.+32     	; 0x2d42 <fputc+0x66>
    2d22:	eb 01       	movw	r28, r22
    2d24:	09 2f       	mov	r16, r25
    2d26:	18 2f       	mov	r17, r24
    2d28:	00 84       	ldd	r0, Z+8	; 0x08
    2d2a:	f1 85       	ldd	r31, Z+9	; 0x09
    2d2c:	e0 2d       	mov	r30, r0
    2d2e:	09 95       	icall
    2d30:	89 2b       	or	r24, r25
    2d32:	e1 f6       	brne	.-72     	; 0x2cec <fputc+0x10>
    2d34:	8e 81       	ldd	r24, Y+6	; 0x06
    2d36:	9f 81       	ldd	r25, Y+7	; 0x07
    2d38:	01 96       	adiw	r24, 0x01	; 1
    2d3a:	9f 83       	std	Y+7, r25	; 0x07
    2d3c:	8e 83       	std	Y+6, r24	; 0x06
    2d3e:	81 2f       	mov	r24, r17
    2d40:	90 2f       	mov	r25, r16
    2d42:	df 91       	pop	r29
    2d44:	cf 91       	pop	r28
    2d46:	1f 91       	pop	r17
    2d48:	0f 91       	pop	r16
    2d4a:	08 95       	ret

00002d4c <__ultoa_invert>:
    2d4c:	fa 01       	movw	r30, r20
    2d4e:	aa 27       	eor	r26, r26
    2d50:	28 30       	cpi	r18, 0x08	; 8
    2d52:	51 f1       	breq	.+84     	; 0x2da8 <__ultoa_invert+0x5c>
    2d54:	20 31       	cpi	r18, 0x10	; 16
    2d56:	81 f1       	breq	.+96     	; 0x2db8 <__ultoa_invert+0x6c>
    2d58:	e8 94       	clt
    2d5a:	6f 93       	push	r22
    2d5c:	6e 7f       	andi	r22, 0xFE	; 254
    2d5e:	6e 5f       	subi	r22, 0xFE	; 254
    2d60:	7f 4f       	sbci	r23, 0xFF	; 255
    2d62:	8f 4f       	sbci	r24, 0xFF	; 255
    2d64:	9f 4f       	sbci	r25, 0xFF	; 255
    2d66:	af 4f       	sbci	r26, 0xFF	; 255
    2d68:	b1 e0       	ldi	r27, 0x01	; 1
    2d6a:	3e d0       	rcall	.+124    	; 0x2de8 <__ultoa_invert+0x9c>
    2d6c:	b4 e0       	ldi	r27, 0x04	; 4
    2d6e:	3c d0       	rcall	.+120    	; 0x2de8 <__ultoa_invert+0x9c>
    2d70:	67 0f       	add	r22, r23
    2d72:	78 1f       	adc	r23, r24
    2d74:	89 1f       	adc	r24, r25
    2d76:	9a 1f       	adc	r25, r26
    2d78:	a1 1d       	adc	r26, r1
    2d7a:	68 0f       	add	r22, r24
    2d7c:	79 1f       	adc	r23, r25
    2d7e:	8a 1f       	adc	r24, r26
    2d80:	91 1d       	adc	r25, r1
    2d82:	a1 1d       	adc	r26, r1
    2d84:	6a 0f       	add	r22, r26
    2d86:	71 1d       	adc	r23, r1
    2d88:	81 1d       	adc	r24, r1
    2d8a:	91 1d       	adc	r25, r1
    2d8c:	a1 1d       	adc	r26, r1
    2d8e:	20 d0       	rcall	.+64     	; 0x2dd0 <__ultoa_invert+0x84>
    2d90:	09 f4       	brne	.+2      	; 0x2d94 <__ultoa_invert+0x48>
    2d92:	68 94       	set
    2d94:	3f 91       	pop	r19
    2d96:	2a e0       	ldi	r18, 0x0A	; 10
    2d98:	26 9f       	mul	r18, r22
    2d9a:	11 24       	eor	r1, r1
    2d9c:	30 19       	sub	r19, r0
    2d9e:	30 5d       	subi	r19, 0xD0	; 208
    2da0:	31 93       	st	Z+, r19
    2da2:	de f6       	brtc	.-74     	; 0x2d5a <__ultoa_invert+0xe>
    2da4:	cf 01       	movw	r24, r30
    2da6:	08 95       	ret
    2da8:	46 2f       	mov	r20, r22
    2daa:	47 70       	andi	r20, 0x07	; 7
    2dac:	40 5d       	subi	r20, 0xD0	; 208
    2dae:	41 93       	st	Z+, r20
    2db0:	b3 e0       	ldi	r27, 0x03	; 3
    2db2:	0f d0       	rcall	.+30     	; 0x2dd2 <__ultoa_invert+0x86>
    2db4:	c9 f7       	brne	.-14     	; 0x2da8 <__ultoa_invert+0x5c>
    2db6:	f6 cf       	rjmp	.-20     	; 0x2da4 <__ultoa_invert+0x58>
    2db8:	46 2f       	mov	r20, r22
    2dba:	4f 70       	andi	r20, 0x0F	; 15
    2dbc:	40 5d       	subi	r20, 0xD0	; 208
    2dbe:	4a 33       	cpi	r20, 0x3A	; 58
    2dc0:	18 f0       	brcs	.+6      	; 0x2dc8 <__ultoa_invert+0x7c>
    2dc2:	49 5d       	subi	r20, 0xD9	; 217
    2dc4:	31 fd       	sbrc	r19, 1
    2dc6:	40 52       	subi	r20, 0x20	; 32
    2dc8:	41 93       	st	Z+, r20
    2dca:	02 d0       	rcall	.+4      	; 0x2dd0 <__ultoa_invert+0x84>
    2dcc:	a9 f7       	brne	.-22     	; 0x2db8 <__ultoa_invert+0x6c>
    2dce:	ea cf       	rjmp	.-44     	; 0x2da4 <__ultoa_invert+0x58>
    2dd0:	b4 e0       	ldi	r27, 0x04	; 4
    2dd2:	a6 95       	lsr	r26
    2dd4:	97 95       	ror	r25
    2dd6:	87 95       	ror	r24
    2dd8:	77 95       	ror	r23
    2dda:	67 95       	ror	r22
    2ddc:	ba 95       	dec	r27
    2dde:	c9 f7       	brne	.-14     	; 0x2dd2 <__ultoa_invert+0x86>
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	61 05       	cpc	r22, r1
    2de4:	71 05       	cpc	r23, r1
    2de6:	08 95       	ret
    2de8:	9b 01       	movw	r18, r22
    2dea:	ac 01       	movw	r20, r24
    2dec:	0a 2e       	mov	r0, r26
    2dee:	06 94       	lsr	r0
    2df0:	57 95       	ror	r21
    2df2:	47 95       	ror	r20
    2df4:	37 95       	ror	r19
    2df6:	27 95       	ror	r18
    2df8:	ba 95       	dec	r27
    2dfa:	c9 f7       	brne	.-14     	; 0x2dee <__ultoa_invert+0xa2>
    2dfc:	62 0f       	add	r22, r18
    2dfe:	73 1f       	adc	r23, r19
    2e00:	84 1f       	adc	r24, r20
    2e02:	95 1f       	adc	r25, r21
    2e04:	a0 1d       	adc	r26, r0
    2e06:	08 95       	ret

00002e08 <__prologue_saves__>:
    2e08:	2f 92       	push	r2
    2e0a:	3f 92       	push	r3
    2e0c:	4f 92       	push	r4
    2e0e:	5f 92       	push	r5
    2e10:	6f 92       	push	r6
    2e12:	7f 92       	push	r7
    2e14:	8f 92       	push	r8
    2e16:	9f 92       	push	r9
    2e18:	af 92       	push	r10
    2e1a:	bf 92       	push	r11
    2e1c:	cf 92       	push	r12
    2e1e:	df 92       	push	r13
    2e20:	ef 92       	push	r14
    2e22:	ff 92       	push	r15
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	ca 1b       	sub	r28, r26
    2e32:	db 0b       	sbc	r29, r27
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	09 94       	ijmp

00002e40 <__epilogue_restores__>:
    2e40:	2a 88       	ldd	r2, Y+18	; 0x12
    2e42:	39 88       	ldd	r3, Y+17	; 0x11
    2e44:	48 88       	ldd	r4, Y+16	; 0x10
    2e46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e52:	b9 84       	ldd	r11, Y+9	; 0x09
    2e54:	c8 84       	ldd	r12, Y+8	; 0x08
    2e56:	df 80       	ldd	r13, Y+7	; 0x07
    2e58:	ee 80       	ldd	r14, Y+6	; 0x06
    2e5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e60:	aa 81       	ldd	r26, Y+2	; 0x02
    2e62:	b9 81       	ldd	r27, Y+1	; 0x01
    2e64:	ce 0f       	add	r28, r30
    2e66:	d1 1d       	adc	r29, r1
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	ed 01       	movw	r28, r26
    2e74:	08 95       	ret

00002e76 <_exit>:
    2e76:	f8 94       	cli

00002e78 <__stop_program>:
    2e78:	ff cf       	rjmp	.-2      	; 0x2e78 <__stop_program>
