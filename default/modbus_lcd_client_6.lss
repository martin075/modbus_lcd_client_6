
modbus_lcd_client_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00003184  00003218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003184  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001bd  00800154  00800154  0000326c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000326c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000032c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004015  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013ae  00000000  00000000  000073e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001923  00000000  00000000  00008793  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000850  00000000  00000000  0000a0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c3e  00000000  00000000  0000a908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002dbe  00000000  00000000  0000b546  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000e304  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__ctors_end>
       4:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
       8:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
       c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      10:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      14:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      18:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      1c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      20:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      24:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      28:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      2c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      30:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      34:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      38:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      3c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      40:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_16>
      44:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      48:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_18>
      4c:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <__vector_19>
      50:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_20>
      54:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      58:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      5c:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      60:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      64:	0c 94 08 01 	jmp	0x210	; 0x210 <__bad_interrupt>
      68:	41 01       	movw	r8, r2
      6a:	48 01       	movw	r8, r16
      6c:	64 01       	movw	r12, r8
      6e:	52 01       	movw	r10, r4
      70:	59 01       	movw	r10, r18
      72:	64 01       	movw	r12, r8
      74:	6d 01       	movw	r12, r26
      76:	6d 01       	movw	r12, r26
      78:	6d 01       	movw	r12, r26
      7a:	6d 01       	movw	r12, r26
      7c:	6d 01       	movw	r12, r26
      7e:	6d 01       	movw	r12, r26
      80:	6d 01       	movw	r12, r26
      82:	6d 01       	movw	r12, r26
      84:	59 01       	movw	r10, r18
      86:	64 01       	movw	r12, r8
      88:	07 63       	ori	r16, 0x37	; 55
      8a:	42 36       	cpi	r20, 0x62	; 98
      8c:	b7 9b       	sbis	0x16, 7	; 22
      8e:	d8 a7       	std	Y+40, r29	; 0x28
      90:	1a 39       	cpi	r17, 0x9A	; 154
      92:	68 56       	subi	r22, 0x68	; 104
      94:	18 ae       	std	Y+56, r1	; 0x38
      96:	ba ab       	std	Y+50, r27	; 0x32
      98:	55 8c       	ldd	r5, Z+29	; 0x1d
      9a:	1d 3c       	cpi	r17, 0xCD	; 205
      9c:	b7 cc       	rjmp	.-1682   	; 0xfffffa0c <__eeprom_end+0xff7efa0c>
      9e:	57 63       	ori	r21, 0x37	; 55
      a0:	bd 6d       	ori	r27, 0xDD	; 221
      a2:	ed fd       	.word	0xfded	; ????
      a4:	75 3e       	cpi	r23, 0xE5	; 229
      a6:	f6 17       	cp	r31, r22
      a8:	72 31       	cpi	r23, 0x12	; 18
      aa:	bf 00       	.word	0x00bf	; ????
      ac:	00 00       	nop
      ae:	80 3f       	cpi	r24, 0xF0	; 240
      b0:	08 00       	.word	0x0008	; ????
      b2:	00 00       	nop
      b4:	be 92       	st	-X, r11
      b6:	24 49       	sbci	r18, 0x94	; 148
      b8:	12 3e       	cpi	r17, 0xE2	; 226
      ba:	ab aa       	std	Y+51, r10	; 0x33
      bc:	aa 2a       	or	r10, r26
      be:	be cd       	rjmp	.-1156   	; 0xfffffc3c <__eeprom_end+0xff7efc3c>
      c0:	cc cc       	rjmp	.-1640   	; 0xfffffa5a <__eeprom_end+0xff7efa5a>
      c2:	4c 3e       	cpi	r20, 0xEC	; 236
      c4:	00 00       	nop
      c6:	00 80       	ld	r0, Z
      c8:	be ab       	std	Y+54, r27	; 0x36
      ca:	aa aa       	std	Y+50, r10	; 0x32
      cc:	aa 3e       	cpi	r26, 0xEA	; 234
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	bf 00       	.word	0x00bf	; ????
      d4:	00 00       	nop
      d6:	80 3f       	cpi	r24, 0xF0	; 240
      d8:	00 00       	nop
      da:	00 00       	nop
      dc:	00 08       	sbc	r0, r0
      de:	41 78       	andi	r20, 0x81	; 129
      e0:	d3 bb       	out	0x13, r29	; 19
      e2:	43 87       	std	Z+11, r20	; 0x0b
      e4:	d1 13       	cpse	r29, r17
      e6:	3d 19       	sub	r19, r13
      e8:	0e 3c       	cpi	r16, 0xCE	; 206
      ea:	c3 bd       	out	0x23, r28	; 35
      ec:	42 82       	std	Z+2, r4	; 0x02
      ee:	ad 2b       	or	r26, r29
      f0:	3e 68       	ori	r19, 0x8E	; 142
      f2:	ec 82       	std	Y+4, r14	; 0x04
      f4:	76 be       	out	0x36, r7	; 54
      f6:	d9 8f       	std	Y+25, r29	; 0x19
      f8:	e1 a9       	ldd	r30, Z+49	; 0x31
      fa:	3e 4c       	sbci	r19, 0xCE	; 206
      fc:	80 ef       	ldi	r24, 0xF0	; 240
      fe:	ff be       	out	0x3f, r15	; 63
     100:	01 c4       	rjmp	.+2050   	; 0x904 <bmp085_avaragefilter+0x4>
     102:	ff 7f       	andi	r31, 0xFF	; 255
     104:	3f 00       	.word	0x003f	; ????
     106:	00 00       	nop
	...

0000010a <__trampolines_end>:
     10a:	68 50       	subi	r22, 0x08	; 8
     10c:	61 00       	.word	0x0061	; ????

0000010e <__c.2589>:
     10e:	53 36 3a 00                                         S6:.

00000112 <__c.2587>:
     112:	53 35 3a 00                                         S5:.

00000116 <__c.2585>:
     116:	53 34 3a 00                                         S4:.

0000011a <__c.2583>:
     11a:	53 33 3a 00                                         S3:.

0000011e <__c.2581>:
     11e:	53 32 3a 00                                         S2:.

00000122 <__c.2579>:
     122:	53 31 3a 00                                         S1:.

00000126 <__c.2571>:
     126:	2d 2d 2d 2d 00                                      ----.

0000012b <__c.2569>:
     12b:	4b 34 3a 00                                         K4:.

0000012f <__c.2567>:
     12f:	2d 2d 2d 2d 00                                      ----.

00000134 <__c.2565>:
     134:	4b 33 3a 00                                         K3:.

00000138 <__c.2563>:
     138:	2d 2d 2d 2d 00                                      ----.

0000013d <__c.2561>:
     13d:	4b 32 3a 00                                         K2:.

00000141 <__c.2559>:
     141:	2d 2d 2d 2d 00                                      ----.

00000146 <__c.2557>:
     146:	4b 31 3a 00                                         K1:.

0000014a <__c.2555>:
     14a:	2d 2d 2d 2d 00                                      ----.

0000014f <__c.2553>:
     14f:	4f 4b 00                                            OK.

00000152 <__c.2551>:
     152:	53 36 3a 00                                         S6:.

00000156 <__c.2549>:
     156:	2d 2d 2d 2d 00                                      ----.

0000015b <__c.2547>:
     15b:	4f 4b 00                                            OK.

0000015e <__c.2545>:
     15e:	53 35 3a 00                                         S5:.

00000162 <__c.2543>:
     162:	2d 2d 2d 2d 00                                      ----.

00000167 <__c.2541>:
     167:	4f 4b 00                                            OK.

0000016a <__c.2539>:
     16a:	53 34 3a 00                                         S4:.

0000016e <__c.2537>:
     16e:	2d 2d 2d 2d 00                                      ----.

00000173 <__c.2535>:
     173:	4f 4b 00                                            OK.

00000176 <__c.2533>:
     176:	53 33 3a 00                                         S3:.

0000017a <__c.2531>:
     17a:	2d 2d 2d 2d 00                                      ----.

0000017f <__c.2529>:
     17f:	4f 4b 00                                            OK.

00000182 <__c.2527>:
     182:	53 32 3a 00                                         S2:.

00000186 <__c.2525>:
     186:	2d 2d 2d 2d 00                                      ----.

0000018b <__c.2523>:
     18b:	4f 4b 00                                            OK.

0000018e <__c.2521>:
     18e:	53 31 3a 00                                         S1:.

00000192 <__c.2519>:
     192:	44 53 31 38 62 32 30 00                             DS18b20.

0000019a <__c.2517>:
     19a:	6b 6f 6e 74 72 6f 6c 61 20 73 6e 69 6d 61 63 6f     kontrola snimaco
     1aa:	76 00                                               v.

000001ac <__c.2515>:
     1ac:	20 6d 6f 64 62 75 73 20 74 65 6d 70 20 30 2e 32      modbus temp 0.2
     1bc:	0a 00                                               ..

000001be <userChar>:
     1be:	18 18 06 09 08 08 09 06 07 08 13 14 14 13 08 07     ................
     1ce:	00 10 08 08 08 08 10 00                             ........

000001d6 <__ctors_end>:
     1d6:	11 24       	eor	r1, r1
     1d8:	1f be       	out	0x3f, r1	; 63
     1da:	cf ef       	ldi	r28, 0xFF	; 255
     1dc:	d8 e0       	ldi	r29, 0x08	; 8
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	cd bf       	out	0x3d, r28	; 61

000001e2 <__do_copy_data>:
     1e2:	11 e0       	ldi	r17, 0x01	; 1
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b1 e0       	ldi	r27, 0x01	; 1
     1e8:	e4 e8       	ldi	r30, 0x84	; 132
     1ea:	f1 e3       	ldi	r31, 0x31	; 49
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__do_copy_data+0x10>
     1ee:	05 90       	lpm	r0, Z+
     1f0:	0d 92       	st	X+, r0
     1f2:	a4 35       	cpi	r26, 0x54	; 84
     1f4:	b1 07       	cpc	r27, r17
     1f6:	d9 f7       	brne	.-10     	; 0x1ee <__do_copy_data+0xc>

000001f8 <__do_clear_bss>:
     1f8:	23 e0       	ldi	r18, 0x03	; 3
     1fa:	a4 e5       	ldi	r26, 0x54	; 84
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <.do_clear_bss_start>

00000200 <.do_clear_bss_loop>:
     200:	1d 92       	st	X+, r1

00000202 <.do_clear_bss_start>:
     202:	a1 31       	cpi	r26, 0x11	; 17
     204:	b2 07       	cpc	r27, r18
     206:	e1 f7       	brne	.-8      	; 0x200 <.do_clear_bss_loop>
     208:	0e 94 b8 0b 	call	0x1770	; 0x1770 <main>
     20c:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <_exit>

00000210 <__bad_interrupt>:
     210:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000214 <timer0100us_start>:
volatile uint8_t outstate = 0;
volatile uint16_t inputRegisters[4];
volatile uint16_t holdingRegisters[12]= {40,41,42,43,44,45,47,48,24,28,15,0}; // values for example

void timer0100us_start(void) {
	TCCR0B|=(1<<CS01); //prescaler 8
     214:	85 b5       	in	r24, 0x25	; 37
     216:	82 60       	ori	r24, 0x02	; 2
     218:	85 bd       	out	0x25, r24	; 37
	TIMSK0|=(1<<TOIE0);
     21a:	ee e6       	ldi	r30, 0x6E	; 110
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	81 60       	ori	r24, 0x01	; 1
     222:	80 83       	st	Z, r24
     224:	08 95       	ret

00000226 <SetOuts>:

/*
*   Modify the following 3 functions to implement your own pin configurations...
*/
// output bits
void SetOuts(volatile uint8_t in) {
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	1f 92       	push	r1
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	89 83       	std	Y+1, r24	; 0x01
	//PORTD|= (((in & (1<<3))<<4) | ((in & (1<<4))<<1) | ((in & (1<<5))<<1));
	//PORTB|= (((in & (1<<0))<<2) | ((in & (1<<1))) | ((in & (1<<2))>>2));
	in=~in;
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	80 95       	com	r24
     236:	89 83       	std	Y+1, r24	; 0x01
	//PORTB&= ~(((in & (1<<0))<<2) | ((in & (1<<1))) | ((in & (1<<2))>>2));
	//PORTD&= ~(((in & (1<<3))<<4) | ((in & (1<<4))<<1) | ((in & (1<<5))<<1));
}
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <ReadIns>:
uint8_t ReadIns(void) {
	uint8_t ins=0x00;
	//ins|=(PINC&((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5)));
	//ins|=(((PIND&(1<<4))<<2)|((PIND&(1<<3))<<4));
	return ins;
}
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	08 95       	ret

00000244 <io_conf>:
void io_conf(void) { 
	/*
	 Outputs: PB2,PB1,PB0,PD5-rele,PD6-rele,PD7
	 Inputs: PC0, PC1, PC2, PC3, PC4, PC6, PD4, PD3
	*/
	DDRD=0x00;
     244:	1a b8       	out	0x0a, r1	; 10
	
	PORTD=0x00;
     246:	1b b8       	out	0x0b, r1	; 11
	PORTD|=(1<<0);
     248:	58 9a       	sbi	0x0b, 0	; 11
	//DDRD |= (1<<2)|(1<<5)|(1<<6)|(1<<7);
	DDRD |= (1<<2);
     24a:	52 9a       	sbi	0x0a, 2	; 10

	DDRD = (1<<PD5) | (1<<PD6);	// output for rele
     24c:	80 e6       	ldi	r24, 0x60	; 96
     24e:	8a b9       	out	0x0a, r24	; 10
	//PORTD |= (1<<PD5) | (1<<PD6); //set log.1
	PORTD &=~(1<<PD5);		// set log. 0
     250:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &=~(1<<PD6);		// set log. 0
     252:	5e 98       	cbi	0x0b, 6	; 11
     254:	08 95       	ret

00000256 <modbusGet>:
}




void modbusGet(void) {
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	1f 92       	push	r1
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
	if (modbusGetBusState() & (1<<ReceiveCompleted))
     260:	0e 94 64 08 	call	0x10c8	; 0x10c8 <modbusGetBusState>
     264:	83 ff       	sbrs	r24, 3
     266:	3c c0       	rjmp	.+120    	; 0x2e0 <modbusGet+0x8a>
	{
		switch(rxbuffer[1]) {
     268:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <rxbuffer+0x1>
     26c:	8e 2f       	mov	r24, r30
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	fc 01       	movw	r30, r24
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	e0 31       	cpi	r30, 0x10	; 16
     276:	f1 05       	cpc	r31, r1
     278:	80 f5       	brcc	.+96     	; 0x2da <modbusGet+0x84>
     27a:	ec 5c       	subi	r30, 0xCC	; 204
     27c:	ff 4f       	sbci	r31, 0xFF	; 255
     27e:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__tablejump2__>
			case fcReadCoilStatus: {
				modbusExchangeBits(&outstate,0,8);
     282:	48 e0       	ldi	r20, 0x08	; 8
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	84 e5       	ldi	r24, 0x54	; 84
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	07 c0       	rjmp	.+14     	; 0x29e <modbusGet+0x48>
			}
			break;
			
			case fcReadInputStatus: {
				volatile uint8_t inps = ReadIns();
     290:	19 82       	std	Y+1, r1	; 0x01
				modbusExchangeBits(&inps,0,8);
     292:	48 e0       	ldi	r20, 0x08	; 8
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	60 e0       	ldi	r22, 0x00	; 0
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	ce 01       	movw	r24, r28
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	0e 94 08 0b 	call	0x1610	; 0x1610 <modbusExchangeBits>
     2a2:	1e c0       	rjmp	.+60     	; 0x2e0 <modbusGet+0x8a>
				modbusExchangeRegisters(holdingRegisters,0,12);
			}
			break;
			
			case fcReadInputRegisters: {
				modbusExchangeRegisters(inputRegisters,0,4);
     2a4:	44 e0       	ldi	r20, 0x04	; 4
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	82 ee       	ldi	r24, 0xE2	; 226
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	11 c0       	rjmp	.+34     	; 0x2d4 <modbusGet+0x7e>
				modbusExchangeRegisters(holdingRegisters,0,12);
			}
			break;
			
			case fcForceMultipleCoils: {
				modbusExchangeBits(&outstate,0,8);
     2b2:	48 e0       	ldi	r20, 0x08	; 8
     2b4:	50 e0       	ldi	r21, 0x00	; 0
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	84 e5       	ldi	r24, 0x54	; 84
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	0e 94 08 0b 	call	0x1610	; 0x1610 <modbusExchangeBits>
				SetOuts(outstate);
     2c2:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     2c6:	0c c0       	rjmp	.+24     	; 0x2e0 <modbusGet+0x8a>
			}
			break;
			
			case fcPresetMultipleRegisters: {
				modbusExchangeRegisters(holdingRegisters,0,12);
     2c8:	4c e0       	ldi	r20, 0x0C	; 12
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	70 e0       	ldi	r23, 0x00	; 0
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	0e 94 80 0a 	call	0x1500	; 0x1500 <modbusExchangeRegisters>
     2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <modbusGet+0x8a>
			}
			break;
			
			default: {
				modbusSendException(ecIllegalFunction);
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	0e 94 45 0a 	call	0x148a	; 0x148a <modbusSendException>
			}
			break;
		}
	}
}
     2e0:	0f 90       	pop	r0
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	08 95       	ret

000002e8 <__vector_16>:
}


/// INTERRUPT ///

ISR(TIMER0_OVF_vect) { //this ISR is called 9765.625 times per second, CPU-20MHz
     2e8:	1f 92       	push	r1
     2ea:	0f 92       	push	r0
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	0f 92       	push	r0
     2f0:	11 24       	eor	r1, r1
     2f2:	2f 93       	push	r18
     2f4:	3f 93       	push	r19
     2f6:	4f 93       	push	r20
     2f8:	5f 93       	push	r21
     2fa:	6f 93       	push	r22
     2fc:	7f 93       	push	r23
     2fe:	8f 93       	push	r24
     300:	9f 93       	push	r25
     302:	af 93       	push	r26
     304:	bf 93       	push	r27
     306:	ef 93       	push	r30
     308:	ff 93       	push	r31
	modbusTickTimer();
     30a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <modbusTickTimer>
}
     30e:	ff 91       	pop	r31
     310:	ef 91       	pop	r30
     312:	bf 91       	pop	r27
     314:	af 91       	pop	r26
     316:	9f 91       	pop	r25
     318:	8f 91       	pop	r24
     31a:	7f 91       	pop	r23
     31c:	6f 91       	pop	r22
     31e:	5f 91       	pop	r21
     320:	4f 91       	pop	r20
     322:	3f 91       	pop	r19
     324:	2f 91       	pop	r18
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <toggle_e>:

#if LCD_IO_MODE
	/* toggle Enable Pin to initiate write */
	static void toggle_e( void)
	{
		lcd_e_high();
     330:	5f 9a       	sbi	0x0b, 7	; 11
		lcd_e_delay();
     332:	00 c0       	rjmp	.+0      	; 0x334 <toggle_e+0x4>
		lcd_e_low();
     334:	5f 98       	cbi	0x0b, 7	; 11
     336:	08 95       	ret

00000338 <lcd_write>:
				 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
	static void lcd_write( uint8_t data, uint8_t rs) 
	{
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	1f 92       	push	r1
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
		unsigned char dataBits ;


		if( rs)	/* write data		( RS=1, RW=0) */
     344:	66 23       	and	r22, r22
     346:	11 f0       	breq	.+4      	; 0x34c <lcd_write+0x14>
		{
			lcd_rs_high();
     348:	2c 9a       	sbi	0x05, 4	; 5
     34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_write+0x16>
		}
		else	/* write instruction ( RS=0, RW=0) */
		{
			lcd_rs_low();
     34c:	2c 98       	cbi	0x05, 4	; 5
		}
		lcd_rw_low();
     34e:	2d 98       	cbi	0x05, 5	; 5

		if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
				&& (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
		{
			/* configure data pins as output */
			DDR( LCD_DATA0_PORT) |= 0x0F;
     350:	94 b1       	in	r25, 0x04	; 4
     352:	9f 60       	ori	r25, 0x0F	; 15
     354:	94 b9       	out	0x04, r25	; 4

			/* output high nibble first */
			dataBits = LCD_DATA0_PORT & 0xF0;
     356:	95 b1       	in	r25, 0x05	; 5
     358:	19 2f       	mov	r17, r25
     35a:	10 7f       	andi	r17, 0xF0	; 240
			LCD_DATA0_PORT = dataBits | ((data>>4) & 0x0F);
     35c:	98 2f       	mov	r25, r24
     35e:	92 95       	swap	r25
     360:	9f 70       	andi	r25, 0x0F	; 15
     362:	91 2b       	or	r25, r17
     364:	95 b9       	out	0x05, r25	; 5
			lcd_e_toggle();
     366:	89 83       	std	Y+1, r24	; 0x01
     368:	0e 94 98 01 	call	0x330	; 0x330 <toggle_e>

			/* output low nibble */
			LCD_DATA0_PORT = dataBits | (data & 0x0F);
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	8f 70       	andi	r24, 0x0F	; 15
     370:	81 2b       	or	r24, r17
     372:	85 b9       	out	0x05, r24	; 5
			lcd_e_toggle();
     374:	0e 94 98 01 	call	0x330	; 0x330 <toggle_e>

			/* all data pins high ( inactive) */
			LCD_DATA0_PORT = dataBits | 0x0F;
     378:	1f 60       	ori	r17, 0x0F	; 15
     37a:	15 b9       	out	0x05, r17	; 5
			LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);
			LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);
			LCD_DATA2_PORT |= _BV( LCD_DATA2_PIN);
			LCD_DATA3_PORT |= _BV( LCD_DATA3_PIN);
		}
	}
     37c:	0f 90       	pop	r0
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	08 95       	ret

00000386 <lcd_read.constprop.0>:
	
	
	if( rs)
		lcd_rs_high();						/* RS=1: read data	  */
	else
		lcd_rs_low();						/* RS=0: read busy flag */
     386:	2c 98       	cbi	0x05, 4	; 5
	lcd_rw_high();							/* RW=1  read mode	  */
     388:	2d 9a       	sbi	0x05, 5	; 5
	
	if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
	  && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
     38a:	84 b1       	in	r24, 0x04	; 4
     38c:	80 7f       	andi	r24, 0xF0	; 240
     38e:	84 b9       	out	0x04, r24	; 4
		
		lcd_e_high();
     390:	5f 9a       	sbi	0x0b, 7	; 11
		lcd_e_delay();		
     392:	00 c0       	rjmp	.+0      	; 0x394 <lcd_read.constprop.0+0xe>
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     394:	93 b1       	in	r25, 0x03	; 3
		lcd_e_low();
     396:	5f 98       	cbi	0x0b, 7	; 11
		
		lcd_e_delay();						/* Enable 500ns low		*/
     398:	00 c0       	rjmp	.+0      	; 0x39a <lcd_read.constprop.0+0x14>
		
		lcd_e_high();
     39a:	5f 9a       	sbi	0x0b, 7	; 11
		lcd_e_delay();
     39c:	00 c0       	rjmp	.+0      	; 0x39e <lcd_read.constprop.0+0x18>
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
     39e:	23 b1       	in	r18, 0x03	; 3
     3a0:	2f 70       	andi	r18, 0x0F	; 15
	{
		DDR( LCD_DATA0_PORT) &= 0xF0;		 /* configure data pins as input */
		
		lcd_e_high();
		lcd_e_delay();		
		data = PIN( LCD_DATA0_PORT) << 4;	 /* read high nibble first */
     3a2:	89 2f       	mov	r24, r25
     3a4:	82 95       	swap	r24
     3a6:	80 7f       	andi	r24, 0xF0	; 240
		lcd_e_delay();						/* Enable 500ns low		*/
		
		lcd_e_high();
		lcd_e_delay();
		data |= PIN( LCD_DATA0_PORT) & 0x0F;	/* read low nibble		*/
		lcd_e_low();
     3a8:	5f 98       	cbi	0x0b, 7	; 11
		if( PIN( LCD_DATA2_PORT) & _BV( LCD_DATA2_PIN)) data |= 0x04;
		if( PIN( LCD_DATA3_PORT) & _BV( LCD_DATA3_PIN)) data |= 0x08;		
		lcd_e_low();
	}
	return data;
}
     3aa:	82 2b       	or	r24, r18
     3ac:	08 95       	ret

000003ae <lcd_waitbusy>:

{
	register uint8_t c;
	
	/* wait until busy flag is cleared */
	while ( (c = lcd_read( 0)) & (1 << LCD_BUSY)) {}
     3ae:	0e 94 c3 01 	call	0x386	; 0x386 <lcd_read.constprop.0>
     3b2:	87 fd       	sbrc	r24, 7
     3b4:	fc cf       	rjmp	.-8      	; 0x3ae <lcd_waitbusy>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     3b6:	88 e0       	ldi	r24, 0x08	; 8
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	01 97       	sbiw	r24, 0x01	; 1
     3bc:	f1 f7       	brne	.-4      	; 0x3ba <lcd_waitbusy+0xc>
	
	/* the address counter is updated 4us after the busy flag is cleared */
	delay( 2);

	/* now read the address counter */
	return ( lcd_read( 0));  // return address counter
     3be:	0c 94 c3 01 	jmp	0x386	; 0x386 <lcd_read.constprop.0>

000003c2 <lcd_command>:
Send LCD controller instruction command
Input:	instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
     3c2:	cf 93       	push	r28
     3c4:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     3c6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_waitbusy>
	lcd_write( cmd, 0);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	8c 2f       	mov	r24, r28
}
     3ce:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_command( uint8_t cmd)
{
	lcd_waitbusy();
	lcd_write( cmd, 0);
     3d0:	0c 94 9c 01 	jmp	0x338	; 0x338 <lcd_write>

000003d4 <lcd_data>:
Send data byte to LCD controller 
Input:	data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
     3d4:	cf 93       	push	r28
     3d6:	c8 2f       	mov	r28, r24
	lcd_waitbusy();
     3d8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_waitbusy>
	lcd_write( data, 1);
     3dc:	61 e0       	ldi	r22, 0x01	; 1
     3de:	8c 2f       	mov	r24, r28
}
     3e0:	cf 91       	pop	r28
Returns: none
*************************************************************************/
void lcd_data( uint8_t data)
{
	lcd_waitbusy();
	lcd_write( data, 1);
     3e2:	0c 94 9c 01 	jmp	0x338	; 0x338 <lcd_write>

000003e6 <lcd_gotoxy>:
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
	else
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
#endif
#if LCD_LINES == 4
	if( y == 0)
     3e6:	61 11       	cpse	r22, r1
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <lcd_gotoxy+0x8>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE1 + x);
     3ea:	80 58       	subi	r24, 0x80	; 128
     3ec:	09 c0       	rjmp	.+18     	; 0x400 <__LOCK_REGION_LENGTH__>
	else if( y == 1)
     3ee:	61 30       	cpi	r22, 0x01	; 1
     3f0:	11 f4       	brne	.+4      	; 0x3f6 <lcd_gotoxy+0x10>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE2 + x);
     3f2:	80 54       	subi	r24, 0x40	; 64
     3f4:	05 c0       	rjmp	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
	else if( y == 2)
     3f6:	62 30       	cpi	r22, 0x02	; 2
     3f8:	11 f4       	brne	.+4      	; 0x3fe <lcd_gotoxy+0x18>
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE3 + x);
     3fa:	8c 56       	subi	r24, 0x6C	; 108
     3fc:	01 c0       	rjmp	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
	else /* y == 3 */
		lcd_command( (1 << LCD_DDRAM) + LCD_START_LINE4 + x);
     3fe:	8c 52       	subi	r24, 0x2C	; 44
     400:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <lcd_command>

00000404 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy( void)
{
	return lcd_waitbusy();
     404:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_waitbusy>
}
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	08 95       	ret

0000040c <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr( void)
{
	lcd_command(1 << LCD_CLR);
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <lcd_command>

00000412 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home( void)
{
	lcd_command(1 << LCD_HOME);
     412:	82 e0       	ldi	r24, 0x02	; 2
     414:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <lcd_command>

00000418 <lcd_putc>:
Display character at current cursor position 
Input:	character to be displayed										
Returns:  none
*************************************************************************/
void lcd_putc( char c)
{
     418:	cf 93       	push	r28
     41a:	c8 2f       	mov	r28, r24
	uint8_t pos;


	pos = lcd_waitbusy();	// read busy-flag and address counter
     41c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_waitbusy>
     420:	98 2f       	mov	r25, r24
	if( c == '\n')
     422:	ca 30       	cpi	r28, 0x0A	; 10
     424:	a1 f4       	brne	.+40     	; 0x44e <lcd_putc+0x36>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
     426:	84 31       	cpi	r24, 0x14	; 20
     428:	48 f0       	brcs	.+18     	; 0x43c <lcd_putc+0x24>
		addressCounter = LCD_START_LINE2;
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
     42a:	80 ec       	ldi	r24, 0xC0	; 192
     42c:	89 0f       	add	r24, r25
     42e:	84 31       	cpi	r24, 0x14	; 20
     430:	38 f0       	brcs	.+14     	; 0x440 <lcd_putc+0x28>
		addressCounter = LCD_START_LINE3;
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
     432:	94 51       	subi	r25, 0x14	; 20
     434:	9c 32       	cpi	r25, 0x2C	; 44
     436:	30 f0       	brcs	.+12     	; 0x444 <lcd_putc+0x2c>
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	05 c0       	rjmp	.+10     	; 0x446 <lcd_putc+0x2e>
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#else
	if( pos < LCD_START_LINE3)
		addressCounter = LCD_START_LINE2;
     43c:	80 e4       	ldi	r24, 0x40	; 64
     43e:	03 c0       	rjmp	.+6      	; 0x446 <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE2) && (pos < LCD_START_LINE4))
		addressCounter = LCD_START_LINE3;
     440:	84 e1       	ldi	r24, 0x14	; 20
     442:	01 c0       	rjmp	.+2      	; 0x446 <lcd_putc+0x2e>
	else if( (pos >= LCD_START_LINE3) && (pos < LCD_START_LINE2))
		addressCounter = LCD_START_LINE4;
     444:	84 e5       	ldi	r24, 0x54	; 84
	else 
		addressCounter = LCD_START_LINE1;
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     446:	80 58       	subi	r24, 0x80	; 128
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
	}

}/* lcd_putc */
     448:	cf 91       	pop	r28
		addressCounter = LCD_START_LINE4;
	else 
		addressCounter = LCD_START_LINE1;
#endif
#endif
	lcd_command( (1 << LCD_DDRAM) + addressCounter);
     44a:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <lcd_command>
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     44e:	61 e0       	ldi	r22, 0x01	; 1
     450:	8c 2f       	mov	r24, r28
	}

}/* lcd_putc */
     452:	cf 91       	pop	r28
			lcd_write( (1 << LCD_DDRAM) + LCD_START_LINE1, 0);
		}
#endif
		lcd_waitbusy();
#endif
		lcd_write( c, 1);
     454:	0c 94 9c 01 	jmp	0x338	; 0x338 <lcd_write>

00000458 <lcd_puts>:
Input:	string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts( const char *s)
/* print string on lcd ( no auto linefeed) */
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
	register char c;

	while ( (c = *s++))
     45e:	89 91       	ld	r24, Y+
     460:	88 23       	and	r24, r24
     462:	19 f0       	breq	.+6      	; 0x46a <lcd_puts+0x12>
	{
		lcd_putc( c);
     464:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_putc>
     468:	fa cf       	rjmp	.-12     	; 0x45e <lcd_puts+0x6>
	}

}/* lcd_puts */
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <lcd_puts_p>:
Input:	 string from program memory be be displayed										
Returns:	none
*************************************************************************/
void lcd_puts_p( const char *progmem_s)
/* print string from program memory on lcd ( no auto linefeed) */
{
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	fc 01       	movw	r30, r24
	register char c;

	while ( ( c = pgm_read_byte( progmem_s++)))
     476:	84 91       	lpm	r24, Z
     478:	ef 01       	movw	r28, r30
     47a:	21 96       	adiw	r28, 0x01	; 1
     47c:	88 23       	and	r24, r24
     47e:	21 f0       	breq	.+8      	; 0x488 <lcd_puts_p+0x18>
	{
		lcd_putc( c);
     480:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_putc>
     484:	fe 01       	movw	r30, r28
     486:	f7 cf       	rjmp	.-18     	; 0x476 <lcd_puts_p+0x6>
	}

}/* lcd_puts_p */
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	08 95       	ret

0000048e <lcd_puthex_nibble>:
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_nibble(const unsigned char b)
{
    unsigned char  c = b & 0x0f;
     48e:	8f 70       	andi	r24, 0x0F	; 15
    if (c>9) c += 'A'-10;
     490:	8a 30       	cpi	r24, 0x0A	; 10
     492:	10 f0       	brcs	.+4      	; 0x498 <lcd_puthex_nibble+0xa>
     494:	89 5c       	subi	r24, 0xC9	; 201
     496:	01 c0       	rjmp	.+2      	; 0x49a <lcd_puthex_nibble+0xc>
    else c += '0';
     498:	80 5d       	subi	r24, 0xD0	; 208
    lcd_putc(c);
     49a:	0c 94 0c 02 	jmp	0x418	; 0x418 <lcd_putc>

0000049e <lcd_puthex_byte>:
This functions was created by Martin Thomas <eversmith@heizung-thomas.de>
for his UART library.  Adapted for the LCD lib by Tom Blough
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
     49e:	cf 93       	push	r28
     4a0:	c8 2f       	mov	r28, r24
    lcd_puthex_nibble(b>>4);
     4a2:	82 95       	swap	r24
     4a4:	8f 70       	andi	r24, 0x0F	; 15
     4a6:	0e 94 47 02 	call	0x48e	; 0x48e <lcd_puthex_nibble>
    lcd_puthex_nibble(b);
     4aa:	8c 2f       	mov	r24, r28
} /* lcd_puthex_byte */
     4ac:	cf 91       	pop	r28
Don't blame P. Fleury if it doesn't work ;-)
**************************************************************************/
void lcd_puthex_byte(const unsigned char  b)
{
    lcd_puthex_nibble(b>>4);
    lcd_puthex_nibble(b);
     4ae:	0c 94 47 02 	jmp	0x48e	; 0x48e <lcd_puthex_nibble>

000004b2 <lcd_init>:
					LCD_DISP_ON_CURSOR	  display on, cursor on
					LCD_DISP_CURSOR_BLINK	display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init( uint8_t dispAttr)
{
     4b2:	1f 93       	push	r17
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	18 2f       	mov	r17, r24
	}
	else if( (&LCD_DATA0_PORT == &LCD_DATA1_PORT) && (&LCD_DATA1_PORT == &LCD_DATA2_PORT) && (&LCD_DATA2_PORT == &LCD_DATA3_PORT)
			&& (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3))
	{
		/* configure all port bits as output ( all LCD data lines on same port, but control lines on different ports) */
		DDR( LCD_DATA0_PORT) |= 0x0F;
     4ba:	94 b1       	in	r25, 0x04	; 4
     4bc:	9f 60       	ori	r25, 0x0F	; 15
     4be:	94 b9       	out	0x04, r25	; 4
		DDR( LCD_RS_PORT) |= _BV( LCD_RS_PIN);
     4c0:	24 9a       	sbi	0x04, 4	; 4
		DDR( LCD_RW_PORT) |= _BV( LCD_RW_PIN);
     4c2:	25 9a       	sbi	0x04, 5	; 4
		DDR( LCD_E_PORT) |= _BV( LCD_E_PIN);
     4c4:	57 9a       	sbi	0x0a, 7	; 10
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     4c6:	e0 e0       	ldi	r30, 0x00	; 0
     4c8:	fa ef       	ldi	r31, 0xFA	; 250
     4ca:	31 97       	sbiw	r30, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <lcd_init+0x18>
		DDR( LCD_DATA3_PORT) |= _BV( LCD_DATA3_PIN);
	}
	delay(16000);		/* wait 16ms or more after power-on		*/
	
	/* initial write to lcd is 8bit */
	LCD_DATA1_PORT |= _BV( LCD_DATA1_PIN);  // _BV( LCD_FUNCTION)>>4;
     4ce:	29 9a       	sbi	0x05, 1	; 5
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
     4d0:	28 9a       	sbi	0x05, 0	; 5
	lcd_e_toggle();
     4d2:	0e 94 98 01 	call	0x330	; 0x330 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     4d6:	e0 e0       	ldi	r30, 0x00	; 0
     4d8:	fe e4       	ldi	r31, 0x4E	; 78
     4da:	31 97       	sbiw	r30, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <lcd_init+0x28>
	LCD_DATA0_PORT |= _BV( LCD_DATA0_PIN);  // _BV( LCD_FUNCTION_8BIT)>>4;
	lcd_e_toggle();
	delay( 4992);		 /* delay, busy flag can't be checked here */
	
	/* repeat last command */ 
	lcd_e_toggle();	  
     4de:	0e 94 98 01 	call	0x330	; 0x330 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     4e2:	c0 e0       	ldi	r28, 0x00	; 0
     4e4:	d1 e0       	ldi	r29, 0x01	; 1
     4e6:	fe 01       	movw	r30, r28
     4e8:	31 97       	sbiw	r30, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <lcd_init+0x36>
	/* repeat last command */ 
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */
	
	/* repeat last command a third time */
	lcd_e_toggle();	  
     4ec:	0e 94 98 01 	call	0x330	; 0x330 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     4f0:	fe 01       	movw	r30, r28
     4f2:	31 97       	sbiw	r30, 0x01	; 1
     4f4:	f1 f7       	brne	.-4      	; 0x4f2 <lcd_init+0x40>
	/* repeat last command a third time */
	lcd_e_toggle();	  
	delay( 64);			/* delay, busy flag can't be checked here */

	/* now configure for 4bit mode */
	LCD_DATA0_PORT &= ~_BV( LCD_DATA0_PIN);	// LCD_FUNCTION_4BIT_1LINE>>4
     4f6:	28 98       	cbi	0x05, 0	; 5
	lcd_e_toggle();
     4f8:	0e 94 98 01 	call	0x330	; 0x330 <toggle_e>
static inline void _delayFourCycles( unsigned int __count)
{
	if( __count == 0)	
		__asm__ __volatile__( "rjmp 1f\n 1:");	// 2 cycles
	else
		__asm__ __volatile__( 
     4fc:	21 97       	sbiw	r28, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <lcd_init+0x4a>
	/* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command( KS0073_4LINES_MODE);
	lcd_command( KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
     500:	88 e2       	ldi	r24, 0x28	; 40
     502:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_command>
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
     506:	88 e0       	ldi	r24, 0x08	; 8
     508:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_command>
	lcd_clrscr();							/* display clear				*/ 
     50c:	0e 94 06 02 	call	0x40c	; 0x40c <lcd_clrscr>
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
     510:	86 e0       	ldi	r24, 0x06	; 6
     512:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_command>
	lcd_command( dispAttr);				  /* display/cursor control		*/
     516:	81 2f       	mov	r24, r17

}/* lcd_init */
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
	lcd_command( LCD_FUNCTION_DEFAULT);	  /* function set: display lines  */
#endif
	lcd_command( LCD_DISP_OFF);			  /* display off				  */
	lcd_clrscr();							/* display clear				*/ 
	lcd_command( LCD_MODE_DEFAULT);		  /* set entry mode				*/
	lcd_command( dispAttr);				  /* display/cursor control		*/
     51e:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <lcd_command>

00000522 <ds18b20_reset>:
{
	uint8_t i=0,j=0; // i- presence pulse, j- bus release

	
	//low for 480us
	*Port &= ~(1<<Pin); // pin low
     522:	dc 01       	movw	r26, r24
     524:	4c 91       	ld	r20, X
     526:	21 e0       	ldi	r18, 0x01	; 1
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	06 2e       	mov	r0, r22
     52c:	01 c0       	rjmp	.+2      	; 0x530 <ds18b20_reset+0xe>
     52e:	22 0f       	add	r18, r18
     530:	0a 94       	dec	r0
     532:	ea f7       	brpl	.-6      	; 0x52e <ds18b20_reset+0xc>
     534:	52 2f       	mov	r21, r18
     536:	50 95       	com	r21
     538:	35 2f       	mov	r19, r21
     53a:	34 23       	and	r19, r20
     53c:	3c 93       	st	X, r19
	*(Port-1)|=(1<<Pin);  //pin as output
     53e:	fc 01       	movw	r30, r24
     540:	32 91       	ld	r19, -Z
     542:	23 2b       	or	r18, r19
     544:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     546:	af ec       	ldi	r26, 0xCF	; 207
     548:	b7 e0       	ldi	r27, 0x07	; 7
     54a:	11 97       	sbiw	r26, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <ds18b20_reset+0x28>
     54e:	00 c0       	rjmp	.+0      	; 0x550 <ds18b20_reset+0x2e>
     550:	00 00       	nop
	_delay_us(500); //480

	//release line and wait for 60uS
	*(Port-1) &= ~(1<<Pin); //pin as input without pullup
     552:	20 81       	ld	r18, Z
     554:	25 23       	and	r18, r21
     556:	20 83       	st	Z, r18
     558:	ef ee       	ldi	r30, 0xEF	; 239
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <ds18b20_reset+0x3a>
     560:	00 c0       	rjmp	.+0      	; 0x562 <ds18b20_reset+0x40>
     562:	00 00       	nop
	_delay_us(60); //60

	//get value and wait 420us
	
	if((*(Port-2))&(1<<Pin)) {i = 0;} else {i = 1;}
     564:	fc 01       	movw	r30, r24
     566:	32 97       	sbiw	r30, 0x02	; 2
     568:	20 81       	ld	r18, Z
     56a:	82 2f       	mov	r24, r18
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	06 2e       	mov	r0, r22
     570:	02 c0       	rjmp	.+4      	; 0x576 <ds18b20_reset+0x54>
     572:	95 95       	asr	r25
     574:	87 95       	ror	r24
     576:	0a 94       	dec	r0
     578:	e2 f7       	brpl	.-8      	; 0x572 <ds18b20_reset+0x50>
     57a:	81 70       	andi	r24, 0x01	; 1
     57c:	99 27       	eor	r25, r25
     57e:	9c 01       	movw	r18, r24
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	24 27       	eor	r18, r20
     584:	87 ee       	ldi	r24, 0xE7	; 231
     586:	93 e0       	ldi	r25, 0x03	; 3
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <ds18b20_reset+0x66>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <ds18b20_reset+0x6c>
     58e:	00 00       	nop
	_delay_us(250); //device after 15-60us pull down line for 60-240us
	if((*(Port-2))&(1<<Pin)) {j = 1;} else {j = 0;}
     590:	80 81       	ld	r24, Z
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	02 c0       	rjmp	.+4      	; 0x59a <ds18b20_reset+0x78>
     596:	95 95       	asr	r25
     598:	87 95       	ror	r24
     59a:	6a 95       	dec	r22
     59c:	e2 f7       	brpl	.-8      	; 0x596 <ds18b20_reset+0x74>
	//return presence bit(0-no device,1-device OK)

	return (i & j);
     59e:	82 23       	and	r24, r18
     5a0:	93 23       	and	r25, r19
}
     5a2:	81 70       	andi	r24, 0x01	; 1
     5a4:	08 95       	ret

000005a6 <ds18b20_writebit>:

/*
 * write one bit
 */
void ds18b20_writebit(volatile unsigned char *Port, unsigned char Pin, uint8_t bit)
{
     5a6:	fc 01       	movw	r30, r24
	//low for 1uS
	*Port &= ~ (1<<Pin);
     5a8:	20 81       	ld	r18, Z
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <ds18b20_writebit+0xc>
     5b0:	88 0f       	add	r24, r24
     5b2:	6a 95       	dec	r22
     5b4:	ea f7       	brpl	.-6      	; 0x5b0 <ds18b20_writebit+0xa>
     5b6:	98 2f       	mov	r25, r24
     5b8:	90 95       	com	r25
     5ba:	29 23       	and	r18, r25
     5bc:	20 83       	st	Z, r18
	 //output
	*(Port-1)|=(1<<Pin);
     5be:	22 91       	ld	r18, -Z
     5c0:	82 2b       	or	r24, r18
     5c2:	80 83       	st	Z, r24
     5c4:	85 e0       	ldi	r24, 0x05	; 5
     5c6:	8a 95       	dec	r24
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <ds18b20_writebit+0x20>
     5ca:	00 00       	nop
	_delay_us(1);	//1uS
	//if we want to write 1, release the line (if not will keep low)
	if(bit)
     5cc:	44 23       	and	r20, r20
     5ce:	19 f0       	breq	.+6      	; 0x5d6 <ds18b20_writebit+0x30>
		*(Port-1) &= ~ (1<<Pin);  //input
     5d0:	80 81       	ld	r24, Z
     5d2:	89 23       	and	r24, r25
     5d4:	80 83       	st	Z, r24
     5d6:	af ee       	ldi	r26, 0xEF	; 239
     5d8:	b0 e0       	ldi	r27, 0x00	; 0
     5da:	11 97       	sbiw	r26, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <ds18b20_writebit+0x34>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <ds18b20_writebit+0x3a>
     5e0:	00 00       	nop
	//wait 60uS and release the line
	_delay_us(60);	//60
	*(Port-1) &= ~ (1<<Pin); //input
     5e2:	80 81       	ld	r24, Z
     5e4:	89 23       	and	r24, r25
     5e6:	80 83       	st	Z, r24
     5e8:	08 95       	ret

000005ea <ds18b20_readbit>:
{
	uint8_t bit=0;

	//low for 1uS
	//low
	*Port &= ~(1<<Pin);
     5ea:	fc 01       	movw	r30, r24
     5ec:	40 81       	ld	r20, Z
     5ee:	21 e0       	ldi	r18, 0x01	; 1
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	06 2e       	mov	r0, r22
     5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <ds18b20_readbit+0xe>
     5f6:	22 0f       	add	r18, r18
     5f8:	0a 94       	dec	r0
     5fa:	ea f7       	brpl	.-6      	; 0x5f6 <ds18b20_readbit+0xc>
     5fc:	52 2f       	mov	r21, r18
     5fe:	50 95       	com	r21
     600:	35 2f       	mov	r19, r21
     602:	34 23       	and	r19, r20
     604:	30 83       	st	Z, r19
	 //output
	*(Port-1) |= (1<<Pin);
     606:	32 91       	ld	r19, -Z
     608:	23 2b       	or	r18, r19
     60a:	20 83       	st	Z, r18
     60c:	25 e0       	ldi	r18, 0x05	; 5
     60e:	2a 95       	dec	r18
     610:	f1 f7       	brne	.-4      	; 0x60e <ds18b20_readbit+0x24>
     612:	00 00       	nop
	_delay_us(1);	//1

	//release line and wait for 14uS
	//input
	*(Port-1) &= ~(1<<Pin);
     614:	20 81       	ld	r18, Z
     616:	25 23       	and	r18, r21
     618:	20 83       	st	Z, r18
     61a:	ea e4       	ldi	r30, 0x4A	; 74
     61c:	ea 95       	dec	r30
     61e:	f1 f7       	brne	.-4      	; 0x61c <ds18b20_readbit+0x32>
     620:	00 c0       	rjmp	.+0      	; 0x622 <ds18b20_readbit+0x38>
	_delay_us(14);	//10

	//read the value
	if( (*(Port-2)) & (1<<Pin) )
     622:	fc 01       	movw	r30, r24
     624:	32 97       	sbiw	r30, 0x02	; 2
     626:	80 81       	ld	r24, Z
     628:	e3 ed       	ldi	r30, 0xD3	; 211
     62a:	f0 e0       	ldi	r31, 0x00	; 0
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	f1 f7       	brne	.-4      	; 0x62c <ds18b20_readbit+0x42>
     630:	00 c0       	rjmp	.+0      	; 0x632 <ds18b20_readbit+0x48>
     632:	00 00       	nop
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	02 c0       	rjmp	.+4      	; 0x63c <ds18b20_readbit+0x52>
     638:	95 95       	asr	r25
     63a:	87 95       	ror	r24
     63c:	6a 95       	dec	r22
     63e:	e2 f7       	brpl	.-8      	; 0x638 <ds18b20_readbit+0x4e>
		bit=1;

	//wait 45uS and return read value
	_delay_us(53);	//53
	return bit;
}
     640:	81 70       	andi	r24, 0x01	; 1
     642:	08 95       	ret

00000644 <ds18b20_writebyte>:

/*
 * write one byte
 */
void ds18b20_writebyte(volatile unsigned char *Port, unsigned char Pin, uint8_t byte)
{
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	8c 01       	movw	r16, r24
     650:	f6 2e       	mov	r15, r22
     652:	d4 2f       	mov	r29, r20
	uint8_t i=8;
	while(i--){
     654:	c9 e0       	ldi	r28, 0x09	; 9
     656:	c1 50       	subi	r28, 0x01	; 1
     658:	41 f0       	breq	.+16     	; 0x66a <ds18b20_writebyte+0x26>
		ds18b20_writebit(Port, Pin, byte&1);
     65a:	4d 2f       	mov	r20, r29
     65c:	41 70       	andi	r20, 0x01	; 1
     65e:	6f 2d       	mov	r22, r15
     660:	c8 01       	movw	r24, r16
     662:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <ds18b20_writebit>
		byte >>= 1;
     666:	d6 95       	lsr	r29
     668:	f6 cf       	rjmp	.-20     	; 0x656 <ds18b20_writebyte+0x12>
	}
}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	08 95       	ret

00000676 <ds18b20_readbyte>:

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(volatile unsigned char *Port, unsigned char Pin)
{
     676:	ff 92       	push	r15
     678:	0f 93       	push	r16
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	8c 01       	movw	r16, r24
     682:	f6 2e       	mov	r15, r22
	uint8_t i=8, n=0;
	while(i--){
     684:	d9 e0       	ldi	r29, 0x09	; 9
/*
 * read one byte
 */
uint8_t ds18b20_readbyte(volatile unsigned char *Port, unsigned char Pin)
{
	uint8_t i=8, n=0;
     686:	c0 e0       	ldi	r28, 0x00	; 0
     688:	d1 50       	subi	r29, 0x01	; 1
	while(i--){
     68a:	59 f0       	breq	.+22     	; 0x6a2 <ds18b20_readbyte+0x2c>
		n >>= 1;
		n |= (ds18b20_readbit(Port, Pin)<<7);
     68c:	6f 2d       	mov	r22, r15
     68e:	c8 01       	movw	r24, r16
     690:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ds18b20_readbit>
     694:	20 e8       	ldi	r18, 0x80	; 128
     696:	82 9f       	mul	r24, r18
     698:	c0 01       	movw	r24, r0
     69a:	11 24       	eor	r1, r1
 */
uint8_t ds18b20_readbyte(volatile unsigned char *Port, unsigned char Pin)
{
	uint8_t i=8, n=0;
	while(i--){
		n >>= 1;
     69c:	c6 95       	lsr	r28
		n |= (ds18b20_readbit(Port, Pin)<<7);
     69e:	c8 2b       	or	r28, r24
     6a0:	f3 cf       	rjmp	.-26     	; 0x688 <ds18b20_readbyte+0x12>
	}
	return n;
}
     6a2:	8c 2f       	mov	r24, r28
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	ff 90       	pop	r15
     6ae:	08 95       	ret

000006b0 <read_ROM_CODE>:
/*
	* read ROM code from sensor, and print it on LCD on actual position
*/

void read_ROM_CODE(volatile unsigned char *Port, unsigned char Pin)
{
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	28 97       	sbiw	r28, 0x08	; 8
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	7c 01       	movw	r14, r24
     6d0:	d6 2e       	mov	r13, r22
	volatile unsigned char ROM_code[8];
	unsigned i,j;
	cli(); // disable interrupts
     6d2:	f8 94       	cli
	ds18b20_reset(Port, Pin); //reset OW bus
     6d4:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_reset>
	}
	//return(ROM_code);
	*/


	ds18b20_writebyte(Port, Pin, DS18B20_CMD_READROM); //read ROM
     6d8:	43 e3       	ldi	r20, 0x33	; 51
     6da:	6d 2d       	mov	r22, r13
     6dc:	c7 01       	movw	r24, r14
     6de:	0e 94 22 03 	call	0x644	; 0x644 <ds18b20_writebyte>
	for(i=0;i<8;i++)
     6e2:	00 e0       	ldi	r16, 0x00	; 0
     6e4:	10 e0       	ldi	r17, 0x00	; 0
	{
		ROM_code[i] = ds18b20_readbyte(Port, Pin);
     6e6:	6d 2d       	mov	r22, r13
     6e8:	c7 01       	movw	r24, r14
     6ea:	0e 94 3b 03 	call	0x676	; 0x676 <ds18b20_readbyte>
     6ee:	e1 e0       	ldi	r30, 0x01	; 1
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	ec 0f       	add	r30, r28
     6f4:	fd 1f       	adc	r31, r29
     6f6:	e0 0f       	add	r30, r16
     6f8:	f1 1f       	adc	r31, r17
     6fa:	80 83       	st	Z, r24
	//return(ROM_code);
	*/


	ds18b20_writebyte(Port, Pin, DS18B20_CMD_READROM); //read ROM
	for(i=0;i<8;i++)
     6fc:	0f 5f       	subi	r16, 0xFF	; 255
     6fe:	1f 4f       	sbci	r17, 0xFF	; 255
     700:	08 30       	cpi	r16, 0x08	; 8
     702:	11 05       	cpc	r17, r1
     704:	81 f7       	brne	.-32     	; 0x6e6 <read_ROM_CODE+0x36>
     706:	00 e0       	ldi	r16, 0x00	; 0
     708:	10 e0       	ldi	r17, 0x00	; 0
	}
	//sei(); // enable interrupts
	
	for(j=0;j<8;j++)
	{
		lcd_puthex_byte(ROM_code[j]);
     70a:	e1 e0       	ldi	r30, 0x01	; 1
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	ec 0f       	add	r30, r28
     710:	fd 1f       	adc	r31, r29
     712:	e0 0f       	add	r30, r16
     714:	f1 1f       	adc	r31, r17
     716:	80 81       	ld	r24, Z
     718:	0e 94 4f 02 	call	0x49e	; 0x49e <lcd_puthex_byte>
	{
		ROM_code[i] = ds18b20_readbyte(Port, Pin);
	}
	//sei(); // enable interrupts
	
	for(j=0;j<8;j++)
     71c:	0f 5f       	subi	r16, 0xFF	; 255
     71e:	1f 4f       	sbci	r17, 0xFF	; 255
     720:	08 30       	cpi	r16, 0x08	; 8
     722:	11 05       	cpc	r17, r1
     724:	91 f7       	brne	.-28     	; 0x70a <read_ROM_CODE+0x5a>
	{
		lcd_puthex_byte(ROM_code[j]);
	}
}
     726:	28 96       	adiw	r28, 0x08	; 8
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	ff 90       	pop	r15
     73c:	ef 90       	pop	r14
     73e:	df 90       	pop	r13
     740:	08 95       	ret

00000742 <ds18b20_gettemp>:

/*
 * get temperature
 */
int16_t ds18b20_gettemp(volatile unsigned char *Port, unsigned char Pin)
{
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	ec 01       	movw	r28, r24
     74c:	16 2f       	mov	r17, r22

	//#if DS18B20_STOPINTERRUPTONREAD == 1
	//cli(); //interrupt deny 
	//#endif

	ds18b20_reset(Port, Pin); //reset
     74e:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_reset>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_SKIPROM); //skip ROM
     752:	4c ec       	ldi	r20, 0xCC	; 204
     754:	61 2f       	mov	r22, r17
     756:	ce 01       	movw	r24, r28
     758:	0e 94 22 03 	call	0x644	; 0x644 <ds18b20_writebyte>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_CONVERTTEMP); //start temperature conversion
     75c:	44 e4       	ldi	r20, 0x44	; 68
     75e:	61 2f       	mov	r22, r17
     760:	ce 01       	movw	r24, r28
     762:	0e 94 22 03 	call	0x644	; 0x644 <ds18b20_writebyte>

	while(!ds18b20_readbit(Port, Pin)); //wait until conversion is complete
     766:	61 2f       	mov	r22, r17
     768:	ce 01       	movw	r24, r28
     76a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ds18b20_readbit>
     76e:	88 23       	and	r24, r24
     770:	d1 f3       	breq	.-12     	; 0x766 <ds18b20_gettemp+0x24>

	ds18b20_reset(Port, Pin); //reset
     772:	61 2f       	mov	r22, r17
     774:	ce 01       	movw	r24, r28
     776:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_reset>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_SKIPROM); //skip ROM
     77a:	4c ec       	ldi	r20, 0xCC	; 204
     77c:	61 2f       	mov	r22, r17
     77e:	ce 01       	movw	r24, r28
     780:	0e 94 22 03 	call	0x644	; 0x644 <ds18b20_writebyte>
	ds18b20_writebyte(Port, Pin, DS18B20_CMD_RSCRATCHPAD); //read scratchpad
     784:	4e eb       	ldi	r20, 0xBE	; 190
     786:	61 2f       	mov	r22, r17
     788:	ce 01       	movw	r24, r28
     78a:	0e 94 22 03 	call	0x644	; 0x644 <ds18b20_writebyte>

	//read 2 byte from scratchpad
	temperature_l = ds18b20_readbyte(Port, Pin);
     78e:	61 2f       	mov	r22, r17
     790:	ce 01       	movw	r24, r28
     792:	0e 94 3b 03 	call	0x676	; 0x676 <ds18b20_readbyte>
     796:	08 2f       	mov	r16, r24
	temperature_h = ds18b20_readbyte(Port, Pin);
     798:	61 2f       	mov	r22, r17
     79a:	ce 01       	movw	r24, r28
     79c:	0e 94 3b 03 	call	0x676	; 0x676 <ds18b20_readbyte>
     7a0:	c8 2f       	mov	r28, r24
	sign = (temperature_h >> 4) & 0x0F;
     7a2:	82 95       	swap	r24
     7a4:	8f 70       	andi	r24, 0x0F	; 15

	//#if DS18B20_STOPINTERRUPTONREAD == 1
	//sei();  //interrupt allow
	//#endif
	
	if(sign == 0)
     7a6:	09 f5       	brne	.+66     	; 0x7ea <ds18b20_gettemp+0xa8>
  	{
	teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
     7a8:	20 e1       	ldi	r18, 0x10	; 16
     7aa:	c2 9f       	mul	r28, r18
     7ac:	c0 01       	movw	r24, r0
     7ae:	11 24       	eor	r1, r1
     7b0:	20 2f       	mov	r18, r16
     7b2:	22 95       	swap	r18
     7b4:	2f 70       	andi	r18, 0x0F	; 15
     7b6:	82 2b       	or	r24, r18
	desatiny = (temperature_l & 0x0F) * 0.625;
  	retd = 10 * teplota;  
     7b8:	2a e0       	ldi	r18, 0x0A	; 10
     7ba:	28 9f       	mul	r18, r24
     7bc:	e0 01       	movw	r28, r0
     7be:	29 9f       	mul	r18, r25
     7c0:	d0 0d       	add	r29, r0
     7c2:	11 24       	eor	r1, r1
	//#endif
	
	if(sign == 0)
  	{
	teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
	desatiny = (temperature_l & 0x0F) * 0.625;
     7c4:	60 2f       	mov	r22, r16
     7c6:	6f 70       	andi	r22, 0x0F	; 15
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 00 13 	call	0x2600	; 0x2600 <__floatsisf>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e2       	ldi	r20, 0x20	; 32
     7d8:	5f e3       	ldi	r21, 0x3F	; 63
     7da:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     7de:	0e 94 cf 12 	call	0x259e	; 0x259e <__fixunssfsi>
  	retd = 10 * teplota;  
	retd = retd + desatiny;
     7e2:	ce 01       	movw	r24, r28
     7e4:	86 0f       	add	r24, r22
     7e6:	91 1d       	adc	r25, r1
     7e8:	26 c0       	rjmp	.+76     	; 0x836 <ds18b20_gettemp+0xf4>
	}
 else
    {
	temperature_l =~ temperature_l;
     7ea:	00 95       	com	r16
	temperature_h =~ temperature_h;
    teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
    desatiny = ((temperature_l + 1) & 0x0F) * 0.625;
     7ec:	60 2f       	mov	r22, r16
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	6f 5f       	subi	r22, 0xFF	; 255
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	6f 70       	andi	r22, 0x0F	; 15
     7f6:	77 27       	eor	r23, r23
     7f8:	07 2e       	mov	r0, r23
     7fa:	00 0c       	add	r0, r0
     7fc:	88 0b       	sbc	r24, r24
     7fe:	99 0b       	sbc	r25, r25
     800:	0e 94 00 13 	call	0x2600	; 0x2600 <__floatsisf>
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e2       	ldi	r20, 0x20	; 32
     80a:	5f e3       	ldi	r21, 0x3F	; 63
     80c:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
     810:	0e 94 cf 12 	call	0x259e	; 0x259e <__fixunssfsi>
	retd = retd + desatiny;
	}
 else
    {
	temperature_l =~ temperature_l;
	temperature_h =~ temperature_h;
     814:	c0 95       	com	r28
    teplota = (temperature_l & 0xF0) >> 4 | (temperature_h & 0x0F) << 4 ;   // signed teplota
     816:	20 e1       	ldi	r18, 0x10	; 16
     818:	c2 9f       	mul	r28, r18
     81a:	c0 01       	movw	r24, r0
     81c:	11 24       	eor	r1, r1
     81e:	02 95       	swap	r16
     820:	0f 70       	andi	r16, 0x0F	; 15
     822:	80 2b       	or	r24, r16
    desatiny = ((temperature_l + 1) & 0x0F) * 0.625;
    retd = (teplota*10+desatiny)*(-1);
     824:	2a e0       	ldi	r18, 0x0A	; 10
     826:	82 9f       	mul	r24, r18
     828:	c0 01       	movw	r24, r0
     82a:	11 24       	eor	r1, r1
     82c:	86 0f       	add	r24, r22
     82e:	91 1d       	adc	r25, r1
     830:	91 95       	neg	r25
     832:	81 95       	neg	r24
     834:	91 09       	sbc	r25, r1
	}
	sei();
     836:	78 94       	sei
//PORTB |= (1 << PB5); // set high
//_delay_ms(200);
//************************************************

	return retd; // output in decicelsius *10
}
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	08 95       	ret

00000842 <bmp085_writemem>:
#include BMP085_I2CFLEURYPATH

/*
 * i2c write
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	1f 92       	push	r1
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	18 2f       	mov	r17, r24
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     850:	8e ee       	ldi	r24, 0xEE	; 238
     852:	69 83       	std	Y+1, r22	; 0x01
     854:	0e 94 0e 08 	call	0x101c	; 0x101c <i2c_start_wait>
	i2c_write(reg);
     858:	81 2f       	mov	r24, r17
     85a:	0e 94 3f 08 	call	0x107e	; 0x107e <i2c_write>
	i2c_write(value);
     85e:	69 81       	ldd	r22, Y+1	; 0x01
     860:	86 2f       	mov	r24, r22
     862:	0e 94 3f 08 	call	0x107e	; 0x107e <i2c_write>
	i2c_stop();
}
     866:	0f 90       	pop	r0
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
 */
void bmp085_writemem(uint8_t reg, uint8_t value) {
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_write(value);
	i2c_stop();
     86e:	0c 94 37 08 	jmp	0x106e	; 0x106e <i2c_stop>

00000872 <bmp085_readmem>:
}

/*
 * i2c read
 */
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
     872:	af 92       	push	r10
     874:	bf 92       	push	r11
     876:	cf 92       	push	r12
     878:	df 92       	push	r13
     87a:	ef 92       	push	r14
     87c:	ff 92       	push	r15
     87e:	0f 93       	push	r16
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	00 d0       	rcall	.+0      	; 0x888 <bmp085_readmem+0x16>
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	18 2f       	mov	r17, r24
     88e:	04 2f       	mov	r16, r20
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
     890:	8e ee       	ldi	r24, 0xEE	; 238
     892:	69 83       	std	Y+1, r22	; 0x01
     894:	7a 83       	std	Y+2, r23	; 0x02
     896:	0e 94 0e 08 	call	0x101c	; 0x101c <i2c_start_wait>
	i2c_write(reg);
     89a:	81 2f       	mov	r24, r17
     89c:	0e 94 3f 08 	call	0x107e	; 0x107e <i2c_write>
	i2c_rep_start(BMP085_ADDR | I2C_READ);
     8a0:	8f ee       	ldi	r24, 0xEF	; 239
     8a2:	0e 94 35 08 	call	0x106a	; 0x106a <i2c_rep_start>
     8a6:	69 81       	ldd	r22, Y+1	; 0x01
     8a8:	a6 2e       	mov	r10, r22
     8aa:	7a 81       	ldd	r23, Y+2	; 0x02
     8ac:	b7 2e       	mov	r11, r23
     8ae:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i<bytes; i++) {
     8b0:	e1 2c       	mov	r14, r1
     8b2:	f1 2c       	mov	r15, r1
		if(i==bytes-1)
     8b4:	68 01       	movw	r12, r16
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	c8 1a       	sub	r12, r24
     8ba:	d1 08       	sbc	r13, r1
void bmp085_readmem(uint8_t reg, uint8_t buff[], uint8_t bytes) {
	uint8_t i =0;
	i2c_start_wait(BMP085_ADDR | I2C_WRITE);
	i2c_write(reg);
	i2c_rep_start(BMP085_ADDR | I2C_READ);
	for(i=0; i<bytes; i++) {
     8bc:	e0 16       	cp	r14, r16
     8be:	f1 06       	cpc	r15, r17
     8c0:	89 f0       	breq	.+34     	; 0x8e4 <bmp085_readmem+0x72>
		if(i==bytes-1)
     8c2:	ec 14       	cp	r14, r12
     8c4:	fd 04       	cpc	r15, r13
     8c6:	19 f4       	brne	.+6      	; 0x8ce <bmp085_readmem+0x5c>
			buff[i] = i2c_readNak();
     8c8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <i2c_readNak>
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <bmp085_readmem+0x60>
		else
			buff[i] = i2c_readAck();
     8ce:	0e 94 50 08 	call	0x10a0	; 0x10a0 <i2c_readAck>
     8d2:	f5 01       	movw	r30, r10
     8d4:	80 83       	st	Z, r24
     8d6:	ff ef       	ldi	r31, 0xFF	; 255
     8d8:	ef 1a       	sub	r14, r31
     8da:	ff 0a       	sbc	r15, r31
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	a8 1a       	sub	r10, r24
     8e0:	b8 0a       	sbc	r11, r24
     8e2:	ec cf       	rjmp	.-40     	; 0x8bc <bmp085_readmem+0x4a>
	}
	i2c_stop();
}
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	ff 90       	pop	r15
     8f2:	ef 90       	pop	r14
     8f4:	df 90       	pop	r13
     8f6:	cf 90       	pop	r12
     8f8:	bf 90       	pop	r11
     8fa:	af 90       	pop	r10
		if(i==bytes-1)
			buff[i] = i2c_readNak();
		else
			buff[i] = i2c_readAck();
	}
	i2c_stop();
     8fc:	0c 94 37 08 	jmp	0x106e	; 0x106e <i2c_stop>

00000900 <bmp085_avaragefilter>:


#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	a8 e6       	ldi	r26, 0x68	; 104
     906:	b1 e0       	ldi	r27, 0x01	; 1
     908:	fd 01       	movw	r30, r26
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
     90a:	04 81       	ldd	r16, Z+4	; 0x04
     90c:	15 81       	ldd	r17, Z+5	; 0x05
     90e:	26 81       	ldd	r18, Z+6	; 0x06
     910:	37 81       	ldd	r19, Z+7	; 0x07
     912:	01 93       	st	Z+, r16
     914:	11 93       	st	Z+, r17
     916:	21 93       	st	Z+, r18
     918:	31 93       	st	Z+, r19
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     91a:	21 e0       	ldi	r18, 0x01	; 1
     91c:	ec 3b       	cpi	r30, 0xBC	; 188
     91e:	f2 07       	cpc	r31, r18
     920:	a1 f7       	brne	.-24     	; 0x90a <bmp085_avaragefilter+0xa>
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
     922:	60 93 b8 01 	sts	0x01B8, r22	; 0x8001b8 <k+0x50>
     926:	70 93 b9 01 	sts	0x01B9, r23	; 0x8001b9 <k+0x51>
     92a:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <k+0x52>
     92e:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <k+0x53>
#if BMP085_FILTERPRESSURE == 1
#define BMP085_AVARAGECOEF 21
static long k[BMP085_AVARAGECOEF];
long bmp085_avaragefilter(long input) {
	uint8_t i=0;
	long sum=0;
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	cb 01       	movw	r24, r22
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		sum += k[i];
     938:	0d 91       	ld	r16, X+
     93a:	1d 91       	ld	r17, X+
     93c:	2d 91       	ld	r18, X+
     93e:	3d 91       	ld	r19, X+
     940:	60 0f       	add	r22, r16
     942:	71 1f       	adc	r23, r17
     944:	82 1f       	adc	r24, r18
     946:	93 1f       	adc	r25, r19
	long sum=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		k[i] = k[i+1];
	}
	k[BMP085_AVARAGECOEF-1] = input;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     948:	21 e0       	ldi	r18, 0x01	; 1
     94a:	ac 3b       	cpi	r26, 0xBC	; 188
     94c:	b2 07       	cpc	r27, r18
     94e:	a1 f7       	brne	.-24     	; 0x938 <bmp085_avaragefilter+0x38>
		sum += k[i];
	}
	return (sum /BMP085_AVARAGECOEF) ;
     950:	25 e1       	ldi	r18, 0x15	; 21
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	0e 94 8e 11 	call	0x231c	; 0x231c <__divmodsi4>
}
     95c:	ca 01       	movw	r24, r20
     95e:	b9 01       	movw	r22, r18
     960:	1f 91       	pop	r17
     962:	0f 91       	pop	r16
     964:	08 95       	ret

00000966 <bmp085_getcalibration>:
#endif

/*
 * read calibration registers
 */
void bmp085_getcalibration() {
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	00 d0       	rcall	.+0      	; 0x96c <bmp085_getcalibration+0x6>
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     970:	1a 82       	std	Y+2, r1	; 0x02
     972:	19 82       	std	Y+1, r1	; 0x01

	bmp085_readmem(BMP085_REGAC1, buff, 2);
     974:	42 e0       	ldi	r20, 0x02	; 2
     976:	be 01       	movw	r22, r28
     978:	6f 5f       	subi	r22, 0xFF	; 255
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	8a ea       	ldi	r24, 0xAA	; 170
     97e:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regac1 = ((int)buff[0] <<8 | ((int)buff[1]));
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	98 2f       	mov	r25, r24
     988:	88 27       	eor	r24, r24
     98a:	2a 81       	ldd	r18, Y+2	; 0x02
     98c:	82 2b       	or	r24, r18
     98e:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <bmp085_regac1+0x1>
     992:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <bmp085_regac1>
	bmp085_readmem(BMP085_REGAC2, buff, 2);
     996:	42 e0       	ldi	r20, 0x02	; 2
     998:	be 01       	movw	r22, r28
     99a:	6f 5f       	subi	r22, 0xFF	; 255
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	8c ea       	ldi	r24, 0xAC	; 172
     9a0:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regac2 = ((int)buff[0] <<8 | ((int)buff[1]));
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	98 2f       	mov	r25, r24
     9aa:	88 27       	eor	r24, r24
     9ac:	2a 81       	ldd	r18, Y+2	; 0x02
     9ae:	82 2b       	or	r24, r18
     9b0:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <bmp085_regac2+0x1>
     9b4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <bmp085_regac2>
	bmp085_readmem(BMP085_REGAC3, buff, 2);
     9b8:	42 e0       	ldi	r20, 0x02	; 2
     9ba:	be 01       	movw	r22, r28
     9bc:	6f 5f       	subi	r22, 0xFF	; 255
     9be:	7f 4f       	sbci	r23, 0xFF	; 255
     9c0:	8e ea       	ldi	r24, 0xAE	; 174
     9c2:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regac3 = ((int)buff[0] <<8 | ((int)buff[1]));
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	98 2f       	mov	r25, r24
     9cc:	88 27       	eor	r24, r24
     9ce:	2a 81       	ldd	r18, Y+2	; 0x02
     9d0:	82 2b       	or	r24, r18
     9d2:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <bmp085_regac3+0x1>
     9d6:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <bmp085_regac3>
	bmp085_readmem(BMP085_REGAC4, buff, 2);
     9da:	42 e0       	ldi	r20, 0x02	; 2
     9dc:	be 01       	movw	r22, r28
     9de:	6f 5f       	subi	r22, 0xFF	; 255
     9e0:	7f 4f       	sbci	r23, 0xFF	; 255
     9e2:	80 eb       	ldi	r24, 0xB0	; 176
     9e4:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regac4 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	98 2f       	mov	r25, r24
     9ee:	88 27       	eor	r24, r24
     9f0:	2a 81       	ldd	r18, Y+2	; 0x02
     9f2:	82 2b       	or	r24, r18
     9f4:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <bmp085_regac4+0x1>
     9f8:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <bmp085_regac4>
	bmp085_readmem(BMP085_REGAC5, buff, 2);
     9fc:	42 e0       	ldi	r20, 0x02	; 2
     9fe:	be 01       	movw	r22, r28
     a00:	6f 5f       	subi	r22, 0xFF	; 255
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	82 eb       	ldi	r24, 0xB2	; 178
     a06:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regac5 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	98 2f       	mov	r25, r24
     a10:	88 27       	eor	r24, r24
     a12:	2a 81       	ldd	r18, Y+2	; 0x02
     a14:	82 2b       	or	r24, r18
     a16:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <bmp085_regac5+0x1>
     a1a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <bmp085_regac5>
	bmp085_readmem(BMP085_REGAC6, buff, 2);
     a1e:	42 e0       	ldi	r20, 0x02	; 2
     a20:	be 01       	movw	r22, r28
     a22:	6f 5f       	subi	r22, 0xFF	; 255
     a24:	7f 4f       	sbci	r23, 0xFF	; 255
     a26:	84 eb       	ldi	r24, 0xB4	; 180
     a28:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regac6 = ((unsigned int)buff[0] <<8 | ((unsigned int)buff[1]));
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	98 2f       	mov	r25, r24
     a32:	88 27       	eor	r24, r24
     a34:	2a 81       	ldd	r18, Y+2	; 0x02
     a36:	82 2b       	or	r24, r18
     a38:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <bmp085_regac6+0x1>
     a3c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <bmp085_regac6>
	bmp085_readmem(BMP085_REGB1, buff, 2);
     a40:	42 e0       	ldi	r20, 0x02	; 2
     a42:	be 01       	movw	r22, r28
     a44:	6f 5f       	subi	r22, 0xFF	; 255
     a46:	7f 4f       	sbci	r23, 0xFF	; 255
     a48:	86 eb       	ldi	r24, 0xB6	; 182
     a4a:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regb1 = ((int)buff[0] <<8 | ((int)buff[1]));
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	98 2f       	mov	r25, r24
     a54:	88 27       	eor	r24, r24
     a56:	2a 81       	ldd	r18, Y+2	; 0x02
     a58:	82 2b       	or	r24, r18
     a5a:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <bmp085_regb1+0x1>
     a5e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <bmp085_regb1>
	bmp085_readmem(BMP085_REGB2, buff, 2);
     a62:	42 e0       	ldi	r20, 0x02	; 2
     a64:	be 01       	movw	r22, r28
     a66:	6f 5f       	subi	r22, 0xFF	; 255
     a68:	7f 4f       	sbci	r23, 0xFF	; 255
     a6a:	88 eb       	ldi	r24, 0xB8	; 184
     a6c:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regb2 = ((int)buff[0] <<8 | ((int)buff[1]));
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	98 2f       	mov	r25, r24
     a76:	88 27       	eor	r24, r24
     a78:	2a 81       	ldd	r18, Y+2	; 0x02
     a7a:	82 2b       	or	r24, r18
     a7c:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <bmp085_regb2+0x1>
     a80:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <bmp085_regb2>
	bmp085_readmem(BMP085_REGMB, buff, 2);
     a84:	42 e0       	ldi	r20, 0x02	; 2
     a86:	be 01       	movw	r22, r28
     a88:	6f 5f       	subi	r22, 0xFF	; 255
     a8a:	7f 4f       	sbci	r23, 0xFF	; 255
     a8c:	8a eb       	ldi	r24, 0xBA	; 186
     a8e:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regmb = ((int)buff[0] <<8 | ((int)buff[1]));
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	98 2f       	mov	r25, r24
     a98:	88 27       	eor	r24, r24
     a9a:	2a 81       	ldd	r18, Y+2	; 0x02
     a9c:	82 2b       	or	r24, r18
     a9e:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <bmp085_regmb+0x1>
     aa2:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <bmp085_regmb>
	bmp085_readmem(BMP085_REGMC, buff, 2);
     aa6:	42 e0       	ldi	r20, 0x02	; 2
     aa8:	be 01       	movw	r22, r28
     aaa:	6f 5f       	subi	r22, 0xFF	; 255
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	8c eb       	ldi	r24, 0xBC	; 188
     ab0:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regmc = ((int)buff[0] <<8 | ((int)buff[1]));
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	98 2f       	mov	r25, r24
     aba:	88 27       	eor	r24, r24
     abc:	2a 81       	ldd	r18, Y+2	; 0x02
     abe:	82 2b       	or	r24, r18
     ac0:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <bmp085_regmc+0x1>
     ac4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <bmp085_regmc>
	bmp085_readmem(BMP085_REGMD, buff, 2);
     ac8:	42 e0       	ldi	r20, 0x02	; 2
     aca:	be 01       	movw	r22, r28
     acc:	6f 5f       	subi	r22, 0xFF	; 255
     ace:	7f 4f       	sbci	r23, 0xFF	; 255
     ad0:	8e eb       	ldi	r24, 0xBE	; 190
     ad2:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	bmp085_regmd = ((int)buff[0] <<8 | ((int)buff[1]));
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	98 2f       	mov	r25, r24
     adc:	88 27       	eor	r24, r24
     ade:	2a 81       	ldd	r18, Y+2	; 0x02
     ae0:	82 2b       	or	r24, r18
     ae2:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <bmp085_regmd+0x1>
     ae6:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <bmp085_regmd>
}
     aea:	0f 90       	pop	r0
     aec:	0f 90       	pop	r0
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	08 95       	ret

00000af4 <bmp085_getrawtemperature>:

/*
 * get raw temperature as read by registers, and do some calculation to convert it
 */
void bmp085_getrawtemperature() {
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	00 d0       	rcall	.+0      	; 0xb06 <bmp085_getrawtemperature+0x12>
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
	uint8_t buff[2];
	memset(buff, 0, sizeof(buff));
     b0a:	1a 82       	std	Y+2, r1	; 0x02
     b0c:	19 82       	std	Y+1, r1	; 0x01
	long ut,x1,x2;

	//read raw temperature
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADTEMPERATURE);
     b0e:	6e e2       	ldi	r22, 0x2E	; 46
     b10:	84 ef       	ldi	r24, 0xF4	; 244
     b12:	0e 94 21 04 	call	0x842	; 0x842 <bmp085_writemem>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b16:	8f e1       	ldi	r24, 0x1F	; 31
     b18:	9e e4       	ldi	r25, 0x4E	; 78
     b1a:	01 97       	sbiw	r24, 0x01	; 1
     b1c:	f1 f7       	brne	.-4      	; 0xb1a <bmp085_getrawtemperature+0x26>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <bmp085_getrawtemperature+0x2c>
     b20:	00 00       	nop
	_delay_ms(5); // min. 4.5ms read Temp delay
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 2);
     b22:	42 e0       	ldi	r20, 0x02	; 2
     b24:	be 01       	movw	r22, r28
     b26:	6f 5f       	subi	r22, 0xFF	; 255
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	86 ef       	ldi	r24, 0xF6	; 246
     b2c:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	ut = ((long)buff[0] << 8 | ((long)buff[1])); //uncompensated temperature value
     b30:	29 81       	ldd	r18, Y+1	; 0x01
     b32:	82 2f       	mov	r24, r18
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	44 27       	eor	r20, r20
     b3c:	58 2f       	mov	r21, r24
     b3e:	69 2f       	mov	r22, r25
     b40:	7a 2f       	mov	r23, r26
     b42:	8a 81       	ldd	r24, Y+2	; 0x02
     b44:	48 2b       	or	r20, r24

	//calculate raw temperature
	x1 = ((long)ut - bmp085_regac6) * bmp085_regac5 >> 15;
     b46:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <bmp085_regac6>
     b4a:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <bmp085_regac6+0x1>
     b4e:	9a 01       	movw	r18, r20
     b50:	ab 01       	movw	r20, r22
     b52:	28 1b       	sub	r18, r24
     b54:	39 0b       	sbc	r19, r25
     b56:	41 09       	sbc	r20, r1
     b58:	51 09       	sbc	r21, r1
     b5a:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <bmp085_regac5>
     b5e:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <bmp085_regac5+0x1>
     b62:	0e 94 b3 11 	call	0x2366	; 0x2366 <__muluhisi3>
     b66:	6b 01       	movw	r12, r22
     b68:	7c 01       	movw	r14, r24
     b6a:	3f e0       	ldi	r19, 0x0F	; 15
     b6c:	f5 94       	asr	r15
     b6e:	e7 94       	ror	r14
     b70:	d7 94       	ror	r13
     b72:	c7 94       	ror	r12
     b74:	3a 95       	dec	r19
     b76:	d1 f7       	brne	.-12     	; 0xb6c <bmp085_getrawtemperature+0x78>
	x2 = ((long)bmp085_regmc << 11) / (x1 + bmp085_regmd);
     b78:	60 91 03 02 	lds	r22, 0x0203	; 0x800203 <bmp085_regmc>
     b7c:	70 91 04 02 	lds	r23, 0x0204	; 0x800204 <bmp085_regmc+0x1>
     b80:	cb 01       	movw	r24, r22
     b82:	77 0f       	add	r23, r23
     b84:	aa 0b       	sbc	r26, r26
     b86:	bb 0b       	sbc	r27, r27
     b88:	bc 01       	movw	r22, r24
     b8a:	cd 01       	movw	r24, r26
     b8c:	4b e0       	ldi	r20, 0x0B	; 11
     b8e:	66 0f       	add	r22, r22
     b90:	77 1f       	adc	r23, r23
     b92:	88 1f       	adc	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	4a 95       	dec	r20
     b98:	d1 f7       	brne	.-12     	; 0xb8e <bmp085_getrawtemperature+0x9a>
     b9a:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <bmp085_regmd>
     b9e:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <bmp085_regmd+0x1>
     ba2:	89 01       	movw	r16, r18
     ba4:	33 0f       	add	r19, r19
     ba6:	22 0b       	sbc	r18, r18
     ba8:	33 0b       	sbc	r19, r19
     baa:	a9 01       	movw	r20, r18
     bac:	98 01       	movw	r18, r16
     bae:	2c 0d       	add	r18, r12
     bb0:	3d 1d       	adc	r19, r13
     bb2:	4e 1d       	adc	r20, r14
     bb4:	5f 1d       	adc	r21, r15
     bb6:	0e 94 8e 11 	call	0x231c	; 0x231c <__divmodsi4>
	bmp085_rawtemperature = (x1 + x2);
     bba:	c2 0e       	add	r12, r18
     bbc:	d3 1e       	adc	r13, r19
     bbe:	e4 1e       	adc	r14, r20
     bc0:	f5 1e       	adc	r15, r21
     bc2:	c0 92 d1 01 	sts	0x01D1, r12	; 0x8001d1 <bmp085_rawtemperature>
     bc6:	d0 92 d2 01 	sts	0x01D2, r13	; 0x8001d2 <bmp085_rawtemperature+0x1>
     bca:	e0 92 d3 01 	sts	0x01D3, r14	; 0x8001d3 <bmp085_rawtemperature+0x2>
     bce:	f0 92 d4 01 	sts	0x01D4, r15	; 0x8001d4 <bmp085_rawtemperature+0x3>
}
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	08 95       	ret

00000be8 <bmp085_getrawpressure>:

/*
 * get raw pressure as read by registers, and do some calculation to convert it
 */
void bmp085_getrawpressure() {
     be8:	4f 92       	push	r4
     bea:	5f 92       	push	r5
     bec:	6f 92       	push	r6
     bee:	7f 92       	push	r7
     bf0:	8f 92       	push	r8
     bf2:	9f 92       	push	r9
     bf4:	af 92       	push	r10
     bf6:	bf 92       	push	r11
     bf8:	cf 92       	push	r12
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	2b 97       	sbiw	r28, 0x0b	; 11
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
	uint8_t buff[3];
	memset(buff, 0, sizeof(buff));
     c18:	19 82       	std	Y+1, r1	; 0x01
     c1a:	1a 82       	std	Y+2, r1	; 0x02
     c1c:	1b 82       	std	Y+3, r1	; 0x03
	long up,x1,x2,x3,b3,b6,p;
	unsigned long b4,b7;

	#if BMP085_AUTOUPDATETEMP == 1
	bmp085_getrawtemperature();
     c1e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <bmp085_getrawtemperature>
	#endif

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
     c22:	64 ef       	ldi	r22, 0xF4	; 244
     c24:	84 ef       	ldi	r24, 0xF4	; 244
     c26:	0e 94 21 04 	call	0x842	; 0x842 <bmp085_writemem>
     c2a:	0f ef       	ldi	r16, 0xFF	; 255
     c2c:	14 e4       	ldi	r17, 0x44	; 68
     c2e:	21 e0       	ldi	r18, 0x01	; 1
     c30:	01 50       	subi	r16, 0x01	; 1
     c32:	10 40       	sbci	r17, 0x00	; 0
     c34:	20 40       	sbci	r18, 0x00	; 0
     c36:	e1 f7       	brne	.-8      	; 0xc30 <bmp085_getrawpressure+0x48>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <bmp085_getrawpressure+0x52>
     c3a:	00 00       	nop
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
     c3c:	43 e0       	ldi	r20, 0x03	; 3
     c3e:	be 01       	movw	r22, r28
     c40:	6f 5f       	subi	r22, 0xFF	; 255
     c42:	7f 4f       	sbci	r23, 0xFF	; 255
     c44:	86 ef       	ldi	r24, 0xF6	; 246
     c46:	0e 94 39 04 	call	0x872	; 0x872 <bmp085_readmem>
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
     c4a:	c0 90 d1 01 	lds	r12, 0x01D1	; 0x8001d1 <bmp085_rawtemperature>
     c4e:	d0 90 d2 01 	lds	r13, 0x01D2	; 0x8001d2 <bmp085_rawtemperature+0x1>
     c52:	e0 90 d3 01 	lds	r14, 0x01D3	; 0x8001d3 <bmp085_rawtemperature+0x2>
     c56:	f0 90 d4 01 	lds	r15, 0x01D4	; 0x8001d4 <bmp085_rawtemperature+0x3>
     c5a:	30 ea       	ldi	r19, 0xA0	; 160
     c5c:	c3 1a       	sub	r12, r19
     c5e:	3f e0       	ldi	r19, 0x0F	; 15
     c60:	d3 0a       	sbc	r13, r19
     c62:	e1 08       	sbc	r14, r1
     c64:	f1 08       	sbc	r15, r1
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
     c66:	a7 01       	movw	r20, r14
     c68:	96 01       	movw	r18, r12
     c6a:	c7 01       	movw	r24, r14
     c6c:	b6 01       	movw	r22, r12
     c6e:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsi3>
     c72:	6c 83       	std	Y+4, r22	; 0x04
     c74:	7d 83       	std	Y+5, r23	; 0x05
     c76:	8e 83       	std	Y+6, r24	; 0x06
     c78:	9f 83       	std	Y+7, r25	; 0x07
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     c7a:	80 90 dc 01 	lds	r8, 0x01DC	; 0x8001dc <bmp085_regac1>
     c7e:	90 90 dd 01 	lds	r9, 0x01DD	; 0x8001dd <bmp085_regac1+0x1>
	x1 = (bmp085_regac3 * b6) >> 13;
     c82:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <bmp085_regac3>
     c86:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <bmp085_regac3+0x1>
     c8a:	0e 94 be 11 	call	0x237c	; 0x237c <__mulshisi3>
     c8e:	2b 01       	movw	r4, r22
     c90:	3c 01       	movw	r6, r24
     c92:	fd e0       	ldi	r31, 0x0D	; 13
     c94:	75 94       	asr	r7
     c96:	67 94       	ror	r6
     c98:	57 94       	ror	r5
     c9a:	47 94       	ror	r4
     c9c:	fa 95       	dec	r31
     c9e:	d1 f7       	brne	.-12     	; 0xc94 <bmp085_getrawpressure+0xac>
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
     ca0:	a0 91 d5 01 	lds	r26, 0x01D5	; 0x8001d5 <bmp085_regb1>
     ca4:	b0 91 d6 01 	lds	r27, 0x01D6	; 0x8001d6 <bmp085_regb1+0x1>
     ca8:	2c 81       	ldd	r18, Y+4	; 0x04
     caa:	3d 81       	ldd	r19, Y+5	; 0x05
     cac:	4e 81       	ldd	r20, Y+6	; 0x06
     cae:	5f 81       	ldd	r21, Y+7	; 0x07
     cb0:	1c e0       	ldi	r17, 0x0C	; 12
     cb2:	55 95       	asr	r21
     cb4:	47 95       	ror	r20
     cb6:	37 95       	ror	r19
     cb8:	27 95       	ror	r18
     cba:	1a 95       	dec	r17
     cbc:	d1 f7       	brne	.-12     	; 0xcb2 <bmp085_getrawpressure+0xca>
     cbe:	0e 94 be 11 	call	0x237c	; 0x237c <__mulshisi3>
     cc2:	bb 27       	eor	r27, r27
     cc4:	97 fd       	sbrc	r25, 7
     cc6:	b0 95       	com	r27
     cc8:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
     cca:	84 0d       	add	r24, r4
     ccc:	95 1d       	adc	r25, r5
     cce:	a6 1d       	adc	r26, r6
     cd0:	b7 1d       	adc	r27, r7
     cd2:	02 96       	adiw	r24, 0x02	; 2
     cd4:	a1 1d       	adc	r26, r1
     cd6:	b1 1d       	adc	r27, r1
     cd8:	22 e0       	ldi	r18, 0x02	; 2
     cda:	b5 95       	asr	r27
     cdc:	a7 95       	ror	r26
     cde:	97 95       	ror	r25
     ce0:	87 95       	ror	r24
     ce2:	2a 95       	dec	r18
     ce4:	d1 f7       	brne	.-12     	; 0xcda <bmp085_getrawpressure+0xf2>
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
     ce6:	9c 01       	movw	r18, r24
     ce8:	ad 01       	movw	r20, r26
     cea:	30 58       	subi	r19, 0x80	; 128
     cec:	4f 4f       	sbci	r20, 0xFF	; 255
     cee:	5f 4f       	sbci	r21, 0xFF	; 255
     cf0:	a0 91 c3 01 	lds	r26, 0x01C3	; 0x8001c3 <bmp085_regac4>
     cf4:	b0 91 c4 01 	lds	r27, 0x01C4	; 0x8001c4 <bmp085_regac4+0x1>
     cf8:	0e 94 b3 11 	call	0x2366	; 0x2366 <__muluhisi3>
     cfc:	2b 01       	movw	r4, r22
     cfe:	3c 01       	movw	r6, r24
     d00:	3f e0       	ldi	r19, 0x0F	; 15
     d02:	76 94       	lsr	r7
     d04:	67 94       	ror	r6
     d06:	57 94       	ror	r5
     d08:	47 94       	ror	r4
     d0a:	3a 95       	dec	r19
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <bmp085_getrawpressure+0x11a>

	//read raw pressure
	bmp085_writemem(BMP085_REGCONTROL, BMP085_REGREADPRESSURE+(BMP085_MODE << 6));
	_delay_ms(2 + (3<<BMP085_MODE));
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	2a 81       	ldd	r18, Y+2	; 0x02
     d12:	42 2f       	mov	r20, r18
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	76 2f       	mov	r23, r22
     d1c:	65 2f       	mov	r22, r21
     d1e:	54 2f       	mov	r21, r20
     d20:	44 27       	eor	r20, r20
     d22:	68 2b       	or	r22, r24
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	8a 01       	movw	r16, r20
     d28:	9b 01       	movw	r18, r22
     d2a:	08 2b       	or	r16, r24
     d2c:	f5 e0       	ldi	r31, 0x05	; 5
     d2e:	35 95       	asr	r19
     d30:	27 95       	ror	r18
     d32:	17 95       	ror	r17
     d34:	07 95       	ror	r16
     d36:	fa 95       	dec	r31
     d38:	d1 f7       	brne	.-12     	; 0xd2e <bmp085_getrawpressure+0x146>
     d3a:	08 87       	std	Y+8, r16	; 0x08
     d3c:	19 87       	std	Y+9, r17	; 0x09
     d3e:	2a 87       	std	Y+10, r18	; 0x0a
     d40:	3b 87       	std	Y+11, r19	; 0x0b
	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
	x2 = (bmp085_regac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     d42:	09 2c       	mov	r0, r9
     d44:	00 0c       	add	r0, r0
     d46:	aa 08       	sbc	r10, r10
     d48:	bb 08       	sbc	r11, r11
     d4a:	a2 e0       	ldi	r26, 0x02	; 2
     d4c:	88 0c       	add	r8, r8
     d4e:	99 1c       	adc	r9, r9
     d50:	aa 1c       	adc	r10, r10
     d52:	bb 1c       	adc	r11, r11
     d54:	aa 95       	dec	r26
     d56:	d1 f7       	brne	.-12     	; 0xd4c <bmp085_getrawpressure+0x164>
	bmp085_readmem(BMP085_REGCONTROLOUTPUT, buff, 3);
	up = ((((long)buff[0] <<16) | ((long)buff[1] <<8) | ((long)buff[2])) >> (8-BMP085_MODE)); // uncompensated pressure value

	//calculate raw pressure
	b6 = bmp085_rawtemperature - 4000;
	x1 = (bmp085_regb2* (b6 * b6) >> 12) >> 11;
     d58:	a0 91 c5 01 	lds	r26, 0x01C5	; 0x8001c5 <bmp085_regb2>
     d5c:	b0 91 c6 01 	lds	r27, 0x01C6	; 0x8001c6 <bmp085_regb2+0x1>
     d60:	2c 81       	ldd	r18, Y+4	; 0x04
     d62:	3d 81       	ldd	r19, Y+5	; 0x05
     d64:	4e 81       	ldd	r20, Y+6	; 0x06
     d66:	5f 81       	ldd	r21, Y+7	; 0x07
     d68:	0e 94 be 11 	call	0x237c	; 0x237c <__mulshisi3>
     d6c:	8b 01       	movw	r16, r22
     d6e:	9c 01       	movw	r18, r24
     d70:	b7 e1       	ldi	r27, 0x17	; 23
     d72:	35 95       	asr	r19
     d74:	27 95       	ror	r18
     d76:	17 95       	ror	r17
     d78:	07 95       	ror	r16
     d7a:	ba 95       	dec	r27
     d7c:	d1 f7       	brne	.-12     	; 0xd72 <bmp085_getrawpressure+0x18a>
     d7e:	0c 83       	std	Y+4, r16	; 0x04
     d80:	1d 83       	std	Y+5, r17	; 0x05
     d82:	2e 83       	std	Y+6, r18	; 0x06
     d84:	3f 83       	std	Y+7, r19	; 0x07
	x2 = (bmp085_regac2 * b6) >> 11;
     d86:	a0 91 05 02 	lds	r26, 0x0205	; 0x800205 <bmp085_regac2>
     d8a:	b0 91 06 02 	lds	r27, 0x0206	; 0x800206 <bmp085_regac2+0x1>
     d8e:	a7 01       	movw	r20, r14
     d90:	96 01       	movw	r18, r12
     d92:	0e 94 be 11 	call	0x237c	; 0x237c <__mulshisi3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	1b e0       	ldi	r17, 0x0B	; 11
     d9c:	b5 95       	asr	r27
     d9e:	a7 95       	ror	r26
     da0:	97 95       	ror	r25
     da2:	87 95       	ror	r24
     da4:	1a 95       	dec	r17
     da6:	d1 f7       	brne	.-12     	; 0xd9c <bmp085_getrawpressure+0x1b4>
	x3 = x1 + x2;
     da8:	0c 81       	ldd	r16, Y+4	; 0x04
     daa:	1d 81       	ldd	r17, Y+5	; 0x05
     dac:	2e 81       	ldd	r18, Y+6	; 0x06
     dae:	3f 81       	ldd	r19, Y+7	; 0x07
     db0:	80 0f       	add	r24, r16
     db2:	91 1f       	adc	r25, r17
     db4:	a2 1f       	adc	r26, r18
     db6:	b3 1f       	adc	r27, r19
	b3 = (((((long)bmp085_regac1) * 4 + x3) << BMP085_MODE) + 2) >> 2;
     db8:	88 0e       	add	r8, r24
     dba:	99 1e       	adc	r9, r25
     dbc:	aa 1e       	adc	r10, r26
     dbe:	bb 1e       	adc	r11, r27
     dc0:	88 0c       	add	r8, r8
     dc2:	99 1c       	adc	r9, r9
     dc4:	aa 1c       	adc	r10, r10
     dc6:	bb 1c       	adc	r11, r11
	x1 = (bmp085_regac3 * b6) >> 13;
	x2 = (bmp085_regb1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (bmp085_regac4 * (uint32_t)(x3 + 32768)) >> 15;
	b7 = ((uint32_t)up - b3) * (50000 >> BMP085_MODE);
     dc8:	28 85       	ldd	r18, Y+8	; 0x08
     dca:	39 85       	ldd	r19, Y+9	; 0x09
     dcc:	4a 85       	ldd	r20, Y+10	; 0x0a
     dce:	5b 85       	ldd	r21, Y+11	; 0x0b
     dd0:	28 19       	sub	r18, r8
     dd2:	39 09       	sbc	r19, r9
     dd4:	4a 09       	sbc	r20, r10
     dd6:	5b 09       	sbc	r21, r11
     dd8:	aa e6       	ldi	r26, 0x6A	; 106
     dda:	b8 e1       	ldi	r27, 0x18	; 24
     ddc:	0e 94 b3 11 	call	0x2366	; 0x2366 <__muluhisi3>
	p = b7 < 0x80000000 ? (b7 << 1) / b4 : (b7 / b4) << 1;
     de0:	97 fd       	sbrc	r25, 7
     de2:	0b c0       	rjmp	.+22     	; 0xdfa <bmp085_getrawpressure+0x212>
     de4:	66 0f       	add	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	a3 01       	movw	r20, r6
     dee:	92 01       	movw	r18, r4
     df0:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__udivmodsi4>
     df4:	69 01       	movw	r12, r18
     df6:	7a 01       	movw	r14, r20
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <bmp085_getrawpressure+0x226>
     dfa:	a3 01       	movw	r20, r6
     dfc:	92 01       	movw	r18, r4
     dfe:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__udivmodsi4>
     e02:	69 01       	movw	r12, r18
     e04:	7a 01       	movw	r14, r20
     e06:	cc 0c       	add	r12, r12
     e08:	dd 1c       	adc	r13, r13
     e0a:	ee 1c       	adc	r14, r14
     e0c:	ff 1c       	adc	r15, r15
	x1 = (p >> 8) * (p >> 8);
     e0e:	99 27       	eor	r25, r25
     e10:	f7 fc       	sbrc	r15, 7
     e12:	9a 95       	dec	r25
     e14:	8f 2d       	mov	r24, r15
     e16:	7e 2d       	mov	r23, r14
     e18:	6d 2d       	mov	r22, r13
     e1a:	9b 01       	movw	r18, r22
     e1c:	ac 01       	movw	r20, r24
     e1e:	0e 94 48 11 	call	0x2290	; 0x2290 <__mulsi3>
     e22:	9b 01       	movw	r18, r22
     e24:	ac 01       	movw	r20, r24
	x1 = (x1 * 3038) >> 16;
     e26:	ae ed       	ldi	r26, 0xDE	; 222
     e28:	bb e0       	ldi	r27, 0x0B	; 11
     e2a:	0e 94 b3 11 	call	0x2366	; 0x2366 <__muluhisi3>
     e2e:	4c 01       	movw	r8, r24
     e30:	bb 24       	eor	r11, r11
     e32:	97 fc       	sbrc	r9, 7
     e34:	b0 94       	com	r11
     e36:	ab 2c       	mov	r10, r11
	x2 = (-7357 * p) >> 16;
     e38:	a3 e4       	ldi	r26, 0x43	; 67
     e3a:	b3 ee       	ldi	r27, 0xE3	; 227
     e3c:	a7 01       	movw	r20, r14
     e3e:	96 01       	movw	r18, r12
     e40:	0e 94 c1 11 	call	0x2382	; 0x2382 <__mulohisi3>
     e44:	bb 27       	eor	r27, r27
     e46:	97 fd       	sbrc	r25, 7
     e48:	b0 95       	com	r27
     e4a:	ab 2f       	mov	r26, r27
	bmp085_rawpressure = p + ((x1 + x2 + 3791) >> 4);
     e4c:	88 0d       	add	r24, r8
     e4e:	99 1d       	adc	r25, r9
     e50:	aa 1d       	adc	r26, r10
     e52:	bb 1d       	adc	r27, r11
     e54:	81 53       	subi	r24, 0x31	; 49
     e56:	91 4f       	sbci	r25, 0xF1	; 241
     e58:	af 4f       	sbci	r26, 0xFF	; 255
     e5a:	bf 4f       	sbci	r27, 0xFF	; 255
     e5c:	44 e0       	ldi	r20, 0x04	; 4
     e5e:	b5 95       	asr	r27
     e60:	a7 95       	ror	r26
     e62:	97 95       	ror	r25
     e64:	87 95       	ror	r24
     e66:	4a 95       	dec	r20
     e68:	d1 f7       	brne	.-12     	; 0xe5e <bmp085_getrawpressure+0x276>
     e6a:	bc 01       	movw	r22, r24
     e6c:	cd 01       	movw	r24, r26
     e6e:	6c 0d       	add	r22, r12
     e70:	7d 1d       	adc	r23, r13
     e72:	8e 1d       	adc	r24, r14
     e74:	9f 1d       	adc	r25, r15
     e76:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <bmp085_rawpressure>
     e7a:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <bmp085_rawpressure+0x1>
     e7e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <bmp085_rawpressure+0x2>
     e82:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <bmp085_rawpressure+0x3>

	#if BMP085_FILTERPRESSURE == 1
	bmp085_rawpressure = bmp085_avaragefilter(bmp085_rawpressure);
     e86:	0e 94 80 04 	call	0x900	; 0x900 <bmp085_avaragefilter>
     e8a:	60 93 c7 01 	sts	0x01C7, r22	; 0x8001c7 <bmp085_rawpressure>
     e8e:	70 93 c8 01 	sts	0x01C8, r23	; 0x8001c8 <bmp085_rawpressure+0x1>
     e92:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <bmp085_rawpressure+0x2>
     e96:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <bmp085_rawpressure+0x3>
	#endif
}
     e9a:	2b 96       	adiw	r28, 0x0b	; 11
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	ff 90       	pop	r15
     eb0:	ef 90       	pop	r14
     eb2:	df 90       	pop	r13
     eb4:	cf 90       	pop	r12
     eb6:	bf 90       	pop	r11
     eb8:	af 90       	pop	r10
     eba:	9f 90       	pop	r9
     ebc:	8f 90       	pop	r8
     ebe:	7f 90       	pop	r7
     ec0:	6f 90       	pop	r6
     ec2:	5f 90       	pop	r5
     ec4:	4f 90       	pop	r4
     ec6:	08 95       	ret

00000ec8 <bmp085_gettemperature>:

/*
 * get celsius temperature
 */
double bmp085_gettemperature() {
	bmp085_getrawtemperature();
     ec8:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <bmp085_getrawtemperature>
	double temperature = ((bmp085_rawtemperature + 8)>>4);
     ecc:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <bmp085_rawtemperature>
     ed0:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <bmp085_rawtemperature+0x1>
     ed4:	a0 91 d3 01 	lds	r26, 0x01D3	; 0x8001d3 <bmp085_rawtemperature+0x2>
     ed8:	b0 91 d4 01 	lds	r27, 0x01D4	; 0x8001d4 <bmp085_rawtemperature+0x3>
     edc:	08 96       	adiw	r24, 0x08	; 8
     ede:	a1 1d       	adc	r26, r1
     ee0:	b1 1d       	adc	r27, r1
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	24 e0       	ldi	r18, 0x04	; 4
     ee8:	95 95       	asr	r25
     eea:	87 95       	ror	r24
     eec:	77 95       	ror	r23
     eee:	67 95       	ror	r22
     ef0:	2a 95       	dec	r18
     ef2:	d1 f7       	brne	.-12     	; 0xee8 <bmp085_gettemperature+0x20>
     ef4:	0e 94 00 13 	call	0x2600	; 0x2600 <__floatsisf>
	//temperature = temperature /10;
	return temperature;
}
     ef8:	08 95       	ret

00000efa <bmp085_getpressure>:

/*
 * get pressure with offset in BMP085.h and user pressure corection
 */
int32_t bmp085_getpressure(int32_t gPressCorr) {
     efa:	cf 92       	push	r12
     efc:	df 92       	push	r13
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	00 d0       	rcall	.+0      	; 0xf08 <bmp085_getpressure+0xe>
     f08:	00 d0       	rcall	.+0      	; 0xf0a <bmp085_getpressure+0x10>
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	bmp085_getrawpressure();
     f0e:	69 83       	std	Y+1, r22	; 0x01
     f10:	7a 83       	std	Y+2, r23	; 0x02
     f12:	8b 83       	std	Y+3, r24	; 0x03
     f14:	9c 83       	std	Y+4, r25	; 0x04
     f16:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <bmp085_getrawpressure>
	return bmp085_rawpressure + BMP085_UNITPAOFFSET + gPressCorr;
     f1a:	c0 90 c7 01 	lds	r12, 0x01C7	; 0x8001c7 <bmp085_rawpressure>
     f1e:	d0 90 c8 01 	lds	r13, 0x01C8	; 0x8001c8 <bmp085_rawpressure+0x1>
     f22:	e0 90 c9 01 	lds	r14, 0x01C9	; 0x8001c9 <bmp085_rawpressure+0x2>
     f26:	f0 90 ca 01 	lds	r15, 0x01CA	; 0x8001ca <bmp085_rawpressure+0x3>
     f2a:	69 81       	ldd	r22, Y+1	; 0x01
     f2c:	7a 81       	ldd	r23, Y+2	; 0x02
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	6c 0d       	add	r22, r12
     f34:	7d 1d       	adc	r23, r13
     f36:	8e 1d       	adc	r24, r14
     f38:	9f 1d       	adc	r25, r15
}
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	08 95       	ret

00000f50 <bmp085_getaltitude>:

/*
 * get altitude
 */
double bmp085_getaltitude() {
	bmp085_getrawpressure();
     f50:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <bmp085_getrawpressure>
	return ((1 - pow(bmp085_rawpressure/(double)101325, 0.1903 )) / 0.0000225577) + BMP085_UNITMOFFSET;
     f54:	60 91 c7 01 	lds	r22, 0x01C7	; 0x8001c7 <bmp085_rawpressure>
     f58:	70 91 c8 01 	lds	r23, 0x01C8	; 0x8001c8 <bmp085_rawpressure+0x1>
     f5c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <bmp085_rawpressure+0x2>
     f60:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <bmp085_rawpressure+0x3>
     f64:	0e 94 00 13 	call	0x2600	; 0x2600 <__floatsisf>
     f68:	20 e8       	ldi	r18, 0x80	; 128
     f6a:	36 ee       	ldi	r19, 0xE6	; 230
     f6c:	45 ec       	ldi	r20, 0xC5	; 197
     f6e:	57 e4       	ldi	r21, 0x47	; 71
     f70:	0e 94 56 12 	call	0x24ac	; 0x24ac <__divsf3>
     f74:	21 e0       	ldi	r18, 0x01	; 1
     f76:	3e ed       	ldi	r19, 0xDE	; 222
     f78:	42 e4       	ldi	r20, 0x42	; 66
     f7a:	5e e3       	ldi	r21, 0x3E	; 62
     f7c:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <pow>
     f80:	9b 01       	movw	r18, r22
     f82:	ac 01       	movw	r20, r24
     f84:	60 e0       	ldi	r22, 0x00	; 0
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	80 e8       	ldi	r24, 0x80	; 128
     f8a:	9f e3       	ldi	r25, 0x3F	; 63
     f8c:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <__subsf3>
     f90:	2b e4       	ldi	r18, 0x4B	; 75
     f92:	3a e3       	ldi	r19, 0x3A	; 58
     f94:	4d eb       	ldi	r20, 0xBD	; 189
     f96:	57 e3       	ldi	r21, 0x37	; 55
     f98:	0e 94 56 12 	call	0x24ac	; 0x24ac <__divsf3>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	a9 01       	movw	r20, r18
     fa2:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__addsf3>
}
     fa6:	08 95       	ret

00000fa8 <bmp085_init>:

/*
 * init bmp085
 */
void bmp085_init() {
     fa8:	cf 93       	push	r28
	#if BMP085_I2CINIT == 1
	//init i2c
	i2c_init();
     faa:	0e 94 e6 07 	call	0xfcc	; 0xfcc <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fae:	85 e3       	ldi	r24, 0x35	; 53
     fb0:	8a 95       	dec	r24
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <bmp085_init+0x8>
     fb4:	00 00       	nop
	_delay_us(10);
	#endif

	bmp085_getcalibration(); //get calibration data
     fb6:	0e 94 b3 04 	call	0x966	; 0x966 <bmp085_getcalibration>
	bmp085_getrawtemperature(); //update raw temperature, at least the first time
     fba:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <bmp085_getrawtemperature>
     fbe:	c5 e1       	ldi	r28, 0x15	; 21

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
		bmp085_getrawpressure();
     fc0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <bmp085_getrawpressure>
     fc4:	c1 50       	subi	r28, 0x01	; 1
	bmp085_getrawtemperature(); //update raw temperature, at least the first time

	#if BMP085_FILTERPRESSURE == 1
	//initialize the avarage filter
	uint8_t i=0;
	for (i=0; i<BMP085_AVARAGECOEF; i++) {
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <bmp085_init+0x18>
		bmp085_getrawpressure();
	}
	#endif
}
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     fcc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     fd0:	88 e4       	ldi	r24, 0x48	; 72
     fd2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     fd6:	08 95       	ret

00000fd8 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     fd8:	94 ea       	ldi	r25, 0xA4	; 164
     fda:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     fde:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     fe2:	97 ff       	sbrs	r25, 7
     fe4:	fc cf       	rjmp	.-8      	; 0xfde <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     fe6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     fea:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     fec:	98 30       	cpi	r25, 0x08	; 8
     fee:	21 f0       	breq	.+8      	; 0xff8 <i2c_start+0x20>
     ff0:	90 31       	cpi	r25, 0x10	; 16
     ff2:	11 f0       	breq	.+4      	; 0xff8 <i2c_start+0x20>
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	08 95       	ret

	// send device address
	TWDR = address;
     ff8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     ffc:	84 e8       	ldi	r24, 0x84	; 132
     ffe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1002:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1006:	87 ff       	sbrs	r24, 7
    1008:	fc cf       	rjmp	.-8      	; 0x1002 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    100a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    100e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1010:	88 31       	cpi	r24, 0x18	; 24
    1012:	11 f0       	breq	.+4      	; 0x1018 <i2c_start+0x40>
    1014:	80 34       	cpi	r24, 0x40	; 64
    1016:	71 f7       	brne	.-36     	; 0xff4 <i2c_start+0x1c>

	return 0;
    1018:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    101a:	08 95       	ret

0000101c <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    101c:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
    101e:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1020:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1022:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1026:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    102a:	97 ff       	sbrs	r25, 7
    102c:	fc cf       	rjmp	.-8      	; 0x1026 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    102e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1032:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    1034:	98 30       	cpi	r25, 0x08	; 8
    1036:	11 f0       	breq	.+4      	; 0x103c <i2c_start_wait+0x20>
    1038:	90 31       	cpi	r25, 0x10	; 16
    103a:	99 f7       	brne	.-26     	; 0x1022 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
    103c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
    1040:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
    1044:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1048:	97 ff       	sbrs	r25, 7
    104a:	fc cf       	rjmp	.-8      	; 0x1044 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    104c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1050:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    1052:	90 32       	cpi	r25, 0x20	; 32
    1054:	11 f0       	breq	.+4      	; 0x105a <i2c_start_wait+0x3e>
    1056:	98 35       	cpi	r25, 0x58	; 88
    1058:	39 f4       	brne	.+14     	; 0x1068 <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    105a:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    105e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1062:	94 fd       	sbrc	r25, 4
    1064:	fc cf       	rjmp	.-8      	; 0x105e <i2c_start_wait+0x42>
    1066:	dd cf       	rjmp	.-70     	; 0x1022 <i2c_start_wait+0x6>
    1068:	08 95       	ret

0000106a <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
    106a:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <i2c_start>

0000106e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    106e:	84 e9       	ldi	r24, 0x94	; 148
    1070:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1074:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1078:	84 fd       	sbrc	r24, 4
    107a:	fc cf       	rjmp	.-8      	; 0x1074 <i2c_stop+0x6>

}/* i2c_stop */
    107c:	08 95       	ret

0000107e <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    107e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    1082:	84 e8       	ldi	r24, 0x84	; 132
    1084:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1088:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    108c:	87 ff       	sbrs	r24, 7
    108e:	fc cf       	rjmp	.-8      	; 0x1088 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1090:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1094:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	98 32       	cpi	r25, 0x28	; 40
    109a:	09 f4       	brne	.+2      	; 0x109e <i2c_write+0x20>
    109c:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    109e:	08 95       	ret

000010a0 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    10a0:	84 ec       	ldi	r24, 0xC4	; 196
    10a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
    10a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10aa:	87 ff       	sbrs	r24, 7
    10ac:	fc cf       	rjmp	.-8      	; 0x10a6 <i2c_readAck+0x6>

    return TWDR;
    10ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
    10b2:	08 95       	ret

000010b4 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    10b4:	84 e8       	ldi	r24, 0x84	; 132
    10b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
    10ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10be:	87 ff       	sbrs	r24, 7
    10c0:	fc cf       	rjmp	.-8      	; 0x10ba <i2c_readNak+0x6>
	
    return TWDR;
    10c2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
    10c6:	08 95       	ret

000010c8 <modbusGetBusState>:
volatile unsigned char PacketTopIndex = 7;
volatile unsigned char modBusStaMaStates = 0;

uint8_t modbusGetBusState(void)
{
	return BusState;
    10c8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <BusState>
}
    10cc:	08 95       	ret

000010ce <modbusGetAddress>:

#if ADDRESS_MODE == SINGLE_ADR
volatile unsigned char Address = 0x00;
uint8_t modbusGetAddress(void)
{
	return Address;
    10ce:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <Address>
}
    10d2:	08 95       	ret

000010d4 <modbusSetAddress>:

void modbusSetAddress(unsigned char newadr)
{
	Address = newadr;
    10d4:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <Address>
    10d8:	08 95       	ret

000010da <transceiver_txen>:
#endif

#if PHYSICAL_TYPE == 485
void transceiver_txen(void)
{
	TRANSCEIVER_ENABLE_PORT|=(1<<TRANSCEIVER_ENABLE_PIN);
    10da:	5a 9a       	sbi	0x0b, 2	; 11
    10dc:	08 95       	ret

000010de <transceiver_rxen>:
}

 void transceiver_rxen(void)
{
	TRANSCEIVER_ENABLE_PORT&=~(1<<TRANSCEIVER_ENABLE_PIN);
    10de:	5a 98       	cbi	0x0b, 2	; 11
    10e0:	08 95       	ret

000010e2 <crc16>:
*  	Returns 1 if the crc check is positive, returns 0 and saves the calculated CRC bytes
*	at the end of the data array if it fails.
*  	
*/
uint8_t crc16(volatile uint8_t *ptrToArray,uint8_t inputSize) //A standard CRC algorithm
{
    10e2:	ac 01       	movw	r20, r24
	uint16_t out=0xffff;
	uint16_t carry;
	unsigned char n;
	inputSize++;
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	96 0f       	add	r25, r22
	for (int l=0; l<inputSize; l++) {
    10e8:	e0 e0       	ldi	r30, 0x00	; 0
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
*	at the end of the data array if it fails.
*  	
*/
uint8_t crc16(volatile uint8_t *ptrToArray,uint8_t inputSize) //A standard CRC algorithm
{
	uint16_t out=0xffff;
    10ec:	2f ef       	ldi	r18, 0xFF	; 255
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
	uint16_t carry;
	unsigned char n;
	inputSize++;
	for (int l=0; l<inputSize; l++) {
    10f0:	69 2f       	mov	r22, r25
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	da 01       	movw	r26, r20
    10f6:	e6 17       	cp	r30, r22
    10f8:	f7 07       	cpc	r31, r23
    10fa:	a4 f4       	brge	.+40     	; 0x1124 <crc16+0x42>
    10fc:	ae 0f       	add	r26, r30
    10fe:	bf 1f       	adc	r27, r31
		out ^= ptrToArray[l];
    1100:	8c 91       	ld	r24, X
    1102:	28 27       	eor	r18, r24
    1104:	88 e0       	ldi	r24, 0x08	; 8
		for (n = 0; n < 8; n++) {
			carry = out & 1;
    1106:	d9 01       	movw	r26, r18
    1108:	a1 70       	andi	r26, 0x01	; 1
    110a:	bb 27       	eor	r27, r27
			out >>= 1;
    110c:	36 95       	lsr	r19
    110e:	27 95       	ror	r18
			if (carry) out ^= 0xA001;
    1110:	ab 2b       	or	r26, r27
    1112:	21 f0       	breq	.+8      	; 0x111c <crc16+0x3a>
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	29 27       	eor	r18, r25
    1118:	90 ea       	ldi	r25, 0xA0	; 160
    111a:	39 27       	eor	r19, r25
    111c:	81 50       	subi	r24, 0x01	; 1
	uint16_t carry;
	unsigned char n;
	inputSize++;
	for (int l=0; l<inputSize; l++) {
		out ^= ptrToArray[l];
		for (n = 0; n < 8; n++) {
    111e:	99 f7       	brne	.-26     	; 0x1106 <crc16+0x24>
{
	uint16_t out=0xffff;
	uint16_t carry;
	unsigned char n;
	inputSize++;
	for (int l=0; l<inputSize; l++) {
    1120:	31 96       	adiw	r30, 0x01	; 1
    1122:	e8 cf       	rjmp	.-48     	; 0x10f4 <crc16+0x12>
			out >>= 1;
			if (carry) out ^= 0xA001;
		}
	}
	//out=0x1234;
	if ((ptrToArray[inputSize]==out%256) && (ptrToArray[inputSize+1]==out/256)) //check
    1124:	a6 0f       	add	r26, r22
    1126:	b7 1f       	adc	r27, r23
    1128:	ec 91       	ld	r30, X
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	6f 5f       	subi	r22, 0xFF	; 255
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	c9 01       	movw	r24, r18
    1132:	99 27       	eor	r25, r25
    1134:	e8 17       	cp	r30, r24
    1136:	f9 07       	cpc	r31, r25
    1138:	51 f4       	brne	.+20     	; 0x114e <crc16+0x6c>
    113a:	fa 01       	movw	r30, r20
    113c:	e6 0f       	add	r30, r22
    113e:	f7 1f       	adc	r31, r23
    1140:	80 81       	ld	r24, Z
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	e3 2f       	mov	r30, r19
    1146:	ff 27       	eor	r31, r31
    1148:	8e 17       	cp	r24, r30
    114a:	9f 07       	cpc	r25, r31
    114c:	39 f0       	breq	.+14     	; 0x115c <crc16+0x7a>
	{
		return 1;
	} else { 
		ptrToArray[inputSize]=out%256; //append Lo
    114e:	2c 93       	st	X, r18
		ptrToArray[inputSize+1]=out/256; //append Hi
    1150:	fa 01       	movw	r30, r20
    1152:	e6 0f       	add	r30, r22
    1154:	f7 1f       	adc	r31, r23
    1156:	30 83       	st	Z, r19
		return 0;	
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	08 95       	ret
		}
	}
	//out=0x1234;
	if ((ptrToArray[inputSize]==out%256) && (ptrToArray[inputSize+1]==out/256)) //check
	{
		return 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
	} else { 
		ptrToArray[inputSize]=out%256; //append Lo
		ptrToArray[inputSize+1]=out/256; //append Hi
		return 0;	
	}
}
    115e:	08 95       	ret

00001160 <listRegisterCopy>:
/* @brief: copies a single or multiple words from one array of bytes to another array of bytes
*          amount must not be bigger than 255...
*
*/
void listRegisterCopy(volatile uint8_t *source, volatile uint8_t *target, uint8_t amount)
{
    1160:	28 2f       	mov	r18, r24
    1162:	db 01       	movw	r26, r22
	for (uint8_t c=0; c<amount; c++)
    1164:	fc 01       	movw	r30, r24
    1166:	8e 2f       	mov	r24, r30
    1168:	82 1b       	sub	r24, r18
    116a:	84 17       	cp	r24, r20
    116c:	18 f4       	brcc	.+6      	; 0x1174 <listRegisterCopy+0x14>
	{
		*(target+c)=*(source+c);
    116e:	81 91       	ld	r24, Z+
    1170:	8d 93       	st	X+, r24
    1172:	f9 cf       	rjmp	.-14     	; 0x1166 <listRegisterCopy+0x6>
	}
}
    1174:	08 95       	ret

00001176 <listBitCopy>:
*
*
*/
void listBitCopy(volatile uint8_t *source, uint16_t sourceNr,volatile uint8_t *target, uint16_t targetNr)
{
	if(*(source+(sourceNr/8))&(1<<(sourceNr-((sourceNr/8)*8))))
    1176:	fb 01       	movw	r30, r22
    1178:	a3 e0       	ldi	r26, 0x03	; 3
    117a:	f6 95       	lsr	r31
    117c:	e7 95       	ror	r30
    117e:	aa 95       	dec	r26
    1180:	e1 f7       	brne	.-8      	; 0x117a <listBitCopy+0x4>
    1182:	e8 0f       	add	r30, r24
    1184:	f9 1f       	adc	r31, r25
    1186:	80 81       	ld	r24, Z
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	67 70       	andi	r22, 0x07	; 7
    118c:	77 27       	eor	r23, r23
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <listBitCopy+0x1e>
    1190:	95 95       	asr	r25
    1192:	87 95       	ror	r24
    1194:	6a 95       	dec	r22
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <listBitCopy+0x1a>
    1198:	f9 01       	movw	r30, r18
    119a:	b3 e0       	ldi	r27, 0x03	; 3
    119c:	f6 95       	lsr	r31
    119e:	e7 95       	ror	r30
    11a0:	ba 95       	dec	r27
    11a2:	e1 f7       	brne	.-8      	; 0x119c <listBitCopy+0x26>
    11a4:	27 70       	andi	r18, 0x07	; 7
    11a6:	33 27       	eor	r19, r19
	{
		*(target+(targetNr/8))|=(1<<(targetNr-((targetNr/8)*8)));
    11a8:	e4 0f       	add	r30, r20
    11aa:	f5 1f       	adc	r31, r21
    11ac:	30 81       	ld	r19, Z
*
*
*/
void listBitCopy(volatile uint8_t *source, uint16_t sourceNr,volatile uint8_t *target, uint16_t targetNr)
{
	if(*(source+(sourceNr/8))&(1<<(sourceNr-((sourceNr/8)*8))))
    11ae:	80 ff       	sbrs	r24, 0
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <listBitCopy+0x4c>
	{
		*(target+(targetNr/8))|=(1<<(targetNr-((targetNr/8)*8)));
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <listBitCopy+0x44>
    11b8:	88 0f       	add	r24, r24
    11ba:	2a 95       	dec	r18
    11bc:	ea f7       	brpl	.-6      	; 0x11b8 <listBitCopy+0x42>
    11be:	83 2b       	or	r24, r19
    11c0:	08 c0       	rjmp	.+16     	; 0x11d2 <listBitCopy+0x5c>
	} else *(target+(targetNr/8))&=~(1<<(targetNr-((targetNr/8)*8)));
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <listBitCopy+0x54>
    11c8:	88 0f       	add	r24, r24
    11ca:	2a 95       	dec	r18
    11cc:	ea f7       	brpl	.-6      	; 0x11c8 <listBitCopy+0x52>
    11ce:	80 95       	com	r24
    11d0:	83 23       	and	r24, r19
    11d2:	80 83       	st	Z, r24
    11d4:	08 95       	ret

000011d6 <modbusReset>:
/* @brief: Back to receiving state.
*
*/
void modbusReset(void)
{
	BusState=(1<<TimerActive); //stop receiving (error)
    11d6:	80 e2       	ldi	r24, 0x20	; 32
    11d8:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BusState>
	modbusTimer=0;
    11dc:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <modbusTimer+0x1>
    11e0:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <modbusTimer>
    11e4:	08 95       	ret

000011e6 <modbusTickTimer>:
}

void modbusTickTimer(void)
{
	if (BusState&(1<<TimerActive)) 
    11e6:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <BusState>
    11ea:	85 ff       	sbrs	r24, 5
    11ec:	3e c0       	rjmp	.+124    	; 0x126a <modbusTickTimer+0x84>
	{
		modbusTimer++;
    11ee:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <modbusTimer>
    11f2:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <modbusTimer+0x1>
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <modbusTimer+0x1>
    11fc:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <modbusTimer>
		if (BusState&(1<<Receiving)) //we are in receiving mode
    1200:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <BusState>
    1204:	81 ff       	sbrs	r24, 1
    1206:	26 c0       	rjmp	.+76     	; 0x1254 <modbusTickTimer+0x6e>
		{
			if ((modbusTimer==modbusInterCharTimeout)) {
    1208:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <modbusTimer>
    120c:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <modbusTimer+0x1>
    1210:	07 97       	sbiw	r24, 0x07	; 7
    1212:	21 f4       	brne	.+8      	; 0x121c <modbusTickTimer+0x36>
				BusState|=(1<<GapDetected);
    1214:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <BusState>
    1218:	80 64       	ori	r24, 0x40	; 64
    121a:	25 c0       	rjmp	.+74     	; 0x1266 <modbusTickTimer+0x80>
			} else if ((modbusTimer==modbusInterFrameDelayReceiveEnd)) { //end of message
    121c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <modbusTimer>
    1220:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <modbusTimer+0x1>
    1224:	42 97       	sbiw	r24, 0x12	; 18
    1226:	09 f5       	brne	.+66     	; 0x126a <modbusTickTimer+0x84>
				BusState=(1<<ReceiveCompleted);
    1228:	88 e0       	ldi	r24, 0x08	; 8
    122a:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BusState>
				#if ADDRESS_MODE == MULTIPLE_ADR
               		 if (crc16(rxbuffer,DataPos-3)) { //perform crc check only. This is for multiple/all address mode.
                	} else modbusReset();
				#endif
				#if ADDRESS_MODE == SINGLE_ADR
				if (rxbuffer[0]==Address && crc16(rxbuffer,DataPos-3)) { //is the message for us? => perform crc check
    122e:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <rxbuffer>
    1232:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <Address>
    1236:	98 13       	cpse	r25, r24
				} else modbusReset();
    1238:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <modbusReset>
				#if ADDRESS_MODE == MULTIPLE_ADR
               		 if (crc16(rxbuffer,DataPos-3)) { //perform crc check only. This is for multiple/all address mode.
                	} else modbusReset();
				#endif
				#if ADDRESS_MODE == SINGLE_ADR
				if (rxbuffer[0]==Address && crc16(rxbuffer,DataPos-3)) { //is the message for us? => perform crc check
    123c:	60 91 c1 01 	lds	r22, 0x01C1	; 0x8001c1 <DataPos>
    1240:	70 91 c2 01 	lds	r23, 0x01C2	; 0x8001c2 <DataPos+0x1>
    1244:	63 50       	subi	r22, 0x03	; 3
    1246:	87 e0       	ldi	r24, 0x07	; 7
    1248:	92 e0       	ldi	r25, 0x02	; 2
    124a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <crc16>
    124e:	81 11       	cpse	r24, r1
    1250:	0c c0       	rjmp	.+24     	; 0x126a <modbusTickTimer+0x84>
    1252:	f2 cf       	rjmp	.-28     	; 0x1238 <modbusTickTimer+0x52>
				} else modbusReset();
				#endif
			}	
		} else if (modbusTimer==modbusInterFrameDelayReceiveStart) BusState|=(1<<BusTimedOut);
    1254:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <modbusTimer>
    1258:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <modbusTimer+0x1>
    125c:	40 97       	sbiw	r24, 0x10	; 16
    125e:	29 f4       	brne	.+10     	; 0x126a <modbusTickTimer+0x84>
    1260:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <BusState>
    1264:	81 60       	ori	r24, 0x01	; 1
    1266:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BusState>
    126a:	08 95       	ret

0000126c <__vector_18>:
	}
}

ISR(UART_RECEIVE_INTERRUPT)
{
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	2f 93       	push	r18
    1278:	3f 93       	push	r19
    127a:	4f 93       	push	r20
    127c:	5f 93       	push	r21
    127e:	6f 93       	push	r22
    1280:	7f 93       	push	r23
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	af 93       	push	r26
    1288:	bf 93       	push	r27
    128a:	ef 93       	push	r30
    128c:	ff 93       	push	r31
	unsigned char data;
	data = UART_DATA;
    128e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	modbusTimer=0; //reset timer
    1292:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <modbusTimer+0x1>
    1296:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <modbusTimer>
	if (!(BusState & (1<<ReceiveCompleted)) && !(BusState & (1<<TransmitRequested)) && !(BusState & (1<<Transmitting)) && (BusState & (1<<Receiving)) && !(BusState & (1<<BusTimedOut)))
    129a:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <BusState>
    129e:	93 fd       	sbrc	r25, 3
    12a0:	28 c0       	rjmp	.+80     	; 0x12f2 <__vector_18+0x86>
    12a2:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <BusState>
    12a6:	94 fd       	sbrc	r25, 4
    12a8:	24 c0       	rjmp	.+72     	; 0x12f2 <__vector_18+0x86>
    12aa:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <BusState>
    12ae:	92 fd       	sbrc	r25, 2
    12b0:	20 c0       	rjmp	.+64     	; 0x12f2 <__vector_18+0x86>
    12b2:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <BusState>
    12b6:	91 ff       	sbrs	r25, 1
    12b8:	1c c0       	rjmp	.+56     	; 0x12f2 <__vector_18+0x86>
    12ba:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <BusState>
    12be:	90 fd       	sbrc	r25, 0
    12c0:	18 c0       	rjmp	.+48     	; 0x12f2 <__vector_18+0x86>
	{
		if (DataPos>MaxFrameIndex) modbusReset();
    12c2:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <DataPos>
    12c6:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <DataPos+0x1>
    12ca:	2f 3f       	cpi	r18, 0xFF	; 255
    12cc:	31 05       	cpc	r19, r1
    12ce:	21 f0       	breq	.+8      	; 0x12d8 <__vector_18+0x6c>
    12d0:	18 f0       	brcs	.+6      	; 0x12d8 <__vector_18+0x6c>
    12d2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <modbusReset>
    12d6:	2c c0       	rjmp	.+88     	; 0x1330 <__vector_18+0xc4>
	    	else
		{
			rxbuffer[DataPos]=data;
    12d8:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <DataPos>
    12dc:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <DataPos+0x1>
    12e0:	e9 5f       	subi	r30, 0xF9	; 249
    12e2:	fd 4f       	sbci	r31, 0xFD	; 253
    12e4:	80 83       	st	Z, r24
			DataPos++; //TODO: maybe prevent this from exceeding 255?
    12e6:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <DataPos>
    12ea:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <DataPos+0x1>
    12ee:	01 96       	adiw	r24, 0x01	; 1
    12f0:	1b c0       	rjmp	.+54     	; 0x1328 <__vector_18+0xbc>
		}	    
    	} else 
	if (!(BusState & (1<<ReceiveCompleted)) && !(BusState & (1<<TransmitRequested)) && !(BusState & (1<<Transmitting)) && !(BusState & (1<<Receiving)) && (BusState & (1<<BusTimedOut))) 
    12f2:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <BusState>
    12f6:	93 fd       	sbrc	r25, 3
    12f8:	1b c0       	rjmp	.+54     	; 0x1330 <__vector_18+0xc4>
    12fa:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <BusState>
    12fe:	94 fd       	sbrc	r25, 4
    1300:	17 c0       	rjmp	.+46     	; 0x1330 <__vector_18+0xc4>
    1302:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <BusState>
    1306:	92 fd       	sbrc	r25, 2
    1308:	13 c0       	rjmp	.+38     	; 0x1330 <__vector_18+0xc4>
    130a:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <BusState>
    130e:	91 fd       	sbrc	r25, 1
    1310:	0f c0       	rjmp	.+30     	; 0x1330 <__vector_18+0xc4>
    1312:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <BusState>
    1316:	90 ff       	sbrs	r25, 0
    1318:	0b c0       	rjmp	.+22     	; 0x1330 <__vector_18+0xc4>
	{ 
		 rxbuffer[0]=data;
    131a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <rxbuffer>
		 BusState=((1<<Receiving)|(1<<TimerActive));
    131e:	82 e2       	ldi	r24, 0x22	; 34
    1320:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BusState>
		 DataPos=1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <DataPos+0x1>
    132c:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <DataPos>
    	}
}
    1330:	ff 91       	pop	r31
    1332:	ef 91       	pop	r30
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	0f 90       	pop	r0
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	0f 90       	pop	r0
    134e:	1f 90       	pop	r1
    1350:	18 95       	reti

00001352 <__vector_19>:

ISR(UART_TRANSMIT_INTERRUPT)
{
    1352:	1f 92       	push	r1
    1354:	0f 92       	push	r0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	0f 92       	push	r0
    135a:	11 24       	eor	r1, r1
    135c:	2f 93       	push	r18
    135e:	3f 93       	push	r19
    1360:	8f 93       	push	r24
    1362:	9f 93       	push	r25
    1364:	ef 93       	push	r30
    1366:	ff 93       	push	r31
	BusState&=~(1<<TransmitRequested);
    1368:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <BusState>
    136c:	8f 7e       	andi	r24, 0xEF	; 239
    136e:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BusState>
	BusState|=(1<<Transmitting);
    1372:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <BusState>
    1376:	84 60       	ori	r24, 0x04	; 4
    1378:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BusState>
	UART_DATA=rxbuffer[DataPos];
    137c:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <DataPos>
    1380:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <DataPos+0x1>
    1384:	e9 5f       	subi	r30, 0xF9	; 249
    1386:	fd 4f       	sbci	r31, 0xFD	; 253
    1388:	80 81       	ld	r24, Z
    138a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	DataPos++;
    138e:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <DataPos>
    1392:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <DataPos+0x1>
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <DataPos+0x1>
    139c:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <DataPos>
	if (DataPos==(PacketTopIndex+1)) {
    13a0:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <DataPos>
    13a4:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <DataPos+0x1>
    13a8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <PacketTopIndex>
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	01 96       	adiw	r24, 0x01	; 1
    13b0:	28 17       	cp	r18, r24
    13b2:	39 07       	cpc	r19, r25
    13b4:	29 f4       	brne	.+10     	; 0x13c0 <__vector_19+0x6e>
		UART_CONTROL&=~(1<<UART_UDRIE);
    13b6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    13ba:	8f 7d       	andi	r24, 0xDF	; 223
    13bc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	}
}
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	9f 91       	pop	r25
    13c6:	8f 91       	pop	r24
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	0f 90       	pop	r0
    13d2:	1f 90       	pop	r1
    13d4:	18 95       	reti

000013d6 <__vector_20>:

ISR(UART_TRANSMIT_COMPLETE_INTERRUPT)
{
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	2f 93       	push	r18
    13e2:	3f 93       	push	r19
    13e4:	4f 93       	push	r20
    13e6:	5f 93       	push	r21
    13e8:	6f 93       	push	r22
    13ea:	7f 93       	push	r23
    13ec:	8f 93       	push	r24
    13ee:	9f 93       	push	r25
    13f0:	af 93       	push	r26
    13f2:	bf 93       	push	r27
    13f4:	ef 93       	push	r30
    13f6:	ff 93       	push	r31
	#if PHYSICAL_TYPE == 485
	transceiver_rxen();
    13f8:	0e 94 6f 08 	call	0x10de	; 0x10de <transceiver_rxen>
	#endif
	modbusReset();
    13fc:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <modbusReset>
}
    1400:	ff 91       	pop	r31
    1402:	ef 91       	pop	r30
    1404:	bf 91       	pop	r27
    1406:	af 91       	pop	r26
    1408:	9f 91       	pop	r25
    140a:	8f 91       	pop	r24
    140c:	7f 91       	pop	r23
    140e:	6f 91       	pop	r22
    1410:	5f 91       	pop	r21
    1412:	4f 91       	pop	r20
    1414:	3f 91       	pop	r19
    1416:	2f 91       	pop	r18
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <modbusInit>:

void modbusInit(void)
{
	UBRRH = (unsigned char)((UBRR) >> 8);
    1422:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRRL = (unsigned char) UBRR;
    1426:	8f ec       	ldi	r24, 0xCF	; 207
    1428:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UART_STATUS = (1<<U2X); //double speed mode.
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
#ifdef URSEL   // if UBRRH and UCSRC share the same I/O location , e.g. ATmega8
	UCSRC = (1<<URSEL)|(3<<UCSZ0); //Frame Size
#else
   UCSRC = (3<<UCSZ0); //Frame Size
    1432:	86 e0       	ldi	r24, 0x06	; 6
    1434:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
#endif
	UART_CONTROL = (1<<TXCIE)|(1<<RXCIE)|(1<<RXEN)|(1<<TXEN); // USART receiver and transmitter and receive complete interrupt
    1438:	88 ed       	ldi	r24, 0xD8	; 216
    143a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	#if PHYSICAL_TYPE == 485
	TRANSCEIVER_ENABLE_PORT_DDR|=(1<<TRANSCEIVER_ENABLE_PIN);
    143e:	52 9a       	sbi	0x0a, 2	; 10
	transceiver_rxen();
    1440:	0e 94 6f 08 	call	0x10de	; 0x10de <transceiver_rxen>
	#endif
	BusState=(1<<TimerActive);
    1444:	80 e2       	ldi	r24, 0x20	; 32
    1446:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BusState>
    144a:	08 95       	ret

0000144c <modbusSendMessage>:
*         Arguments: - packtop: Position of the last byte containing data.
*                               modbusSendException is a good usage example.
*/
void modbusSendMessage(unsigned char packtop)
{
	PacketTopIndex=packtop+2;
    144c:	92 e0       	ldi	r25, 0x02	; 2
    144e:	98 0f       	add	r25, r24
    1450:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <PacketTopIndex>
	crc16(rxbuffer,packtop);
    1454:	68 2f       	mov	r22, r24
    1456:	87 e0       	ldi	r24, 0x07	; 7
    1458:	92 e0       	ldi	r25, 0x02	; 2
    145a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <crc16>
	BusState|=(1<<TransmitRequested);
    145e:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <BusState>
    1462:	80 61       	ori	r24, 0x10	; 16
    1464:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BusState>
	DataPos=0;
    1468:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <DataPos+0x1>
    146c:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <DataPos>
	#if PHYSICAL_TYPE == 485
	transceiver_txen();
    1470:	0e 94 6d 08 	call	0x10da	; 0x10da <transceiver_txen>
	#endif
	UART_CONTROL|=(1<<UART_UDRIE);
    1474:	e1 ec       	ldi	r30, 0xC1	; 193
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 62       	ori	r24, 0x20	; 32
    147c:	80 83       	st	Z, r24
	BusState&=~(1<<ReceiveCompleted);
    147e:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <BusState>
    1482:	87 7f       	andi	r24, 0xF7	; 247
    1484:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <BusState>
    1488:	08 95       	ret

0000148a <modbusSendException>:
*         Arguments: - exceptionCode
*                              
*/
void modbusSendException(unsigned char exceptionCode)
{
	rxbuffer[1]|=(1<<7); //setting MSB of the function code (the exception flag)
    148a:	e7 e0       	ldi	r30, 0x07	; 7
    148c:	f2 e0       	ldi	r31, 0x02	; 2
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	90 68       	ori	r25, 0x80	; 128
    1492:	91 83       	std	Z+1, r25	; 0x01
	rxbuffer[2]=exceptionCode; //Exceptioncode. Also the last byte containing data
    1494:	82 83       	std	Z+2, r24	; 0x02
	modbusSendMessage(2);
    1496:	82 e0       	ldi	r24, 0x02	; 2
    1498:	0c 94 26 0a 	jmp	0x144c	; 0x144c <modbusSendMessage>

0000149c <modbusRequestedAmount>:
/* @brief:  Returns the amount of requested data objects (coils, discretes, registers)
*
*/
uint16_t modbusRequestedAmount(void)
{
	return (rxbuffer[5]|(rxbuffer[4]<<8));
    149c:	e7 e0       	ldi	r30, 0x07	; 7
    149e:	f2 e0       	ldi	r31, 0x02	; 2
    14a0:	85 81       	ldd	r24, Z+5	; 0x05
    14a2:	24 81       	ldd	r18, Z+4	; 0x04
    14a4:	90 e0       	ldi	r25, 0x00	; 0
}
    14a6:	92 2b       	or	r25, r18
    14a8:	08 95       	ret

000014aa <modbusRequestedAddress>:
/* @brief: Returns the address of the first requested data object (coils, discretes, registers)
*
*/
uint16_t modbusRequestedAddress(void)
{
	return (rxbuffer[3]|(rxbuffer[2]<<8));
    14aa:	e7 e0       	ldi	r30, 0x07	; 7
    14ac:	f2 e0       	ldi	r31, 0x02	; 2
    14ae:	83 81       	ldd	r24, Z+3	; 0x03
    14b0:	22 81       	ldd	r18, Z+2	; 0x02
    14b2:	90 e0       	ldi	r25, 0x00	; 0
}
    14b4:	92 2b       	or	r25, r18
    14b6:	08 95       	ret

000014b8 <intToModbusRegister>:

/* @brief: copies a single or multiple bytes from one array of bytes to an array of 16-bit-words
*
*/
void intToModbusRegister(volatile uint16_t *inreg, volatile uint8_t *outreg, uint8_t amount)
{
    14b8:	dc 01       	movw	r26, r24
    14ba:	fb 01       	movw	r30, r22
	for (uint8_t c=0; c<amount; c++)
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	94 17       	cp	r25, r20
    14c0:	51 f0       	breq	.+20     	; 0x14d6 <intToModbusRegister+0x1e>
	{
			*(outreg+c*2) = (uint8_t)(*(inreg+c) >> 8);
    14c2:	2d 91       	ld	r18, X+
    14c4:	3c 91       	ld	r19, X
    14c6:	11 97       	sbiw	r26, 0x01	; 1
    14c8:	30 83       	st	Z, r19
			*(outreg+1+c*2) = (uint8_t)(*(inreg+c));
    14ca:	2d 91       	ld	r18, X+
    14cc:	3d 91       	ld	r19, X+
    14ce:	21 83       	std	Z+1, r18	; 0x01
/* @brief: copies a single or multiple bytes from one array of bytes to an array of 16-bit-words
*
*/
void intToModbusRegister(volatile uint16_t *inreg, volatile uint8_t *outreg, uint8_t amount)
{
	for (uint8_t c=0; c<amount; c++)
    14d0:	9f 5f       	subi	r25, 0xFF	; 255
    14d2:	32 96       	adiw	r30, 0x02	; 2
    14d4:	f4 cf       	rjmp	.-24     	; 0x14be <intToModbusRegister+0x6>
	{
			*(outreg+c*2) = (uint8_t)(*(inreg+c) >> 8);
			*(outreg+1+c*2) = (uint8_t)(*(inreg+c));
	}
}
    14d6:	08 95       	ret

000014d8 <modbusRegisterToInt>:

/* @brief: copies a single or multiple 16-bit-words from one array of integers to an array of bytes
*
*/
void modbusRegisterToInt(volatile uint8_t *inreg, volatile uint16_t *outreg, uint8_t amount)
{
    14d8:	fb 01       	movw	r30, r22
	for (uint8_t c=0; c<amount; c++)
    14da:	50 e0       	ldi	r21, 0x00	; 0
    14dc:	54 17       	cp	r21, r20
    14de:	79 f0       	breq	.+30     	; 0x14fe <modbusRegisterToInt+0x26>
	{
		*(outreg+c) = (*(inreg+c*2) << 8) + *(inreg+1+c*2);
    14e0:	dc 01       	movw	r26, r24
    14e2:	2c 91       	ld	r18, X
    14e4:	11 96       	adiw	r26, 0x01	; 1
    14e6:	6c 91       	ld	r22, X
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	32 2f       	mov	r19, r18
    14ec:	22 27       	eor	r18, r18
    14ee:	26 0f       	add	r18, r22
    14f0:	31 1d       	adc	r19, r1
    14f2:	31 83       	std	Z+1, r19	; 0x01
    14f4:	20 83       	st	Z, r18
    14f6:	32 96       	adiw	r30, 0x02	; 2
/* @brief: copies a single or multiple 16-bit-words from one array of integers to an array of bytes
*
*/
void modbusRegisterToInt(volatile uint8_t *inreg, volatile uint16_t *outreg, uint8_t amount)
{
	for (uint8_t c=0; c<amount; c++)
    14f8:	5f 5f       	subi	r21, 0xFF	; 255
    14fa:	02 96       	adiw	r24, 0x02	; 2
    14fc:	ef cf       	rjmp	.-34     	; 0x14dc <modbusRegisterToInt+0x4>
	{
		*(outreg+c) = (*(inreg+c*2) << 8) + *(inreg+1+c*2);
	}
}
    14fe:	08 95       	ret

00001500 <modbusExchangeRegisters>:
*                    - startAddress: address of the first register in the supplied array
*                    - size: input array size in the requested format (16bit-registers)
*
*/
uint8_t modbusExchangeRegisters(volatile uint16_t *ptrToInArray, uint16_t startAddress, uint16_t size)
{
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	7c 01       	movw	r14, r24
    1512:	8b 01       	movw	r16, r22
    1514:	6a 01       	movw	r12, r20
	uint16_t requestedAmount = modbusRequestedAmount();
    1516:	0e 94 4e 0a 	call	0x149c	; 0x149c <modbusRequestedAmount>
    151a:	ec 01       	movw	r28, r24
	uint16_t requestedAdr = modbusRequestedAddress();
    151c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <modbusRequestedAddress>
    1520:	9c 01       	movw	r18, r24
	if (rxbuffer[1]==fcPresetSingleRegister) requestedAmount=1;
    1522:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxbuffer+0x1>
    1526:	86 30       	cpi	r24, 0x06	; 6
    1528:	11 f4       	brne	.+4      	; 0x152e <modbusExchangeRegisters+0x2e>
    152a:	c1 e0       	ldi	r28, 0x01	; 1
    152c:	d0 e0       	ldi	r29, 0x00	; 0
	if ((requestedAdr>=startAddress) && ((startAddress+size)>=(requestedAmount+requestedAdr))) {
    152e:	20 17       	cp	r18, r16
    1530:	31 07       	cpc	r19, r17
    1532:	b0 f1       	brcs	.+108    	; 0x15a0 <modbusExchangeRegisters+0xa0>
    1534:	c0 0e       	add	r12, r16
    1536:	d1 1e       	adc	r13, r17
    1538:	ce 01       	movw	r24, r28
    153a:	82 0f       	add	r24, r18
    153c:	93 1f       	adc	r25, r19
    153e:	c8 16       	cp	r12, r24
    1540:	d9 06       	cpc	r13, r25
    1542:	70 f1       	brcs	.+92     	; 0x15a0 <modbusExchangeRegisters+0xa0>
		
		if ((rxbuffer[1]==fcReadHoldingRegisters) || (rxbuffer[1]==fcReadInputRegisters) )
    1544:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxbuffer+0x1>
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	21 f0       	breq	.+8      	; 0x1554 <modbusExchangeRegisters+0x54>
    154c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxbuffer+0x1>
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	c9 f4       	brne	.+50     	; 0x1586 <modbusExchangeRegisters+0x86>
		{
			if ((requestedAmount*2)<=(MaxFrameIndex-4)) //message buffer big enough?
    1554:	ce 01       	movw	r24, r28
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	8c 3f       	cpi	r24, 0xFC	; 252
    155c:	91 05       	cpc	r25, r1
    155e:	00 f5       	brcc	.+64     	; 0x15a0 <modbusExchangeRegisters+0xa0>
			{
				rxbuffer[2]=(unsigned char)(requestedAmount*2);
    1560:	cc 0f       	add	r28, r28
    1562:	c0 93 09 02 	sts	0x0209, r28	; 0x800209 <rxbuffer+0x2>
				intToModbusRegister(ptrToInArray+(unsigned char)(requestedAdr-startAddress),rxbuffer+3,rxbuffer[2]);
    1566:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <rxbuffer+0x2>
    156a:	20 1b       	sub	r18, r16
    156c:	6a e0       	ldi	r22, 0x0A	; 10
    156e:	72 e0       	ldi	r23, 0x02	; 2
    1570:	c7 01       	movw	r24, r14
    1572:	82 0f       	add	r24, r18
    1574:	91 1d       	adc	r25, r1
    1576:	82 0f       	add	r24, r18
    1578:	91 1d       	adc	r25, r1
    157a:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <intToModbusRegister>
				modbusSendMessage(2+rxbuffer[2]);
    157e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <rxbuffer+0x2>
    1582:	8e 5f       	subi	r24, 0xFE	; 254
    1584:	37 c0       	rjmp	.+110    	; 0x15f4 <modbusExchangeRegisters+0xf4>
				return 1;
			} else modbusSendException(ecIllegalDataValue);
		}
		else if (rxbuffer[1]==fcPresetMultipleRegisters)
    1586:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxbuffer+0x1>
    158a:	80 31       	cpi	r24, 0x10	; 16
    158c:	19 f5       	brne	.+70     	; 0x15d4 <modbusExchangeRegisters+0xd4>
		{
			if (((rxbuffer[6])>=requestedAmount*2) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
    158e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rxbuffer+0x6>
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	ae 01       	movw	r20, r28
    1596:	44 0f       	add	r20, r20
    1598:	55 1f       	adc	r21, r21
    159a:	84 17       	cp	r24, r20
    159c:	95 07       	cpc	r25, r21
    159e:	20 f4       	brcc	.+8      	; 0x15a8 <modbusExchangeRegisters+0xa8>
			{
				rxbuffer[2]=(unsigned char)(requestedAmount*2);
				intToModbusRegister(ptrToInArray+(unsigned char)(requestedAdr-startAddress),rxbuffer+3,rxbuffer[2]);
				modbusSendMessage(2+rxbuffer[2]);
				return 1;
			} else modbusSendException(ecIllegalDataValue);
    15a0:	83 e0       	ldi	r24, 0x03	; 3
    15a2:	0e 94 45 0a 	call	0x148a	; 0x148a <modbusSendException>
    15a6:	2a c0       	rjmp	.+84     	; 0x15fc <modbusExchangeRegisters+0xfc>
		}
		else if (rxbuffer[1]==fcPresetMultipleRegisters)
		{
			if (((rxbuffer[6])>=requestedAmount*2) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
    15a8:	40 91 c1 01 	lds	r20, 0x01C1	; 0x8001c1 <DataPos>
    15ac:	50 91 c2 01 	lds	r21, 0x01C2	; 0x8001c2 <DataPos+0x1>
    15b0:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rxbuffer+0x6>
    15b4:	49 50       	subi	r20, 0x09	; 9
    15b6:	51 09       	sbc	r21, r1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	48 17       	cp	r20, r24
    15bc:	59 07       	cpc	r21, r25
    15be:	80 f3       	brcs	.-32     	; 0x15a0 <modbusExchangeRegisters+0xa0>
			{
				modbusRegisterToInt(rxbuffer+7,ptrToInArray+(unsigned char)(requestedAdr-startAddress),(unsigned char)(requestedAmount));
    15c0:	20 1b       	sub	r18, r16
    15c2:	b7 01       	movw	r22, r14
    15c4:	62 0f       	add	r22, r18
    15c6:	71 1d       	adc	r23, r1
    15c8:	62 0f       	add	r22, r18
    15ca:	71 1d       	adc	r23, r1
    15cc:	4c 2f       	mov	r20, r28
    15ce:	8e e0       	ldi	r24, 0x0E	; 14
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	0d c0       	rjmp	.+26     	; 0x15ee <modbusExchangeRegisters+0xee>
				modbusSendMessage(5);
				return 1;
			} else modbusSendException(ecIllegalDataValue);//too few data bytes received
		}
		else if (rxbuffer[1]==fcPresetSingleRegister)
    15d4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxbuffer+0x1>
    15d8:	86 30       	cpi	r24, 0x06	; 6
    15da:	81 f4       	brne	.+32     	; 0x15fc <modbusExchangeRegisters+0xfc>
		{
			modbusRegisterToInt(rxbuffer+4,ptrToInArray+(unsigned char)(requestedAdr-startAddress),1);
    15dc:	20 1b       	sub	r18, r16
    15de:	b7 01       	movw	r22, r14
    15e0:	62 0f       	add	r22, r18
    15e2:	71 1d       	adc	r23, r1
    15e4:	62 0f       	add	r22, r18
    15e6:	71 1d       	adc	r23, r1
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	8b e0       	ldi	r24, 0x0B	; 11
    15ec:	92 e0       	ldi	r25, 0x02	; 2
    15ee:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <modbusRegisterToInt>
			modbusSendMessage(5);
    15f2:	85 e0       	ldi	r24, 0x05	; 5
    15f4:	0e 94 26 0a 	call	0x144c	; 0x144c <modbusSendMessage>
			return 1;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	01 c0       	rjmp	.+2      	; 0x15fe <modbusExchangeRegisters+0xfe>
		} 
		//modbusSendException(ecSlaveDeviceFailure); //inapropriate call of modbusExchangeRegisters
		return 0;
    15fc:	80 e0       	ldi	r24, 0x00	; 0
		} else {
		modbusSendException(ecIllegalDataValue);
		return 0;
	}
}
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	08 95       	ret

00001610 <modbusExchangeBits>:
*                    - startAddress: address of the first bit in the supplied array
*                    - size: input array size in the requested format (bits)
*
*/
uint8_t modbusExchangeBits(volatile uint8_t *ptrToInArray, uint16_t startAddress, uint16_t size)
{
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
    1620:	6c 01       	movw	r12, r24
    1622:	8b 01       	movw	r16, r22
    1624:	7a 01       	movw	r14, r20
	uint16_t requestedAmount = modbusRequestedAmount();
    1626:	0e 94 4e 0a 	call	0x149c	; 0x149c <modbusRequestedAmount>
    162a:	ec 01       	movw	r28, r24
	uint16_t requestedAdr = modbusRequestedAddress();
    162c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <modbusRequestedAddress>
    1630:	fc 01       	movw	r30, r24
	if (rxbuffer[1]==fcForceSingleCoil) requestedAmount=1;
    1632:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxbuffer+0x1>
    1636:	85 30       	cpi	r24, 0x05	; 5
    1638:	11 f4       	brne	.+4      	; 0x163e <modbusExchangeBits+0x2e>
    163a:	c1 e0       	ldi	r28, 0x01	; 1
    163c:	d0 e0       	ldi	r29, 0x00	; 0
	if ((requestedAdr>=startAddress) && ((startAddress+size)>=(requestedAmount+requestedAdr)))
    163e:	e0 17       	cp	r30, r16
    1640:	f1 07       	cpc	r31, r17
    1642:	08 f4       	brcc	.+2      	; 0x1646 <modbusExchangeBits+0x36>
    1644:	52 c0       	rjmp	.+164    	; 0x16ea <modbusExchangeBits+0xda>
    1646:	e0 0e       	add	r14, r16
    1648:	f1 1e       	adc	r15, r17
    164a:	ce 01       	movw	r24, r28
    164c:	8e 0f       	add	r24, r30
    164e:	9f 1f       	adc	r25, r31
    1650:	e8 16       	cp	r14, r24
    1652:	f9 06       	cpc	r15, r25
    1654:	08 f4       	brcc	.+2      	; 0x1658 <modbusExchangeBits+0x48>
    1656:	49 c0       	rjmp	.+146    	; 0x16ea <modbusExchangeBits+0xda>
	{
		if ((rxbuffer[1]==fcReadInputStatus) || (rxbuffer[1]==fcReadCoilStatus))
    1658:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxbuffer+0x1>
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	21 f0       	breq	.+8      	; 0x1668 <modbusExchangeBits+0x58>
    1660:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxbuffer+0x1>
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	a1 f5       	brne	.+104    	; 0x16d0 <modbusExchangeBits+0xc0>
		{
			if (requestedAmount<=((MaxFrameIndex-4)*8)) //message buffer big enough?
    1668:	c9 3d       	cpi	r28, 0xD9	; 217
    166a:	27 e0       	ldi	r18, 0x07	; 7
    166c:	d2 07       	cpc	r29, r18
    166e:	e8 f5       	brcc	.+122    	; 0x16ea <modbusExchangeBits+0xda>
			{
				rxbuffer[2]=(requestedAmount/8);
    1670:	ce 01       	movw	r24, r28
    1672:	23 e0       	ldi	r18, 0x03	; 3
    1674:	96 95       	lsr	r25
    1676:	87 95       	ror	r24
    1678:	2a 95       	dec	r18
    167a:	e1 f7       	brne	.-8      	; 0x1674 <modbusExchangeBits+0x64>
    167c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <rxbuffer+0x2>
				if (requestedAmount%8>0)
    1680:	9e 01       	movw	r18, r28
    1682:	27 70       	andi	r18, 0x07	; 7
    1684:	33 27       	eor	r19, r19
    1686:	23 2b       	or	r18, r19
    1688:	49 f0       	breq	.+18     	; 0x169c <modbusExchangeBits+0x8c>
				{
					rxbuffer[(uint8_t)(requestedAmount/8)+3]=0x00; //fill last data byte with zeros
    168a:	dc 01       	movw	r26, r24
    168c:	a6 5f       	subi	r26, 0xF6	; 246
    168e:	bd 4f       	sbci	r27, 0xFD	; 253
    1690:	1c 92       	st	X, r1
					rxbuffer[2]++;
    1692:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <rxbuffer+0x2>
    1696:	8f 5f       	subi	r24, 0xFF	; 255
    1698:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <rxbuffer+0x2>
*/
uint8_t modbusExchangeBits(volatile uint8_t *ptrToInArray, uint16_t startAddress, uint16_t size)
{
	uint16_t requestedAmount = modbusRequestedAmount();
	uint16_t requestedAdr = modbusRequestedAddress();
	if (rxbuffer[1]==fcForceSingleCoil) requestedAmount=1;
    169c:	e1 2c       	mov	r14, r1
    169e:	f1 2c       	mov	r15, r1
					rxbuffer[(uint8_t)(requestedAmount/8)+3]=0x00; //fill last data byte with zeros
					rxbuffer[2]++;
				}
				for (uint16_t c = 0; c<requestedAmount; c++)
				{
					listBitCopy(ptrToInArray,requestedAdr-startAddress+c,rxbuffer+3,c);
    16a0:	cf 01       	movw	r24, r30
    16a2:	80 1b       	sub	r24, r16
    16a4:	91 0b       	sbc	r25, r17
    16a6:	8c 01       	movw	r16, r24
				if (requestedAmount%8>0)
				{
					rxbuffer[(uint8_t)(requestedAmount/8)+3]=0x00; //fill last data byte with zeros
					rxbuffer[2]++;
				}
				for (uint16_t c = 0; c<requestedAmount; c++)
    16a8:	ec 16       	cp	r14, r28
    16aa:	fd 06       	cpc	r15, r29
    16ac:	69 f0       	breq	.+26     	; 0x16c8 <modbusExchangeBits+0xb8>
    16ae:	b8 01       	movw	r22, r16
    16b0:	6e 0d       	add	r22, r14
    16b2:	7f 1d       	adc	r23, r15
				{
					listBitCopy(ptrToInArray,requestedAdr-startAddress+c,rxbuffer+3,c);
    16b4:	97 01       	movw	r18, r14
    16b6:	4a e0       	ldi	r20, 0x0A	; 10
    16b8:	52 e0       	ldi	r21, 0x02	; 2
    16ba:	c6 01       	movw	r24, r12
    16bc:	0e 94 bb 08 	call	0x1176	; 0x1176 <listBitCopy>
				if (requestedAmount%8>0)
				{
					rxbuffer[(uint8_t)(requestedAmount/8)+3]=0x00; //fill last data byte with zeros
					rxbuffer[2]++;
				}
				for (uint16_t c = 0; c<requestedAmount; c++)
    16c0:	9f ef       	ldi	r25, 0xFF	; 255
    16c2:	e9 1a       	sub	r14, r25
    16c4:	f9 0a       	sbc	r15, r25
    16c6:	f0 cf       	rjmp	.-32     	; 0x16a8 <modbusExchangeBits+0x98>
				{
					listBitCopy(ptrToInArray,requestedAdr-startAddress+c,rxbuffer+3,c);
				}
				modbusSendMessage(rxbuffer[2]+2);
    16c8:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <rxbuffer+0x2>
    16cc:	8e 5f       	subi	r24, 0xFE	; 254
    16ce:	42 c0       	rjmp	.+132    	; 0x1754 <modbusExchangeBits+0x144>
				return 1;
			} else modbusSendException(ecIllegalDataValue); //too many bits requested within single request
		}
		else if (rxbuffer[1]==fcForceMultipleCoils)
    16d0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxbuffer+0x1>
    16d4:	8f 30       	cpi	r24, 0x0F	; 15
    16d6:	79 f5       	brne	.+94     	; 0x1736 <modbusExchangeBits+0x126>
		{
			if (((rxbuffer[6]*8)>=requestedAmount) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
    16d8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rxbuffer+0x6>
    16dc:	28 e0       	ldi	r18, 0x08	; 8
    16de:	82 9f       	mul	r24, r18
    16e0:	c0 01       	movw	r24, r0
    16e2:	11 24       	eor	r1, r1
    16e4:	8c 17       	cp	r24, r28
    16e6:	9d 07       	cpc	r25, r29
    16e8:	20 f4       	brcc	.+8      	; 0x16f2 <modbusExchangeBits+0xe2>
				{
					listBitCopy(ptrToInArray,requestedAdr-startAddress+c,rxbuffer+3,c);
				}
				modbusSendMessage(rxbuffer[2]+2);
				return 1;
			} else modbusSendException(ecIllegalDataValue); //too many bits requested within single request
    16ea:	83 e0       	ldi	r24, 0x03	; 3
    16ec:	0e 94 45 0a 	call	0x148a	; 0x148a <modbusSendException>
    16f0:	35 c0       	rjmp	.+106    	; 0x175c <modbusExchangeBits+0x14c>
		}
		else if (rxbuffer[1]==fcForceMultipleCoils)
		{
			if (((rxbuffer[6]*8)>=requestedAmount) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
    16f2:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <DataPos>
    16f6:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <DataPos+0x1>
    16fa:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rxbuffer+0x6>
    16fe:	29 50       	subi	r18, 0x09	; 9
    1700:	31 09       	sbc	r19, r1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	28 17       	cp	r18, r24
    1706:	39 07       	cpc	r19, r25
    1708:	80 f3       	brcs	.-32     	; 0x16ea <modbusExchangeBits+0xda>
    170a:	e1 2c       	mov	r14, r1
    170c:	f1 2c       	mov	r15, r1
			{
				for (uint16_t c = 0; c<requestedAmount; c++)
				{
					listBitCopy(rxbuffer+7,c,ptrToInArray,requestedAdr-startAddress+c);
    170e:	cf 01       	movw	r24, r30
    1710:	80 1b       	sub	r24, r16
    1712:	91 0b       	sbc	r25, r17
    1714:	8c 01       	movw	r16, r24
		}
		else if (rxbuffer[1]==fcForceMultipleCoils)
		{
			if (((rxbuffer[6]*8)>=requestedAmount) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
			{
				for (uint16_t c = 0; c<requestedAmount; c++)
    1716:	ec 16       	cp	r14, r28
    1718:	fd 06       	cpc	r15, r29
    171a:	d9 f0       	breq	.+54     	; 0x1752 <modbusExchangeBits+0x142>
    171c:	98 01       	movw	r18, r16
    171e:	2e 0d       	add	r18, r14
    1720:	3f 1d       	adc	r19, r15
				{
					listBitCopy(rxbuffer+7,c,ptrToInArray,requestedAdr-startAddress+c);
    1722:	a6 01       	movw	r20, r12
    1724:	b7 01       	movw	r22, r14
    1726:	8e e0       	ldi	r24, 0x0E	; 14
    1728:	92 e0       	ldi	r25, 0x02	; 2
    172a:	0e 94 bb 08 	call	0x1176	; 0x1176 <listBitCopy>
		}
		else if (rxbuffer[1]==fcForceMultipleCoils)
		{
			if (((rxbuffer[6]*8)>=requestedAmount) && ((DataPos-9)>=rxbuffer[6])) //enough data received?
			{
				for (uint16_t c = 0; c<requestedAmount; c++)
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	e8 1a       	sub	r14, r24
    1732:	f8 0a       	sbc	r15, r24
    1734:	f0 cf       	rjmp	.-32     	; 0x1716 <modbusExchangeBits+0x106>
				}
				modbusSendMessage(5);
				return 1;
			} else modbusSendException(ecIllegalDataValue);//exception too few data bytes received
		}
		else if (rxbuffer[1]==fcForceSingleCoil) {
    1736:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <rxbuffer+0x1>
    173a:	85 30       	cpi	r24, 0x05	; 5
    173c:	79 f4       	brne	.+30     	; 0x175c <modbusExchangeBits+0x14c>
			listBitCopy(rxbuffer+4,0,ptrToInArray,requestedAdr-startAddress);
    173e:	9f 01       	movw	r18, r30
    1740:	20 1b       	sub	r18, r16
    1742:	31 0b       	sbc	r19, r17
    1744:	a6 01       	movw	r20, r12
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	8b e0       	ldi	r24, 0x0B	; 11
    174c:	92 e0       	ldi	r25, 0x02	; 2
    174e:	0e 94 bb 08 	call	0x1176	; 0x1176 <listBitCopy>
			modbusSendMessage(5); 
    1752:	85 e0       	ldi	r24, 0x05	; 5
    1754:	0e 94 26 0a 	call	0x144c	; 0x144c <modbusSendMessage>
			return 1;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	01 c0       	rjmp	.+2      	; 0x175e <modbusExchangeBits+0x14e>
		}
		//modbusSendException(ecSlaveDeviceFailure); //inanpropriate call of modbusExchangeBits
		return 0;
    175c:	80 e0       	ldi	r24, 0x00	; 0
	} else
	{
		modbusSendException(ecIllegalDataValue);
		return 0;
	}
}
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	08 95       	ret

00001770 <main>:
	}
}
/////////////////////////////////////////////////////////////////////

int main(void)
{
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	2b 97       	sbiw	r28, 0x0b	; 11
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
	int interval;	// interval*10ms,for example 1000*10ms = 10sec	   

	//DDRB |=(1<<PB3); //LED blink
	//PORTB|=(1<<PB3);
	// Port C initialization DS18b20 //
	DDRC &= ~(1 << PC0);   
    1784:	38 98       	cbi	0x07, 0	; 7
    PORTC &= ~(1 << PC0);   
    1786:	40 98       	cbi	0x08, 0	; 8
	DDRC &= ~(1 << PC1);   
    1788:	39 98       	cbi	0x07, 1	; 7
    PORTC &= ~(1 << PC1);   
    178a:	41 98       	cbi	0x08, 1	; 8
	DDRC &= ~(1 << PC2);   
    178c:	3a 98       	cbi	0x07, 2	; 7
    PORTC &= ~(1 << PC2);   
    178e:	42 98       	cbi	0x08, 2	; 8
	DDRC &= ~(1 << PC3);   
    1790:	3b 98       	cbi	0x07, 3	; 7
    PORTC &= ~(1 << PC3);
    1792:	43 98       	cbi	0x08, 3	; 8
	DDRD &= ~(1 << PD3);   
    1794:	53 98       	cbi	0x0a, 3	; 10
    PORTD &= ~(1 << PD3);   
    1796:	5b 98       	cbi	0x0b, 3	; 11
	DDRD &= ~(1 << PD4);   
    1798:	54 98       	cbi	0x0a, 4	; 10
    PORTD &= ~(1 << PD4);   
    179a:	5c 98       	cbi	0x0b, 4	; 11
	//modbus------------------------------------------------------
	io_conf();	
    179c:	0e 94 22 01 	call	0x244	; 0x244 <io_conf>
	modbusSetAddress(clientAddress); // setting client address
    17a0:	8a e0       	ldi	r24, 0x0A	; 10
    17a2:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <modbusSetAddress>
	modbusInit();
    17a6:	0e 94 11 0a 	call	0x1422	; 0x1422 <modbusInit>
	//wdt_enable(7);
	timer0100us_start();
    17aa:	0e 94 0a 01 	call	0x214	; 0x214 <timer0100us_start>
	//---------------------------------------------------------
	//deny interrupt
	cli(); 
    17ae:	f8 94       	cli
	//Watchdog initialization.
	//wdt_reset();
	//wdt_enable(WDTO_8S); // for 5V supply,  At lower supply voltages, the times will increase 
	

	thermostat1_eeprom = eeprom_read_word((uint16_t*)adr_thermostat1);   
    17b0:	82 e0       	ldi	r24, 0x02	; 2
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 60 18 	call	0x30c0	; 0x30c0 <eeprom_read_word>
    17b8:	4c 01       	movw	r8, r24
    17ba:	d8 2e       	mov	r13, r24
    17bc:	c9 2c       	mov	r12, r9

	thermostat2_eeprom = eeprom_read_word((uint16_t*)adr_thermostat2);   
    17be:	84 e0       	ldi	r24, 0x04	; 4
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 60 18 	call	0x30c0	; 0x30c0 <eeprom_read_word>
    17c6:	8c 01       	movw	r16, r24

	delay_read_eeprom = eeprom_read_word((uint16_t*)adr_delay_read);
    17c8:	86 e0       	ldi	r24, 0x06	; 6
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 60 18 	call	0x30c0	; 0x30c0 <eeprom_read_word>
    17d0:	7c 01       	movw	r14, r24
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
	

	if((thermostat1_eeprom>0)&&(thermostat1_eeprom<90))
    17d6:	c4 01       	movw	r24, r8
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	89 35       	cpi	r24, 0x59	; 89
    17dc:	91 05       	cpc	r25, r1
    17de:	30 f4       	brcc	.+12     	; 0x17ec <main+0x7c>
		{
		holdingRegisters[8] = thermostat1 = thermostat1_eeprom;
    17e0:	90 92 11 01 	sts	0x0111, r9	; 0x800111 <__data_start+0x11>
    17e4:	80 92 10 01 	sts	0x0110, r8	; 0x800110 <__data_start+0x10>
	//Watchdog initialization.
	//wdt_reset();
	//wdt_enable(WDTO_8S); // for 5V supply,  At lower supply voltages, the times will increase 
	

	thermostat1_eeprom = eeprom_read_word((uint16_t*)adr_thermostat1);   
    17e8:	14 01       	movw	r2, r8
    17ea:	0b c0       	rjmp	.+22     	; 0x1802 <main+0x92>
		{
		holdingRegisters[8] = thermostat1 = thermostat1_eeprom;
		}
		else 
		{ 	thermostat1_eeprom=24;
			eeprom_write_word((uint16_t*)adr_thermostat1,thermostat1_eeprom); // works
    17ec:	68 e1       	ldi	r22, 0x18	; 24
    17ee:	70 e0       	ldi	r23, 0x00	; 0
    17f0:	82 e0       	ldi	r24, 0x02	; 2
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0e 94 66 18 	call	0x30cc	; 0x30cc <eeprom_write_word>
    17f8:	d1 2c       	mov	r13, r1
    17fa:	c1 2c       	mov	r12, r1
	if((thermostat1_eeprom>0)&&(thermostat1_eeprom<90))
		{
		holdingRegisters[8] = thermostat1 = thermostat1_eeprom;
		}
		else 
		{ 	thermostat1_eeprom=24;
    17fc:	48 e1       	ldi	r20, 0x18	; 24
    17fe:	24 2e       	mov	r2, r20
    1800:	31 2c       	mov	r3, r1
			eeprom_write_word((uint16_t*)adr_thermostat1,thermostat1_eeprom); // works
		}

	if((thermostat2_eeprom>0)&&(thermostat2_eeprom<90))
    1802:	c8 01       	movw	r24, r16
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	89 35       	cpi	r24, 0x59	; 89
    1808:	91 05       	cpc	r25, r1
    180a:	38 f4       	brcc	.+14     	; 0x181a <main+0xaa>
		{
		holdingRegisters[9] = thermostat2 = thermostat2_eeprom;
    180c:	10 93 13 01 	sts	0x0113, r17	; 0x800113 <__data_start+0x13>
    1810:	00 93 12 01 	sts	0x0112, r16	; 0x800112 <__data_start+0x12>
    1814:	b0 2e       	mov	r11, r16
    1816:	a1 2e       	mov	r10, r17
    1818:	06 c0       	rjmp	.+12     	; 0x1826 <main+0xb6>
		}
		else 
		{thermostat2_eeprom=28;
		eeprom_write_word((uint16_t*)adr_thermostat2,thermostat2_eeprom); // works
    181a:	6c e1       	ldi	r22, 0x1C	; 28
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	84 e0       	ldi	r24, 0x04	; 4
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	0e 94 66 18 	call	0x30cc	; 0x30cc <eeprom_write_word>
		}

	if((delay_read_eeprom>0)&&(delay_read_eeprom<100))
    1826:	c7 01       	movw	r24, r14
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	83 36       	cpi	r24, 0x63	; 99
    182c:	91 05       	cpc	r25, r1
    182e:	28 f4       	brcc	.+10     	; 0x183a <main+0xca>
		{
		holdingRegisters[10] = delay_read = delay_read_eeprom;
    1830:	f0 92 15 01 	sts	0x0115, r15	; 0x800115 <__data_start+0x15>
    1834:	e0 92 14 01 	sts	0x0114, r14	; 0x800114 <__data_start+0x14>
    1838:	0a c0       	rjmp	.+20     	; 0x184e <main+0xde>
		}
		else 
		{delay_read_eeprom=10;
		eeprom_write_word((uint16_t*)adr_delay_read,delay_read_eeprom);
    183a:	6a e0       	ldi	r22, 0x0A	; 10
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	86 e0       	ldi	r24, 0x06	; 6
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	0e 94 66 18 	call	0x30cc	; 0x30cc <eeprom_write_word>
	if((delay_read_eeprom>0)&&(delay_read_eeprom<100))
		{
		holdingRegisters[10] = delay_read = delay_read_eeprom;
		}
		else 
		{delay_read_eeprom=10;
    1846:	8a e0       	ldi	r24, 0x0A	; 10
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
		eeprom_write_word((uint16_t*)adr_delay_read,delay_read_eeprom);
		}

	 lcd_init( LCD_DISP_ON);
    184e:	8c e0       	ldi	r24, 0x0C	; 12
    1850:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_init>
	 lcd_clrscr();
    1854:	0e 94 06 02 	call	0x40c	; 0x40c <lcd_clrscr>
	 //_delay_ms(80);
	
	 lcd_gotoxy( 0, 0);
    1858:	60 e0       	ldi	r22, 0x00	; 0
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	 lcd_puts_P( " modbus temp 0.2\n");
    1860:	8c ea       	ldi	r24, 0xAC	; 172
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	 //lcd_gotoxy( 1, 1);
	sprintf( CharBuffer, "%i,8N1\n",BAUD);
    1868:	1f 92       	push	r1
    186a:	1f 92       	push	r1
    186c:	85 e2       	ldi	r24, 0x25	; 37
    186e:	8f 93       	push	r24
    1870:	80 e8       	ldi	r24, 0x80	; 128
    1872:	8f 93       	push	r24
    1874:	8f e1       	ldi	r24, 0x1F	; 31
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	9f 93       	push	r25
    187a:	8f 93       	push	r24
    187c:	0c ee       	ldi	r16, 0xEC	; 236
    187e:	11 e0       	ldi	r17, 0x01	; 1
    1880:	1f 93       	push	r17
    1882:	0f 93       	push	r16
    1884:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <sprintf>
	lcd_puts(CharBuffer);
    1888:	c8 01       	movw	r24, r16
    188a:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
	sprintf( CharBuffer, "modbus adr:%X\n",clientAddress);
    188e:	1f 92       	push	r1
    1890:	8a e0       	ldi	r24, 0x0A	; 10
    1892:	8f 93       	push	r24
    1894:	87 e2       	ldi	r24, 0x27	; 39
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	9f 93       	push	r25
    189a:	8f 93       	push	r24
    189c:	1f 93       	push	r17
    189e:	0f 93       	push	r16
    18a0:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <sprintf>
	lcd_puts(CharBuffer);
    18a4:	c8 01       	movw	r24, r16
    18a6:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
	sprintf( CharBuffer, "t1:%+i;t2:%+i",thermostat1,thermostat2);
    18aa:	af 92       	push	r10
    18ac:	bf 92       	push	r11
    18ae:	cf 92       	push	r12
    18b0:	df 92       	push	r13
    18b2:	86 e3       	ldi	r24, 0x36	; 54
    18b4:	91 e0       	ldi	r25, 0x01	; 1
    18b6:	9f 93       	push	r25
    18b8:	8f 93       	push	r24
    18ba:	1f 93       	push	r17
    18bc:	0f 93       	push	r16
    18be:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <sprintf>
	lcd_puts(CharBuffer);
    18c2:	c8 01       	movw	r24, r16
    18c4:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18c8:	9f ef       	ldi	r25, 0xFF	; 255
    18ca:	a7 ea       	ldi	r26, 0xA7	; 167
    18cc:	b1 e6       	ldi	r27, 0x61	; 97
    18ce:	91 50       	subi	r25, 0x01	; 1
    18d0:	a0 40       	sbci	r26, 0x00	; 0
    18d2:	b0 40       	sbci	r27, 0x00	; 0
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <main+0x15e>
    18d6:	00 c0       	rjmp	.+0      	; 0x18d8 <main+0x168>
    18d8:	00 00       	nop
	 _delay_ms(2000);
	 //-------------------------------------
	 lcd_clrscr();
    18da:	0e 94 06 02 	call	0x40c	; 0x40c <lcd_clrscr>
	 lcd_gotoxy( 2, 1);		//column , row
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	 lcd_puts_P( "kontrola snimacov");
    18e6:	8a e9       	ldi	r24, 0x9A	; 154
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	 lcd_gotoxy( 3, 2);		//column , row
    18ee:	62 e0       	ldi	r22, 0x02	; 2
    18f0:	83 e0       	ldi	r24, 0x03	; 3
    18f2:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	 lcd_puts_P( "DS18b20"); // msg0
    18f6:	82 e9       	ldi	r24, 0x92	; 146
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
    18fe:	ef ef       	ldi	r30, 0xFF	; 255
    1900:	f3 ed       	ldi	r31, 0xD3	; 211
    1902:	20 e3       	ldi	r18, 0x30	; 48
    1904:	e1 50       	subi	r30, 0x01	; 1
    1906:	f0 40       	sbci	r31, 0x00	; 0
    1908:	20 40       	sbci	r18, 0x00	; 0
    190a:	e1 f7       	brne	.-8      	; 0x1904 <main+0x194>
    190c:	00 c0       	rjmp	.+0      	; 0x190e <main+0x19e>
    190e:	00 00       	nop
	 _delay_ms(1000);
	 lcd_clrscr();
    1910:	0e 94 06 02 	call	0x40c	; 0x40c <lcd_clrscr>
	//---------------------------------
	lcd_gotoxy( 0, 0); // stlpec-riadok
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S1:");
    191c:	8e e8       	ldi	r24, 0x8E	; 142
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	Device1Presence = ds18b20_reset(&PORTC,PC0);
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	88 e2       	ldi	r24, 0x28	; 40
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_reset>
    192e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <Device1Presence>
	lcd_gotoxy( 4, 0);
    1932:	60 e0       	ldi	r22, 0x00	; 0
    1934:	84 e0       	ldi	r24, 0x04	; 4
    1936:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	if(Device1Presence)
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Device1Presence>
    1948:	88 23       	and	r24, r24
    194a:	31 f0       	breq	.+12     	; 0x1958 <main+0x1e8>
			lcd_puts_P( "OK");
    194c:	8b e8       	ldi	r24, 0x8B	; 139
    194e:	91 e0       	ldi	r25, 0x01	; 1
    1950:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    1954:	1b 82       	std	Y+3, r1	; 0x03
    1956:	0a c0       	rjmp	.+20     	; 0x196c <main+0x1fc>
	lcd_puts_P( "S1:");
	Device1Presence = ds18b20_reset(&PORTC,PC0);
	lcd_gotoxy( 4, 0);
	if(Device1Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 0);lcd_puts_P( "----");chyba1=1;}
    1958:	60 e0       	ldi	r22, 0x00	; 0
    195a:	84 e0       	ldi	r24, 0x04	; 4
    195c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
    1960:	86 e8       	ldi	r24, 0x86	; 134
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
    1968:	91 e0       	ldi	r25, 0x01	; 1
    196a:	9b 83       	std	Y+3, r25	; 0x03
	//_delay_ms(100);
	//---------------------------------
	Device2Presence = ds18b20_reset(&PORTC,PC1);
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	88 e2       	ldi	r24, 0x28	; 40
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_reset>
    1976:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <Device2Presence>
	lcd_gotoxy( 0, 1);
    197a:	61 e0       	ldi	r22, 0x01	; 1
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S2:");
    1982:	82 e8       	ldi	r24, 0x82	; 130
    1984:	91 e0       	ldi	r25, 0x01	; 1
    1986:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 4, 1);
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	84 e0       	ldi	r24, 0x04	; 4
    198e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	if(Device2Presence)
    1992:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Device2Presence>
    1996:	88 23       	and	r24, r24
    1998:	31 f0       	breq	.+12     	; 0x19a6 <main+0x236>
			lcd_puts_P( "OK");
    199a:	8f e7       	ldi	r24, 0x7F	; 127
    199c:	91 e0       	ldi	r25, 0x01	; 1
    199e:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    19a2:	1c 82       	std	Y+4, r1	; 0x04
    19a4:	0a c0       	rjmp	.+20     	; 0x19ba <main+0x24a>
	lcd_gotoxy( 0, 1);
	lcd_puts_P( "S2:");
	lcd_gotoxy( 4, 1);
	if(Device2Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 1);lcd_puts_P( "----");chyba2=1;}
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	84 e0       	ldi	r24, 0x04	; 4
    19aa:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
    19ae:	8a e7       	ldi	r24, 0x7A	; 122
    19b0:	91 e0       	ldi	r25, 0x01	; 1
    19b2:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
    19b6:	a1 e0       	ldi	r26, 0x01	; 1
    19b8:	ac 83       	std	Y+4, r26	; 0x04
	//_delay_ms(100);
	//---------------------------------
	Device3Presence = ds18b20_reset(&PORTC,PC2);
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	88 e2       	ldi	r24, 0x28	; 40
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_reset>
    19c4:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Device3Presence>
	lcd_gotoxy( 0, 2);
    19c8:	62 e0       	ldi	r22, 0x02	; 2
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S3:");
    19d0:	86 e7       	ldi	r24, 0x76	; 118
    19d2:	91 e0       	ldi	r25, 0x01	; 1
    19d4:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 4, 2);
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	84 e0       	ldi	r24, 0x04	; 4
    19dc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	if(Device3Presence)
    19e0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <Device3Presence>
    19e4:	88 23       	and	r24, r24
    19e6:	31 f0       	breq	.+12     	; 0x19f4 <main+0x284>
			lcd_puts_P( "OK");
    19e8:	83 e7       	ldi	r24, 0x73	; 115
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    19f0:	00 e0       	ldi	r16, 0x00	; 0
    19f2:	09 c0       	rjmp	.+18     	; 0x1a06 <main+0x296>
	lcd_gotoxy( 0, 2);
	lcd_puts_P( "S3:");
	lcd_gotoxy( 4, 2);
	if(Device3Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 1);lcd_puts_P( "----");chyba3=1;}
    19f4:	61 e0       	ldi	r22, 0x01	; 1
    19f6:	84 e0       	ldi	r24, 0x04	; 4
    19f8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
    19fc:	8e e6       	ldi	r24, 0x6E	; 110
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
    1a04:	01 e0       	ldi	r16, 0x01	; 1
	//_delay_ms(100);
	//---------------------------------
	Device4Presence = ds18b20_reset(&PORTC,PC3);
    1a06:	63 e0       	ldi	r22, 0x03	; 3
    1a08:	88 e2       	ldi	r24, 0x28	; 40
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_reset>
    1a10:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Device4Presence>
	lcd_gotoxy( 0, 3);
    1a14:	63 e0       	ldi	r22, 0x03	; 3
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S4:");
    1a1c:	8a e6       	ldi	r24, 0x6A	; 106
    1a1e:	91 e0       	ldi	r25, 0x01	; 1
    1a20:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 4, 3);
    1a24:	63 e0       	ldi	r22, 0x03	; 3
    1a26:	84 e0       	ldi	r24, 0x04	; 4
    1a28:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>

	if(Device4Presence)
    1a2c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Device4Presence>
    1a30:	88 23       	and	r24, r24
    1a32:	31 f0       	breq	.+12     	; 0x1a40 <main+0x2d0>
			lcd_puts_P( "OK");
    1a34:	87 e6       	ldi	r24, 0x67	; 103
    1a36:	91 e0       	ldi	r25, 0x01	; 1
    1a38:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    1a3c:	1d 82       	std	Y+5, r1	; 0x05
    1a3e:	0a c0       	rjmp	.+20     	; 0x1a54 <main+0x2e4>
	lcd_puts_P( "S4:");
	lcd_gotoxy( 4, 3);

	if(Device4Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 4, 3);lcd_puts_P( "----");chyba4=1;}
    1a40:	63 e0       	ldi	r22, 0x03	; 3
    1a42:	84 e0       	ldi	r24, 0x04	; 4
    1a44:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
    1a48:	82 e6       	ldi	r24, 0x62	; 98
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
    1a50:	b1 e0       	ldi	r27, 0x01	; 1
    1a52:	bd 83       	std	Y+5, r27	; 0x05
	//---------------------------------
	Device5Presence = ds18b20_reset(&PORTD,PD3);
    1a54:	63 e0       	ldi	r22, 0x03	; 3
    1a56:	8b e2       	ldi	r24, 0x2B	; 43
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_reset>
    1a5e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Device5Presence>
	lcd_gotoxy( 9, 2);
    1a62:	62 e0       	ldi	r22, 0x02	; 2
    1a64:	89 e0       	ldi	r24, 0x09	; 9
    1a66:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S5:");
    1a6a:	8e e5       	ldi	r24, 0x5E	; 94
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 11, 2);
    1a72:	62 e0       	ldi	r22, 0x02	; 2
    1a74:	8b e0       	ldi	r24, 0x0B	; 11
    1a76:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>

	if(Device5Presence)
    1a7a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Device5Presence>
    1a7e:	88 23       	and	r24, r24
    1a80:	31 f0       	breq	.+12     	; 0x1a8e <main+0x31e>
			lcd_puts_P( "OK");
    1a82:	8b e5       	ldi	r24, 0x5B	; 91
    1a84:	91 e0       	ldi	r25, 0x01	; 1
    1a86:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    1a8a:	1e 82       	std	Y+6, r1	; 0x06
    1a8c:	0a c0       	rjmp	.+20     	; 0x1aa2 <main+0x332>
	lcd_puts_P( "S5:");
	lcd_gotoxy( 11, 2);

	if(Device5Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 9, 2);lcd_puts_P( "----");chyba5=1;}
    1a8e:	62 e0       	ldi	r22, 0x02	; 2
    1a90:	89 e0       	ldi	r24, 0x09	; 9
    1a92:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
    1a96:	86 e5       	ldi	r24, 0x56	; 86
    1a98:	91 e0       	ldi	r25, 0x01	; 1
    1a9a:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
    1a9e:	e1 e0       	ldi	r30, 0x01	; 1
    1aa0:	ee 83       	std	Y+6, r30	; 0x06
	//---------------------------------
	Device6Presence = ds18b20_reset(&PORTD,PD4);
    1aa2:	64 e0       	ldi	r22, 0x04	; 4
    1aa4:	8b e2       	ldi	r24, 0x2B	; 43
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 91 02 	call	0x522	; 0x522 <ds18b20_reset>
    1aac:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Device6Presence>
	lcd_gotoxy( 9, 3);
    1ab0:	63 e0       	ldi	r22, 0x03	; 3
    1ab2:	89 e0       	ldi	r24, 0x09	; 9
    1ab4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S6:");
    1ab8:	82 e5       	ldi	r24, 0x52	; 82
    1aba:	91 e0       	ldi	r25, 0x01	; 1
    1abc:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 11, 3);
    1ac0:	63 e0       	ldi	r22, 0x03	; 3
    1ac2:	8b e0       	ldi	r24, 0x0B	; 11
    1ac4:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>

	if(Device6Presence)
    1ac8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <Device6Presence>
    1acc:	88 23       	and	r24, r24
    1ace:	31 f0       	breq	.+12     	; 0x1adc <main+0x36c>
			lcd_puts_P( "OK");
    1ad0:	8f e4       	ldi	r24, 0x4F	; 79
    1ad2:	91 e0       	ldi	r25, 0x01	; 1
    1ad4:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
	unsigned char i,chyba1=0,chyba2=0,chyba3=0,chyba4=0,chyba5=0,chyba6=0;
    1ad8:	1f 82       	std	Y+7, r1	; 0x07
    1ada:	0a c0       	rjmp	.+20     	; 0x1af0 <main+0x380>
	lcd_puts_P( "S6:");
	lcd_gotoxy( 11, 3);

	if(Device6Presence)
			lcd_puts_P( "OK");
		else {  lcd_gotoxy( 9, 3);lcd_puts_P( "----");chyba6=1;}
    1adc:	63 e0       	ldi	r22, 0x03	; 3
    1ade:	89 e0       	ldi	r24, 0x09	; 9
    1ae0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
    1ae4:	8a e4       	ldi	r24, 0x4A	; 74
    1ae6:	91 e0       	ldi	r25, 0x01	; 1
    1ae8:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
    1aec:	f1 e0       	ldi	r31, 0x01	; 1
    1aee:	ff 83       	std	Y+7, r31	; 0x07
    1af0:	2f ef       	ldi	r18, 0xFF	; 255
    1af2:	83 ed       	ldi	r24, 0xD3	; 211
    1af4:	90 e3       	ldi	r25, 0x30	; 48
    1af6:	21 50       	subi	r18, 0x01	; 1
    1af8:	80 40       	sbci	r24, 0x00	; 0
    1afa:	90 40       	sbci	r25, 0x00	; 0
    1afc:	e1 f7       	brne	.-8      	; 0x1af6 <main+0x386>
    1afe:	00 c0       	rjmp	.+0      	; 0x1b00 <main+0x390>
    1b00:	00 00       	nop

	_delay_ms(1000);

// ----------print ROM code----------------

	lcd_gotoxy( 0, 0);
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "K1:");
    1b0a:	86 e4       	ldi	r24, 0x46	; 70
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 3, 0);
    1b12:	60 e0       	ldi	r22, 0x00	; 0
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>

	if(chyba1==0)
    1b1a:	ab 81       	ldd	r26, Y+3	; 0x03
    1b1c:	a1 11       	cpse	r26, r1
    1b1e:	06 c0       	rjmp	.+12     	; 0x1b2c <main+0x3bc>
		{	read_ROM_CODE(&PORTC,PC0); 
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	88 e2       	ldi	r24, 0x28	; 40
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 58 03 	call	0x6b0	; 0x6b0 <read_ROM_CODE>
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <main+0x3c4>
			
		}
		else {
			lcd_puts_P( "----");
    1b2c:	81 e4       	ldi	r24, 0x41	; 65
    1b2e:	91 e0       	ldi	r25, 0x01	; 1
    1b30:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
			}
	lcd_gotoxy( 0, 1);
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "K2:");
    1b3c:	8d e3       	ldi	r24, 0x3D	; 61
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 3, 1);
    1b44:	61 e0       	ldi	r22, 0x01	; 1
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>

	if(chyba2==0)
    1b4c:	bc 81       	ldd	r27, Y+4	; 0x04
    1b4e:	b1 11       	cpse	r27, r1
    1b50:	06 c0       	rjmp	.+12     	; 0x1b5e <main+0x3ee>
		{	read_ROM_CODE(&PORTC,PC1); 
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	88 e2       	ldi	r24, 0x28	; 40
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 58 03 	call	0x6b0	; 0x6b0 <read_ROM_CODE>
    1b5c:	04 c0       	rjmp	.+8      	; 0x1b66 <main+0x3f6>
			
		}
		else {
			lcd_puts_P( "----");
    1b5e:	88 e3       	ldi	r24, 0x38	; 56
    1b60:	91 e0       	ldi	r25, 0x01	; 1
    1b62:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
			}
	
	lcd_gotoxy( 0, 2);
    1b66:	62 e0       	ldi	r22, 0x02	; 2
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "K3:");
    1b6e:	84 e3       	ldi	r24, 0x34	; 52
    1b70:	91 e0       	ldi	r25, 0x01	; 1
    1b72:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 3, 2);
    1b76:	62 e0       	ldi	r22, 0x02	; 2
    1b78:	83 e0       	ldi	r24, 0x03	; 3
    1b7a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	
	if(chyba3==0)
    1b7e:	01 11       	cpse	r16, r1
    1b80:	06 c0       	rjmp	.+12     	; 0x1b8e <main+0x41e>
		{
			read_ROM_CODE(&PORTC,PC2);
    1b82:	62 e0       	ldi	r22, 0x02	; 2
    1b84:	88 e2       	ldi	r24, 0x28	; 40
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 58 03 	call	0x6b0	; 0x6b0 <read_ROM_CODE>
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <main+0x426>
		}
		else {
			lcd_puts_P( "----");
    1b8e:	8f e2       	ldi	r24, 0x2F	; 47
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
			}
	lcd_gotoxy( 0, 3);
    1b96:	63 e0       	ldi	r22, 0x03	; 3
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "K4:");
    1b9e:	8b e2       	ldi	r24, 0x2B	; 43
    1ba0:	91 e0       	ldi	r25, 0x01	; 1
    1ba2:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 3, 3);
    1ba6:	63 e0       	ldi	r22, 0x03	; 3
    1ba8:	83 e0       	ldi	r24, 0x03	; 3
    1baa:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	
	if(chyba4==0)
    1bae:	ed 81       	ldd	r30, Y+5	; 0x05
    1bb0:	e1 11       	cpse	r30, r1
    1bb2:	06 c0       	rjmp	.+12     	; 0x1bc0 <main+0x450>
		{
			read_ROM_CODE(&PORTC,PC3);
    1bb4:	63 e0       	ldi	r22, 0x03	; 3
    1bb6:	88 e2       	ldi	r24, 0x28	; 40
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	0e 94 58 03 	call	0x6b0	; 0x6b0 <read_ROM_CODE>
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <main+0x458>
		}
		else {
			lcd_puts_P( "----");
    1bc0:	86 e2       	ldi	r24, 0x26	; 38
    1bc2:	91 e0       	ldi	r25, 0x01	; 1
    1bc4:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>

		/*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
    1bc8:	80 e4       	ldi	r24, 0x40	; 64
    1bca:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <lcd_command>
    1bce:	3e eb       	ldi	r19, 0xBE	; 190
    1bd0:	e3 2e       	mov	r14, r19
    1bd2:	31 e0       	ldi	r19, 0x01	; 1
    1bd4:	f3 2e       	mov	r15, r19
    1bd6:	18 e1       	ldi	r17, 0x18	; 24
    1bd8:	1e 0d       	add	r17, r14
       for(i=0; i<24; i++)
       {
          lcd_data(pgm_read_byte_near(&userChar[i]));
    1bda:	f7 01       	movw	r30, r14
    1bdc:	84 91       	lpm	r24, Z
    1bde:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <lcd_data>
    1be2:	ff ef       	ldi	r31, 0xFF	; 255
    1be4:	ef 1a       	sub	r14, r31
    1be6:	ff 0a       	sbc	r15, r31
		/*
        * load two userdefined characters from program memory
        * into LCD controller CG RAM location 0 and 1
        */
       lcd_command(_BV(LCD_CGRAM));  /* set CG RAM start address 0 */
       for(i=0; i<24; i++)
    1be8:	1e 11       	cpse	r17, r14
    1bea:	f7 cf       	rjmp	.-18     	; 0x1bda <main+0x46a>
       {
          lcd_data(pgm_read_byte_near(&userChar[i]));
       }

// set up bmp085board
	bmp085_init();
    1bec:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <bmp085_init>
    1bf0:	2f ef       	ldi	r18, 0xFF	; 255
    1bf2:	89 e6       	ldi	r24, 0x69	; 105
    1bf4:	98 e1       	ldi	r25, 0x18	; 24
    1bf6:	21 50       	subi	r18, 0x01	; 1
    1bf8:	80 40       	sbci	r24, 0x00	; 0
    1bfa:	90 40       	sbci	r25, 0x00	; 0
    1bfc:	e1 f7       	brne	.-8      	; 0x1bf6 <main+0x486>
    1bfe:	00 c0       	rjmp	.+0      	; 0x1c00 <main+0x490>
    1c00:	00 00       	nop

	_delay_ms(500);
	lcd_clrscr();
    1c02:	0e 94 06 02 	call	0x40c	; 0x40c <lcd_clrscr>

	lcd_gotoxy( 0, 0);
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S1:");
    1c0e:	82 e2       	ldi	r24, 0x22	; 34
    1c10:	91 e0       	ldi	r25, 0x01	; 1
    1c12:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 0, 1);
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S2:");
    1c1e:	8e e1       	ldi	r24, 0x1E	; 30
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 0, 2);
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S3:");
    1c2e:	8a e1       	ldi	r24, 0x1A	; 26
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 0, 3);
    1c36:	63 e0       	ldi	r22, 0x03	; 3
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S4:");
    1c3e:	86 e1       	ldi	r24, 0x16	; 22
    1c40:	91 e0       	ldi	r25, 0x01	; 1
    1c42:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 11, 2);
    1c46:	62 e0       	ldi	r22, 0x02	; 2
    1c48:	8b e0       	ldi	r24, 0x0B	; 11
    1c4a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S5:");
    1c4e:	82 e1       	ldi	r24, 0x12	; 18
    1c50:	91 e0       	ldi	r25, 0x01	; 1
    1c52:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
	lcd_gotoxy( 11, 3);
    1c56:	63 e0       	ldi	r22, 0x03	; 3
    1c58:	8b e0       	ldi	r24, 0x0B	; 11
    1c5a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
	lcd_puts_P( "S6:");
    1c5e:	8e e0       	ldi	r24, 0x0E	; 14
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
}
/////////////////////////////////////////////////////////////////////

int main(void)
{
	int desatiny,cele,j,press=20;
    1c66:	94 e1       	ldi	r25, 0x14	; 20
    1c68:	49 2e       	mov	r4, r25
    1c6a:	51 2c       	mov	r5, r1
		sei();
	//----------------------------------------------------	
		if(chyba1==0)
		{
		CurrentTemp1 = ds18b20_gettemp(&PORTC,PC0); // decicelsius
		cele = CurrentTemp1/10;
    1c6c:	2a e0       	ldi	r18, 0x0A	; 10
    1c6e:	62 2e       	mov	r6, r18
    1c70:	71 2c       	mov	r7, r1
		desatiny = ( abs(CurrentTemp1) - abs((cele*10)) );
    1c72:	1a e0       	ldi	r17, 0x0A	; 10

//------------main loop-------------------------------------
	while(1)
 	{

		wdt_reset(); 
    1c74:	a8 95       	wdr
		sei();
    1c76:	78 94       	sei
	//----------------------------------------------------	
		if(chyba1==0)
    1c78:	ab 81       	ldd	r26, Y+3	; 0x03
    1c7a:	a1 11       	cpse	r26, r1
    1c7c:	3d c0       	rjmp	.+122    	; 0x1cf8 <main+0x588>
		{
		CurrentTemp1 = ds18b20_gettemp(&PORTC,PC0); // decicelsius
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	88 e2       	ldi	r24, 0x28	; 40
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 a1 03 	call	0x742	; 0x742 <ds18b20_gettemp>
    1c88:	38 2f       	mov	r19, r24
    1c8a:	29 2f       	mov	r18, r25
    1c8c:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <CurrentTemp1>
    1c90:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <CurrentTemp1+0x1>
		cele = CurrentTemp1/10;
    1c94:	b3 01       	movw	r22, r6
    1c96:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__divmodhi4>
    1c9a:	6b 01       	movw	r12, r22
		desatiny = ( abs(CurrentTemp1) - abs((cele*10)) );
    1c9c:	e3 2e       	mov	r14, r19
    1c9e:	f2 2e       	mov	r15, r18
    1ca0:	f7 fe       	sbrs	r15, 7
    1ca2:	03 c0       	rjmp	.+6      	; 0x1caa <main+0x53a>
    1ca4:	f1 94       	neg	r15
    1ca6:	e1 94       	neg	r14
    1ca8:	f1 08       	sbc	r15, r1
    1caa:	1c 9d       	mul	r17, r12
    1cac:	c0 01       	movw	r24, r0
    1cae:	1d 9d       	mul	r17, r13
    1cb0:	90 0d       	add	r25, r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	97 ff       	sbrs	r25, 7
    1cb6:	03 c0       	rjmp	.+6      	; 0x1cbe <main+0x54e>
    1cb8:	91 95       	neg	r25
    1cba:	81 95       	neg	r24
    1cbc:	91 09       	sbc	r25, r1
    1cbe:	e8 1a       	sub	r14, r24
    1cc0:	f9 0a       	sbc	r15, r25
		lcd_gotoxy( 3, 0);
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		sprintf( CharBuffer, "%+i.%i\n",cele,desatiny);
    1cca:	ff 92       	push	r15
    1ccc:	ef 92       	push	r14
    1cce:	df 92       	push	r13
    1cd0:	cf 92       	push	r12
    1cd2:	a4 e4       	ldi	r26, 0x44	; 68
    1cd4:	b1 e0       	ldi	r27, 0x01	; 1
    1cd6:	bf 93       	push	r27
    1cd8:	af 93       	push	r26
    1cda:	ac ee       	ldi	r26, 0xEC	; 236
    1cdc:	b1 e0       	ldi	r27, 0x01	; 1
    1cde:	bf 93       	push	r27
    1ce0:	af 93       	push	r26
    1ce2:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <sprintf>
		lcd_puts(CharBuffer);
    1ce6:	8c ee       	ldi	r24, 0xEC	; 236
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 9, 0);
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	89 e0       	ldi	r24, 0x09	; 9
    1cfc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_putc>
		//lcd_putc(1);
		//lcd_putc(2);
	//----------------------------------------------------	
			
		if(chyba2==0)
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	91 11       	cpse	r25, r1
    1d0a:	3c c0       	rjmp	.+120    	; 0x1d84 <main+0x614>
		{
		CurrentTemp2 = ds18b20_gettemp(&PORTC,PC1);
    1d0c:	61 e0       	ldi	r22, 0x01	; 1
    1d0e:	88 e2       	ldi	r24, 0x28	; 40
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 a1 03 	call	0x742	; 0x742 <ds18b20_gettemp>
    1d16:	e8 2f       	mov	r30, r24
    1d18:	49 2f       	mov	r20, r25
    1d1a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <CurrentTemp2>
    1d1e:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <CurrentTemp2+0x1>
		cele = CurrentTemp2/10;
    1d22:	b3 01       	movw	r22, r6
    1d24:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__divmodhi4>
		desatiny = (abs(CurrentTemp2) - abs((cele*10)) );
    1d28:	2e 2f       	mov	r18, r30
    1d2a:	34 2f       	mov	r19, r20
    1d2c:	37 ff       	sbrs	r19, 7
    1d2e:	03 c0       	rjmp	.+6      	; 0x1d36 <main+0x5c6>
    1d30:	31 95       	neg	r19
    1d32:	21 95       	neg	r18
    1d34:	31 09       	sbc	r19, r1
    1d36:	16 9f       	mul	r17, r22
    1d38:	c0 01       	movw	r24, r0
    1d3a:	17 9f       	mul	r17, r23
    1d3c:	90 0d       	add	r25, r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	97 ff       	sbrs	r25, 7
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <main+0x5da>
    1d44:	91 95       	neg	r25
    1d46:	81 95       	neg	r24
    1d48:	91 09       	sbc	r25, r1
    1d4a:	28 1b       	sub	r18, r24
    1d4c:	39 0b       	sbc	r19, r25
		sprintf( CharBuffer, "%+i.%i\n",cele,desatiny);
    1d4e:	3f 93       	push	r19
    1d50:	2f 93       	push	r18
    1d52:	7f 93       	push	r23
    1d54:	6f 93       	push	r22
    1d56:	a4 e4       	ldi	r26, 0x44	; 68
    1d58:	b1 e0       	ldi	r27, 0x01	; 1
    1d5a:	bf 93       	push	r27
    1d5c:	af 93       	push	r26
    1d5e:	ac ee       	ldi	r26, 0xEC	; 236
    1d60:	b1 e0       	ldi	r27, 0x01	; 1
    1d62:	bf 93       	push	r27
    1d64:	af 93       	push	r26
    1d66:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <sprintf>
		//sprintf( CharBuffer, "%i \xC6\n",CurrentTemp2); // xC6, xC5 arrows
		lcd_gotoxy( 3, 1);
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1d72:	8c ee       	ldi	r24, 0xEC	; 236
    1d74:	91 e0       	ldi	r25, 0x01	; 1
    1d76:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 9, 1);
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	89 e0       	ldi	r24, 0x09	; 9
    1d88:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_putc>
			
		//_delay_ms(100);
	//----------------------------------------------------	
		if(chyba3==0)
    1d92:	01 11       	cpse	r16, r1
    1d94:	3c c0       	rjmp	.+120    	; 0x1e0e <main+0x69e>
		{
		CurrentTemp3 = ds18b20_gettemp(&PORTC,PC2);
    1d96:	62 e0       	ldi	r22, 0x02	; 2
    1d98:	88 e2       	ldi	r24, 0x28	; 40
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 a1 03 	call	0x742	; 0x742 <ds18b20_gettemp>
    1da0:	e8 2f       	mov	r30, r24
    1da2:	49 2f       	mov	r20, r25
    1da4:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <CurrentTemp3>
    1da8:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <CurrentTemp3+0x1>
		cele = CurrentTemp3/10;
    1dac:	b3 01       	movw	r22, r6
    1dae:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__divmodhi4>
		desatiny = (abs(CurrentTemp3) - abs((cele*10)) );
    1db2:	2e 2f       	mov	r18, r30
    1db4:	34 2f       	mov	r19, r20
    1db6:	37 ff       	sbrs	r19, 7
    1db8:	03 c0       	rjmp	.+6      	; 0x1dc0 <main+0x650>
    1dba:	31 95       	neg	r19
    1dbc:	21 95       	neg	r18
    1dbe:	31 09       	sbc	r19, r1
    1dc0:	16 9f       	mul	r17, r22
    1dc2:	c0 01       	movw	r24, r0
    1dc4:	17 9f       	mul	r17, r23
    1dc6:	90 0d       	add	r25, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	97 ff       	sbrs	r25, 7
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <main+0x664>
    1dce:	91 95       	neg	r25
    1dd0:	81 95       	neg	r24
    1dd2:	91 09       	sbc	r25, r1
    1dd4:	28 1b       	sub	r18, r24
    1dd6:	39 0b       	sbc	r19, r25
		
		sprintf( CharBuffer, "%+i.%i\n",cele,desatiny);
    1dd8:	3f 93       	push	r19
    1dda:	2f 93       	push	r18
    1ddc:	7f 93       	push	r23
    1dde:	6f 93       	push	r22
    1de0:	a4 e4       	ldi	r26, 0x44	; 68
    1de2:	b1 e0       	ldi	r27, 0x01	; 1
    1de4:	bf 93       	push	r27
    1de6:	af 93       	push	r26
    1de8:	ac ee       	ldi	r26, 0xEC	; 236
    1dea:	b1 e0       	ldi	r27, 0x01	; 1
    1dec:	bf 93       	push	r27
    1dee:	af 93       	push	r26
    1df0:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <sprintf>
		lcd_gotoxy( 3, 2);
    1df4:	62 e0       	ldi	r22, 0x02	; 2
    1df6:	83 e0       	ldi	r24, 0x03	; 3
    1df8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1dfc:	8c ee       	ldi	r24, 0xEC	; 236
    1dfe:	91 e0       	ldi	r25, 0x01	; 1
    1e00:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 9, 2);
    1e0e:	62 e0       	ldi	r22, 0x02	; 2
    1e10:	89 e0       	ldi	r24, 0x09	; 9
    1e12:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_putc>
			
		//_delay_ms(100);
	//----------------------------------------------------	
		if(chyba4==0)
    1e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1e:	91 11       	cpse	r25, r1
    1e20:	3c c0       	rjmp	.+120    	; 0x1e9a <main+0x72a>
		{
		CurrentTemp4 = ds18b20_gettemp(&PORTC,PC3);
    1e22:	63 e0       	ldi	r22, 0x03	; 3
    1e24:	88 e2       	ldi	r24, 0x28	; 40
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	0e 94 a1 03 	call	0x742	; 0x742 <ds18b20_gettemp>
    1e2c:	e8 2f       	mov	r30, r24
    1e2e:	49 2f       	mov	r20, r25
    1e30:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <CurrentTemp4>
    1e34:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <CurrentTemp4+0x1>
		cele = CurrentTemp4/10;
    1e38:	b3 01       	movw	r22, r6
    1e3a:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__divmodhi4>
		desatiny = (abs(CurrentTemp4) - abs((cele*10)) );
    1e3e:	2e 2f       	mov	r18, r30
    1e40:	34 2f       	mov	r19, r20
    1e42:	37 ff       	sbrs	r19, 7
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <main+0x6dc>
    1e46:	31 95       	neg	r19
    1e48:	21 95       	neg	r18
    1e4a:	31 09       	sbc	r19, r1
    1e4c:	16 9f       	mul	r17, r22
    1e4e:	c0 01       	movw	r24, r0
    1e50:	17 9f       	mul	r17, r23
    1e52:	90 0d       	add	r25, r0
    1e54:	11 24       	eor	r1, r1
    1e56:	97 ff       	sbrs	r25, 7
    1e58:	03 c0       	rjmp	.+6      	; 0x1e60 <main+0x6f0>
    1e5a:	91 95       	neg	r25
    1e5c:	81 95       	neg	r24
    1e5e:	91 09       	sbc	r25, r1
    1e60:	28 1b       	sub	r18, r24
    1e62:	39 0b       	sbc	r19, r25
		sprintf( CharBuffer, "%+i.%i\n",cele,desatiny);
    1e64:	3f 93       	push	r19
    1e66:	2f 93       	push	r18
    1e68:	7f 93       	push	r23
    1e6a:	6f 93       	push	r22
    1e6c:	a4 e4       	ldi	r26, 0x44	; 68
    1e6e:	b1 e0       	ldi	r27, 0x01	; 1
    1e70:	bf 93       	push	r27
    1e72:	af 93       	push	r26
    1e74:	ac ee       	ldi	r26, 0xEC	; 236
    1e76:	b1 e0       	ldi	r27, 0x01	; 1
    1e78:	bf 93       	push	r27
    1e7a:	af 93       	push	r26
    1e7c:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <sprintf>
		lcd_gotoxy( 3, 3);
    1e80:	63 e0       	ldi	r22, 0x03	; 3
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1e88:	8c ee       	ldi	r24, 0xEC	; 236
    1e8a:	91 e0       	ldi	r25, 0x01	; 1
    1e8c:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 9, 3);
    1e9a:	63 e0       	ldi	r22, 0x03	; 3
    1e9c:	89 e0       	ldi	r24, 0x09	; 9
    1e9e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_putc>
			
		//_delay_ms(100);
	//----------------------------------------------------			
		if(chyba5==0)
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	91 11       	cpse	r25, r1
    1eac:	3c c0       	rjmp	.+120    	; 0x1f26 <main+0x7b6>
		{
		CurrentTemp5 = ds18b20_gettemp(&PORTD,PD3);
    1eae:	63 e0       	ldi	r22, 0x03	; 3
    1eb0:	8b e2       	ldi	r24, 0x2B	; 43
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	0e 94 a1 03 	call	0x742	; 0x742 <ds18b20_gettemp>
    1eb8:	e8 2f       	mov	r30, r24
    1eba:	49 2f       	mov	r20, r25
    1ebc:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <CurrentTemp5>
    1ec0:	90 93 5e 01 	sts	0x015E, r25	; 0x80015e <CurrentTemp5+0x1>
		cele = CurrentTemp5/10;
    1ec4:	b3 01       	movw	r22, r6
    1ec6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__divmodhi4>
		desatiny = (abs(CurrentTemp5) - abs((cele*10)) );
    1eca:	2e 2f       	mov	r18, r30
    1ecc:	34 2f       	mov	r19, r20
    1ece:	37 ff       	sbrs	r19, 7
    1ed0:	03 c0       	rjmp	.+6      	; 0x1ed8 <main+0x768>
    1ed2:	31 95       	neg	r19
    1ed4:	21 95       	neg	r18
    1ed6:	31 09       	sbc	r19, r1
    1ed8:	16 9f       	mul	r17, r22
    1eda:	c0 01       	movw	r24, r0
    1edc:	17 9f       	mul	r17, r23
    1ede:	90 0d       	add	r25, r0
    1ee0:	11 24       	eor	r1, r1
    1ee2:	97 ff       	sbrs	r25, 7
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <main+0x77c>
    1ee6:	91 95       	neg	r25
    1ee8:	81 95       	neg	r24
    1eea:	91 09       	sbc	r25, r1
    1eec:	28 1b       	sub	r18, r24
    1eee:	39 0b       	sbc	r19, r25
		sprintf( CharBuffer, "%+i.%i",cele,desatiny);
    1ef0:	3f 93       	push	r19
    1ef2:	2f 93       	push	r18
    1ef4:	7f 93       	push	r23
    1ef6:	6f 93       	push	r22
    1ef8:	ac e4       	ldi	r26, 0x4C	; 76
    1efa:	b1 e0       	ldi	r27, 0x01	; 1
    1efc:	bf 93       	push	r27
    1efe:	af 93       	push	r26
    1f00:	ac ee       	ldi	r26, 0xEC	; 236
    1f02:	b1 e0       	ldi	r27, 0x01	; 1
    1f04:	bf 93       	push	r27
    1f06:	af 93       	push	r26
    1f08:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <sprintf>
		//sprintf( CharBuffer, "%i\xC6\n",CurrentTemp4);
		lcd_gotoxy( 14, 2);
    1f0c:	62 e0       	ldi	r22, 0x02	; 2
    1f0e:	8e e0       	ldi	r24, 0x0E	; 14
    1f10:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1f14:	8c ee       	ldi	r24, 0xEC	; 236
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 19, 2);
    1f26:	62 e0       	ldi	r22, 0x02	; 2
    1f28:	83 e1       	ldi	r24, 0x13	; 19
    1f2a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_putc>
	//----------------------------------------------------			
		if(chyba6==0)
    1f34:	9f 81       	ldd	r25, Y+7	; 0x07
    1f36:	91 11       	cpse	r25, r1
    1f38:	3c c0       	rjmp	.+120    	; 0x1fb2 <main+0x842>
		{
		CurrentTemp6 = ds18b20_gettemp(&PORTD,PD4);
    1f3a:	64 e0       	ldi	r22, 0x04	; 4
    1f3c:	8b e2       	ldi	r24, 0x2B	; 43
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	0e 94 a1 03 	call	0x742	; 0x742 <ds18b20_gettemp>
    1f44:	e8 2f       	mov	r30, r24
    1f46:	49 2f       	mov	r20, r25
    1f48:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <CurrentTemp6>
    1f4c:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <CurrentTemp6+0x1>
		cele = CurrentTemp6/10;
    1f50:	b3 01       	movw	r22, r6
    1f52:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__divmodhi4>
		desatiny = (abs(CurrentTemp6) - abs((cele*10)) );
    1f56:	2e 2f       	mov	r18, r30
    1f58:	34 2f       	mov	r19, r20
    1f5a:	37 ff       	sbrs	r19, 7
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <main+0x7f4>
    1f5e:	31 95       	neg	r19
    1f60:	21 95       	neg	r18
    1f62:	31 09       	sbc	r19, r1
    1f64:	16 9f       	mul	r17, r22
    1f66:	c0 01       	movw	r24, r0
    1f68:	17 9f       	mul	r17, r23
    1f6a:	90 0d       	add	r25, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	97 ff       	sbrs	r25, 7
    1f70:	03 c0       	rjmp	.+6      	; 0x1f78 <main+0x808>
    1f72:	91 95       	neg	r25
    1f74:	81 95       	neg	r24
    1f76:	91 09       	sbc	r25, r1
    1f78:	28 1b       	sub	r18, r24
    1f7a:	39 0b       	sbc	r19, r25
		sprintf( CharBuffer, "%+i.%i",cele,desatiny);
    1f7c:	3f 93       	push	r19
    1f7e:	2f 93       	push	r18
    1f80:	7f 93       	push	r23
    1f82:	6f 93       	push	r22
    1f84:	ac e4       	ldi	r26, 0x4C	; 76
    1f86:	b1 e0       	ldi	r27, 0x01	; 1
    1f88:	bf 93       	push	r27
    1f8a:	af 93       	push	r26
    1f8c:	ac ee       	ldi	r26, 0xEC	; 236
    1f8e:	b1 e0       	ldi	r27, 0x01	; 1
    1f90:	bf 93       	push	r27
    1f92:	af 93       	push	r26
    1f94:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <sprintf>
		//sprintf( CharBuffer, "%i\xC6\n",CurrentTemp4);
		lcd_gotoxy( 14, 3);
    1f98:	63 e0       	ldi	r22, 0x03	; 3
    1f9a:	8e e0       	ldi	r24, 0x0E	; 14
    1f9c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    1fa0:	8c ee       	ldi	r24, 0xEC	; 236
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
		}
		lcd_gotoxy( 19, 3);
    1fb2:	63 e0       	ldi	r22, 0x03	; 3
    1fb4:	83 e1       	ldi	r24, 0x13	; 19
    1fb6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_putc(0); // print user character on LCD	
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_putc>
		//_delay_ms(100);
	//----------------------------------------------------			
		
	//get temperature BMP085
		d = bmp085_gettemperature();
    1fc0:	0e 94 64 07 	call	0xec8	; 0xec8 <bmp085_gettemperature>
    1fc4:	4b 01       	movw	r8, r22
    1fc6:	5c 01       	movw	r10, r24
    1fc8:	60 93 de 01 	sts	0x01DE, r22	; 0x8001de <d>
    1fcc:	70 93 df 01 	sts	0x01DF, r23	; 0x8001df <d+0x1>
    1fd0:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <d+0x2>
    1fd4:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <d+0x3>
		cele = d/10;
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e2       	ldi	r20, 0x20	; 32
    1fde:	51 e4       	ldi	r21, 0x41	; 65
    1fe0:	0e 94 56 12 	call	0x24ac	; 0x24ac <__divsf3>
    1fe4:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fixsfsi>
    1fe8:	6b 01       	movw	r12, r22
    1fea:	7c 01       	movw	r14, r24
		desatiny = abs(d) - abs(cele*10);
    1fec:	c5 01       	movw	r24, r10
    1fee:	b4 01       	movw	r22, r8
    1ff0:	0e 94 c8 12 	call	0x2590	; 0x2590 <__fixsfsi>
    1ff4:	ab 01       	movw	r20, r22
    1ff6:	77 ff       	sbrs	r23, 7
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <main+0x892>
    1ffa:	44 27       	eor	r20, r20
    1ffc:	55 27       	eor	r21, r21
    1ffe:	46 1b       	sub	r20, r22
    2000:	57 0b       	sbc	r21, r23
    2002:	1c 9d       	mul	r17, r12
    2004:	90 01       	movw	r18, r0
    2006:	1d 9d       	mul	r17, r13
    2008:	30 0d       	add	r19, r0
    200a:	11 24       	eor	r1, r1
    200c:	37 ff       	sbrs	r19, 7
    200e:	03 c0       	rjmp	.+6      	; 0x2016 <main+0x8a6>
    2010:	31 95       	neg	r19
    2012:	21 95       	neg	r18
    2014:	31 09       	sbc	r19, r1
    2016:	ca 01       	movw	r24, r20
    2018:	82 1b       	sub	r24, r18
    201a:	93 0b       	sbc	r25, r19
		sprintf( CharBuffer, "%+i.%i",cele,desatiny);
    201c:	9f 93       	push	r25
    201e:	8f 93       	push	r24
    2020:	df 92       	push	r13
    2022:	cf 92       	push	r12
    2024:	ac e4       	ldi	r26, 0x4C	; 76
    2026:	b1 e0       	ldi	r27, 0x01	; 1
    2028:	bf 93       	push	r27
    202a:	af 93       	push	r26
    202c:	ac ee       	ldi	r26, 0xEC	; 236
    202e:	b1 e0       	ldi	r27, 0x01	; 1
    2030:	bf 93       	push	r27
    2032:	af 93       	push	r26
    2034:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <sprintf>
		//ltoa((d*10), printbuff, 10); // for long conversion function to string
		lcd_gotoxy( 14, 1);
    2038:	61 e0       	ldi	r22, 0x01	; 1
    203a:	8e e0       	ldi	r24, 0x0E	; 14
    203c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_puts(CharBuffer);
    2040:	8c ee       	ldi	r24, 0xEC	; 236
    2042:	91 e0       	ldi	r25, 0x01	; 1
    2044:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
		//lcd_puts( printbuff);
		lcd_putc(0); // print user character on LCD
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	0e 94 0c 02 	call	0x418	; 0x418 <lcd_putc>
		//_delay_ms(100);
		
		if(press==20)
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
    2058:	94 e1       	ldi	r25, 0x14	; 20
    205a:	49 16       	cp	r4, r25
    205c:	51 04       	cpc	r5, r1
    205e:	a9 f5       	brne	.+106    	; 0x20ca <main+0x95a>
		{
		//get pressure BMP085
		l = bmp085_getpressure(gPressCorr*100);			// in Pa. correction in hPa, 32hPa for Kosice
    2060:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <gPressCorr>
    2064:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <gPressCorr+0x1>
    2068:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <gPressCorr+0x2>
    206c:	50 91 59 01 	lds	r21, 0x0159	; 0x800159 <gPressCorr+0x3>
    2070:	a4 e6       	ldi	r26, 0x64	; 100
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	0e 94 b3 11 	call	0x2366	; 0x2366 <__muluhisi3>
    2078:	0e 94 7d 07 	call	0xefa	; 0xefa <bmp085_getpressure>
    207c:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <l>
    2080:	70 93 ce 01 	sts	0x01CE, r23	; 0x8001ce <l+0x1>
    2084:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <l+0x2>
    2088:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <l+0x3>
		//l = bmp085_getpressure(gAltitudeCorr*100); // in hPa 
		//ltoa(l, printbuff, 10);  				// convert long to string , for UART
		lcd_gotoxy( 17, 0);
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	81 e1       	ldi	r24, 0x11	; 17
    2090:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
		lcd_puts_P( "hPa");
    2094:	8a e0       	ldi	r24, 0x0A	; 10
    2096:	91 e0       	ldi	r25, 0x01	; 1
    2098:	0e 94 38 02 	call	0x470	; 0x470 <lcd_puts_p>
		lcd_gotoxy( 13, 0);
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	8d e0       	ldi	r24, 0x0D	; 13
    20a0:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <lcd_gotoxy>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
    20a4:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <l>
    20a8:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <l+0x1>
    20ac:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <l+0x2>
    20b0:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <l+0x3>
    20b4:	2a e0       	ldi	r18, 0x0A	; 10
    20b6:	47 e0       	ldi	r20, 0x07	; 7
    20b8:	53 e0       	ldi	r21, 0x03	; 3
    20ba:	0e 94 7e 15 	call	0x2afc	; 0x2afc <__ltoa_ncheck>
		ltoa((l) , printbuff, 10); // in hPa (/100) in relative pressure to sea level, bmp085.h , for LCD
		lcd_puts( printbuff);
    20be:	87 e0       	ldi	r24, 0x07	; 7
    20c0:	93 e0       	ldi	r25, 0x03	; 3
    20c2:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_puts>
		press=0;
    20c6:	41 2c       	mov	r4, r1
    20c8:	51 2c       	mov	r5, r1
		}	
		//wdt_reset();
		//modbus-------------------------
		holdingRegisters[0]=CurrentTemp1;
    20ca:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <CurrentTemp1>
    20ce:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <CurrentTemp1+0x1>
    20d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    20d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		holdingRegisters[1]=CurrentTemp2;
    20da:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <CurrentTemp2>
    20de:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <CurrentTemp2+0x1>
    20e2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    20e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
		holdingRegisters[2]=CurrentTemp3;
    20ea:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <CurrentTemp3>
    20ee:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <CurrentTemp3+0x1>
    20f2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_start+0x5>
    20f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
		holdingRegisters[3]=CurrentTemp4;
    20fa:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <CurrentTemp4>
    20fe:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <CurrentTemp4+0x1>
    2102:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_start+0x7>
    2106:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_start+0x6>
		holdingRegisters[4]=CurrentTemp5;
    210a:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <CurrentTemp5>
    210e:	90 91 5e 01 	lds	r25, 0x015E	; 0x80015e <CurrentTemp5+0x1>
    2112:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_start+0x9>
    2116:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_start+0x8>
		holdingRegisters[5]=CurrentTemp6;
    211a:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <CurrentTemp6>
    211e:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <CurrentTemp6+0x1>
    2122:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_start+0xb>
    2126:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_start+0xa>
		holdingRegisters[6]= l/10; //10*Pa
    212a:	60 91 cd 01 	lds	r22, 0x01CD	; 0x8001cd <l>
    212e:	70 91 ce 01 	lds	r23, 0x01CE	; 0x8001ce <l+0x1>
    2132:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <l+0x2>
    2136:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <l+0x3>
    213a:	2a e0       	ldi	r18, 0x0A	; 10
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e0       	ldi	r20, 0x00	; 0
    2140:	50 e0       	ldi	r21, 0x00	; 0
    2142:	0e 94 8e 11 	call	0x231c	; 0x231c <__divmodsi4>
    2146:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__data_start+0xd>
    214a:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_start+0xc>
		holdingRegisters[7]= d;
    214e:	60 91 de 01 	lds	r22, 0x01DE	; 0x8001de <d>
    2152:	70 91 df 01 	lds	r23, 0x01DF	; 0x8001df <d+0x1>
    2156:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <d+0x2>
    215a:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <d+0x3>
    215e:	0e 94 cf 12 	call	0x259e	; 0x259e <__fixunssfsi>
    2162:	70 93 0f 01 	sts	0x010F, r23	; 0x80010f <__data_start+0xf>
    2166:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_start+0xe>

		thermostat1 = holdingRegisters[8];	// from master 
    216a:	c0 90 10 01 	lds	r12, 0x0110	; 0x800110 <__data_start+0x10>
    216e:	d0 90 11 01 	lds	r13, 0x0111	; 0x800111 <__data_start+0x11>
		thermostat2 = holdingRegisters[9];
    2172:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__data_start+0x12>
    2176:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__data_start+0x13>
    217a:	bb 87       	std	Y+11, r27	; 0x0b
    217c:	aa 87       	std	Y+10, r26	; 0x0a
		delay_read = holdingRegisters[10];	// from master in seconds
    217e:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <__data_start+0x14>
    2182:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <__data_start+0x15>
		relative_corr = holdingRegisters[11];
    2186:	a0 90 16 01 	lds	r10, 0x0116	; 0x800116 <__data_start+0x16>
    218a:	b0 90 17 01 	lds	r11, 0x0117	; 0x800117 <__data_start+0x17>

	if((delay_read > 1) && (delay_read <200))
    218e:	c7 01       	movw	r24, r14
    2190:	02 97       	sbiw	r24, 0x02	; 2
    2192:	86 3c       	cpi	r24, 0xC6	; 198
    2194:	91 05       	cpc	r25, r1
    2196:	98 f4       	brcc	.+38     	; 0x21be <main+0xa4e>
		{ interval = delay_read*100;
    2198:	b4 e6       	ldi	r27, 0x64	; 100
    219a:	be 9d       	mul	r27, r14
    219c:	40 01       	movw	r8, r0
    219e:	bf 9d       	mul	r27, r15
    21a0:	90 0c       	add	r9, r0
    21a2:	11 24       	eor	r1, r1
		//
		if(delay_read_eeprom != delay_read)
    21a4:	e9 81       	ldd	r30, Y+1	; 0x01
    21a6:	fa 81       	ldd	r31, Y+2	; 0x02
    21a8:	ee 15       	cp	r30, r14
    21aa:	ff 05       	cpc	r31, r15
    21ac:	69 f0       	breq	.+26     	; 0x21c8 <main+0xa58>
			{
			cli();
    21ae:	f8 94       	cli
			eeprom_write_word((uint16_t*)adr_delay_read,delay_read);
    21b0:	b7 01       	movw	r22, r14
    21b2:	86 e0       	ldi	r24, 0x06	; 6
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 66 18 	call	0x30cc	; 0x30cc <eeprom_write_word>
			sei();
    21ba:	78 94       	sei
    21bc:	05 c0       	rjmp	.+10     	; 0x21c8 <main+0xa58>
    21be:	e9 80       	ldd	r14, Y+1	; 0x01
    21c0:	fa 80       	ldd	r15, Y+2	; 0x02
			delay_read_eeprom = delay_read;
			}
			else delay_read_eeprom = delay_read;
		}
		else interval = 15;
    21c2:	8f e0       	ldi	r24, 0x0F	; 15
    21c4:	88 2e       	mov	r8, r24
    21c6:	91 2c       	mov	r9, r1

	if((thermostat1>0)&&(thermostat1<90))
    21c8:	c6 01       	movw	r24, r12
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	89 35       	cpi	r24, 0x59	; 89
    21ce:	91 05       	cpc	r25, r1
    21d0:	d8 f4       	brcc	.+54     	; 0x2208 <main+0xa98>
		holdingRegisters[4]=CurrentTemp5;
		holdingRegisters[5]=CurrentTemp6;
		holdingRegisters[6]= l/10; //10*Pa
		holdingRegisters[7]= d;

		thermostat1 = holdingRegisters[8];	// from master 
    21d2:	c8 86       	std	Y+8, r12	; 0x08
    21d4:	d9 86       	std	Y+9, r13	; 0x09
		}
		else interval = 15;

	if((thermostat1>0)&&(thermostat1<90))
		{
		if((thermostat1*10)> (CurrentTemp2 + 50))
    21d6:	1c 9d       	mul	r17, r12
    21d8:	90 01       	movw	r18, r0
    21da:	1d 9d       	mul	r17, r13
    21dc:	30 0d       	add	r19, r0
    21de:	11 24       	eor	r1, r1
    21e0:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <CurrentTemp2>
    21e4:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <CurrentTemp2+0x1>
    21e8:	c2 96       	adiw	r24, 0x32	; 50
    21ea:	82 17       	cp	r24, r18
    21ec:	93 07       	cpc	r25, r19
    21ee:	0c f4       	brge	.+2      	; 0x21f2 <main+0xa82>
			{ PORTD |= (1<<PD5);//set PD5 to 1
    21f0:	5d 9a       	sbi	0x0b, 5	; 11
			}
		if(thermostat1 != thermostat1_eeprom)
    21f2:	c2 14       	cp	r12, r2
    21f4:	d3 04       	cpc	r13, r3
    21f6:	51 f0       	breq	.+20     	; 0x220c <main+0xa9c>
			{cli();	
    21f8:	f8 94       	cli
			eeprom_write_word((uint16_t*)adr_thermostat1,thermostat1); // works
    21fa:	b6 01       	movw	r22, r12
    21fc:	82 e0       	ldi	r24, 0x02	; 2
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	0e 94 66 18 	call	0x30cc	; 0x30cc <eeprom_write_word>
			sei();
    2204:	78 94       	sei
    2206:	02 c0       	rjmp	.+4      	; 0x220c <main+0xa9c>
    2208:	28 86       	std	Y+8, r2	; 0x08
    220a:	39 86       	std	Y+9, r3	; 0x09
			thermostat1_eeprom = thermostat1;
			}
		}
		else thermostat1 = thermostat1_eeprom;

	if((relative_corr>0) && (relative_corr<100))
    220c:	c5 01       	movw	r24, r10
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	83 36       	cpi	r24, 0x63	; 99
    2212:	91 05       	cpc	r25, r1
    2214:	60 f4       	brcc	.+24     	; 0x222e <main+0xabe>
		{gPressCorr = relative_corr;
    2216:	c5 01       	movw	r24, r10
    2218:	a0 e0       	ldi	r26, 0x00	; 0
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <gPressCorr>
    2220:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <gPressCorr+0x1>
    2224:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <gPressCorr+0x2>
    2228:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <gPressCorr+0x3>
    222c:	08 c0       	rjmp	.+16     	; 0x223e <main+0xace>
		}
		else gPressCorr = 0;
    222e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <gPressCorr>
    2232:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <gPressCorr+0x1>
    2236:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <gPressCorr+0x2>
    223a:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <gPressCorr+0x3>

	if((thermostat2*10)> (CurrentTemp4 + 50))
    223e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2240:	9b 85       	ldd	r25, Y+11	; 0x0b
    2242:	18 9f       	mul	r17, r24
    2244:	90 01       	movw	r18, r0
    2246:	19 9f       	mul	r17, r25
    2248:	30 0d       	add	r19, r0
    224a:	11 24       	eor	r1, r1
    224c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <CurrentTemp4>
    2250:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <CurrentTemp4+0x1>
    2254:	c2 96       	adiw	r24, 0x32	; 50
    2256:	82 17       	cp	r24, r18
    2258:	93 07       	cpc	r25, r19
    225a:	0c f4       	brge	.+2      	; 0x225e <main+0xaee>
		{ PORTD |= (1<<PD6);//set PD6 to 1
    225c:	5e 9a       	sbi	0x0b, 6	; 11
	//sprintf( CharBuffer, "%i.%i",thermostat1,delay_read);
	//lcd_puts(CharBuffer);
	//----------------------------------------------------
		// end of loop--------------------
		// enable interrupt
		sei();
    225e:	78 94       	sei
			// loop for communication, and delay between reading temperatures
		for(j=0;j<interval;j++)
    2260:	c1 2c       	mov	r12, r1
    2262:	d1 2c       	mov	r13, r1
			{
			modbusGet();
    2264:	0e 94 2b 01 	call	0x256	; 0x256 <modbusGet>
    2268:	af e3       	ldi	r26, 0x3F	; 63
    226a:	bc e9       	ldi	r27, 0x9C	; 156
    226c:	11 97       	sbiw	r26, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <main+0xafc>
    2270:	00 c0       	rjmp	.+0      	; 0x2272 <main+0xb02>
    2272:	00 00       	nop
	//----------------------------------------------------
		// end of loop--------------------
		// enable interrupt
		sei();
			// loop for communication, and delay between reading temperatures
		for(j=0;j<interval;j++)
    2274:	bf ef       	ldi	r27, 0xFF	; 255
    2276:	cb 1a       	sub	r12, r27
    2278:	db 0a       	sbc	r13, r27
    227a:	c8 14       	cp	r12, r8
    227c:	d9 04       	cpc	r13, r9
    227e:	94 f3       	brlt	.-28     	; 0x2264 <main+0xaf4>
			{
			modbusGet();
			_delay_ms(10);
			}//for(j
		press++; // increment press - more delay for measurment of atmospheric pressure
    2280:	ef ef       	ldi	r30, 0xFF	; 255
    2282:	4e 1a       	sub	r4, r30
    2284:	5e 0a       	sbc	r5, r30

	}	// while
    2286:	fa 82       	std	Y+2, r15	; 0x02
    2288:	e9 82       	std	Y+1, r14	; 0x01
    228a:	28 84       	ldd	r2, Y+8	; 0x08
    228c:	39 84       	ldd	r3, Y+9	; 0x09
    228e:	f2 cc       	rjmp	.-1564   	; 0x1c74 <main+0x504>

00002290 <__mulsi3>:
    2290:	db 01       	movw	r26, r22
    2292:	8f 93       	push	r24
    2294:	9f 93       	push	r25
    2296:	0e 94 b3 11 	call	0x2366	; 0x2366 <__muluhisi3>
    229a:	bf 91       	pop	r27
    229c:	af 91       	pop	r26
    229e:	a2 9f       	mul	r26, r18
    22a0:	80 0d       	add	r24, r0
    22a2:	91 1d       	adc	r25, r1
    22a4:	a3 9f       	mul	r26, r19
    22a6:	90 0d       	add	r25, r0
    22a8:	b2 9f       	mul	r27, r18
    22aa:	90 0d       	add	r25, r0
    22ac:	11 24       	eor	r1, r1
    22ae:	08 95       	ret

000022b0 <__divmodhi4>:
    22b0:	97 fb       	bst	r25, 7
    22b2:	07 2e       	mov	r0, r23
    22b4:	16 f4       	brtc	.+4      	; 0x22ba <__divmodhi4+0xa>
    22b6:	00 94       	com	r0
    22b8:	07 d0       	rcall	.+14     	; 0x22c8 <__divmodhi4_neg1>
    22ba:	77 fd       	sbrc	r23, 7
    22bc:	09 d0       	rcall	.+18     	; 0x22d0 <__divmodhi4_neg2>
    22be:	0e 94 c6 11 	call	0x238c	; 0x238c <__udivmodhi4>
    22c2:	07 fc       	sbrc	r0, 7
    22c4:	05 d0       	rcall	.+10     	; 0x22d0 <__divmodhi4_neg2>
    22c6:	3e f4       	brtc	.+14     	; 0x22d6 <__divmodhi4_exit>

000022c8 <__divmodhi4_neg1>:
    22c8:	90 95       	com	r25
    22ca:	81 95       	neg	r24
    22cc:	9f 4f       	sbci	r25, 0xFF	; 255
    22ce:	08 95       	ret

000022d0 <__divmodhi4_neg2>:
    22d0:	70 95       	com	r23
    22d2:	61 95       	neg	r22
    22d4:	7f 4f       	sbci	r23, 0xFF	; 255

000022d6 <__divmodhi4_exit>:
    22d6:	08 95       	ret

000022d8 <__udivmodsi4>:
    22d8:	a1 e2       	ldi	r26, 0x21	; 33
    22da:	1a 2e       	mov	r1, r26
    22dc:	aa 1b       	sub	r26, r26
    22de:	bb 1b       	sub	r27, r27
    22e0:	fd 01       	movw	r30, r26
    22e2:	0d c0       	rjmp	.+26     	; 0x22fe <__udivmodsi4_ep>

000022e4 <__udivmodsi4_loop>:
    22e4:	aa 1f       	adc	r26, r26
    22e6:	bb 1f       	adc	r27, r27
    22e8:	ee 1f       	adc	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	a2 17       	cp	r26, r18
    22ee:	b3 07       	cpc	r27, r19
    22f0:	e4 07       	cpc	r30, r20
    22f2:	f5 07       	cpc	r31, r21
    22f4:	20 f0       	brcs	.+8      	; 0x22fe <__udivmodsi4_ep>
    22f6:	a2 1b       	sub	r26, r18
    22f8:	b3 0b       	sbc	r27, r19
    22fa:	e4 0b       	sbc	r30, r20
    22fc:	f5 0b       	sbc	r31, r21

000022fe <__udivmodsi4_ep>:
    22fe:	66 1f       	adc	r22, r22
    2300:	77 1f       	adc	r23, r23
    2302:	88 1f       	adc	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	1a 94       	dec	r1
    2308:	69 f7       	brne	.-38     	; 0x22e4 <__udivmodsi4_loop>
    230a:	60 95       	com	r22
    230c:	70 95       	com	r23
    230e:	80 95       	com	r24
    2310:	90 95       	com	r25
    2312:	9b 01       	movw	r18, r22
    2314:	ac 01       	movw	r20, r24
    2316:	bd 01       	movw	r22, r26
    2318:	cf 01       	movw	r24, r30
    231a:	08 95       	ret

0000231c <__divmodsi4>:
    231c:	05 2e       	mov	r0, r21
    231e:	97 fb       	bst	r25, 7
    2320:	1e f4       	brtc	.+6      	; 0x2328 <__divmodsi4+0xc>
    2322:	00 94       	com	r0
    2324:	0e 94 a5 11 	call	0x234a	; 0x234a <__negsi2>
    2328:	57 fd       	sbrc	r21, 7
    232a:	07 d0       	rcall	.+14     	; 0x233a <__divmodsi4_neg2>
    232c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__udivmodsi4>
    2330:	07 fc       	sbrc	r0, 7
    2332:	03 d0       	rcall	.+6      	; 0x233a <__divmodsi4_neg2>
    2334:	4e f4       	brtc	.+18     	; 0x2348 <__divmodsi4_exit>
    2336:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__negsi2>

0000233a <__divmodsi4_neg2>:
    233a:	50 95       	com	r21
    233c:	40 95       	com	r20
    233e:	30 95       	com	r19
    2340:	21 95       	neg	r18
    2342:	3f 4f       	sbci	r19, 0xFF	; 255
    2344:	4f 4f       	sbci	r20, 0xFF	; 255
    2346:	5f 4f       	sbci	r21, 0xFF	; 255

00002348 <__divmodsi4_exit>:
    2348:	08 95       	ret

0000234a <__negsi2>:
    234a:	90 95       	com	r25
    234c:	80 95       	com	r24
    234e:	70 95       	com	r23
    2350:	61 95       	neg	r22
    2352:	7f 4f       	sbci	r23, 0xFF	; 255
    2354:	8f 4f       	sbci	r24, 0xFF	; 255
    2356:	9f 4f       	sbci	r25, 0xFF	; 255
    2358:	08 95       	ret

0000235a <__tablejump2__>:
    235a:	ee 0f       	add	r30, r30
    235c:	ff 1f       	adc	r31, r31
    235e:	05 90       	lpm	r0, Z+
    2360:	f4 91       	lpm	r31, Z
    2362:	e0 2d       	mov	r30, r0
    2364:	09 94       	ijmp

00002366 <__muluhisi3>:
    2366:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__umulhisi3>
    236a:	a5 9f       	mul	r26, r21
    236c:	90 0d       	add	r25, r0
    236e:	b4 9f       	mul	r27, r20
    2370:	90 0d       	add	r25, r0
    2372:	a4 9f       	mul	r26, r20
    2374:	80 0d       	add	r24, r0
    2376:	91 1d       	adc	r25, r1
    2378:	11 24       	eor	r1, r1
    237a:	08 95       	ret

0000237c <__mulshisi3>:
    237c:	b7 ff       	sbrs	r27, 7
    237e:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__muluhisi3>

00002382 <__mulohisi3>:
    2382:	0e 94 b3 11 	call	0x2366	; 0x2366 <__muluhisi3>
    2386:	82 1b       	sub	r24, r18
    2388:	93 0b       	sbc	r25, r19
    238a:	08 95       	ret

0000238c <__udivmodhi4>:
    238c:	aa 1b       	sub	r26, r26
    238e:	bb 1b       	sub	r27, r27
    2390:	51 e1       	ldi	r21, 0x11	; 17
    2392:	07 c0       	rjmp	.+14     	; 0x23a2 <__udivmodhi4_ep>

00002394 <__udivmodhi4_loop>:
    2394:	aa 1f       	adc	r26, r26
    2396:	bb 1f       	adc	r27, r27
    2398:	a6 17       	cp	r26, r22
    239a:	b7 07       	cpc	r27, r23
    239c:	10 f0       	brcs	.+4      	; 0x23a2 <__udivmodhi4_ep>
    239e:	a6 1b       	sub	r26, r22
    23a0:	b7 0b       	sbc	r27, r23

000023a2 <__udivmodhi4_ep>:
    23a2:	88 1f       	adc	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	5a 95       	dec	r21
    23a8:	a9 f7       	brne	.-22     	; 0x2394 <__udivmodhi4_loop>
    23aa:	80 95       	com	r24
    23ac:	90 95       	com	r25
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	08 95       	ret

000023b4 <__umulhisi3>:
    23b4:	a2 9f       	mul	r26, r18
    23b6:	b0 01       	movw	r22, r0
    23b8:	b3 9f       	mul	r27, r19
    23ba:	c0 01       	movw	r24, r0
    23bc:	a3 9f       	mul	r26, r19
    23be:	70 0d       	add	r23, r0
    23c0:	81 1d       	adc	r24, r1
    23c2:	11 24       	eor	r1, r1
    23c4:	91 1d       	adc	r25, r1
    23c6:	b2 9f       	mul	r27, r18
    23c8:	70 0d       	add	r23, r0
    23ca:	81 1d       	adc	r24, r1
    23cc:	11 24       	eor	r1, r1
    23ce:	91 1d       	adc	r25, r1
    23d0:	08 95       	ret

000023d2 <__subsf3>:
    23d2:	50 58       	subi	r21, 0x80	; 128

000023d4 <__addsf3>:
    23d4:	bb 27       	eor	r27, r27
    23d6:	aa 27       	eor	r26, r26
    23d8:	0e 94 01 12 	call	0x2402	; 0x2402 <__addsf3x>
    23dc:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__fp_round>
    23e0:	0e 94 44 13 	call	0x2688	; 0x2688 <__fp_pscA>
    23e4:	38 f0       	brcs	.+14     	; 0x23f4 <__addsf3+0x20>
    23e6:	0e 94 4b 13 	call	0x2696	; 0x2696 <__fp_pscB>
    23ea:	20 f0       	brcs	.+8      	; 0x23f4 <__addsf3+0x20>
    23ec:	39 f4       	brne	.+14     	; 0x23fc <__addsf3+0x28>
    23ee:	9f 3f       	cpi	r25, 0xFF	; 255
    23f0:	19 f4       	brne	.+6      	; 0x23f8 <__addsf3+0x24>
    23f2:	26 f4       	brtc	.+8      	; 0x23fc <__addsf3+0x28>
    23f4:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_nan>
    23f8:	0e f4       	brtc	.+2      	; 0x23fc <__addsf3+0x28>
    23fa:	e0 95       	com	r30
    23fc:	e7 fb       	bst	r30, 7
    23fe:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_inf>

00002402 <__addsf3x>:
    2402:	e9 2f       	mov	r30, r25
    2404:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__fp_split3>
    2408:	58 f3       	brcs	.-42     	; 0x23e0 <__addsf3+0xc>
    240a:	ba 17       	cp	r27, r26
    240c:	62 07       	cpc	r22, r18
    240e:	73 07       	cpc	r23, r19
    2410:	84 07       	cpc	r24, r20
    2412:	95 07       	cpc	r25, r21
    2414:	20 f0       	brcs	.+8      	; 0x241e <__addsf3x+0x1c>
    2416:	79 f4       	brne	.+30     	; 0x2436 <__addsf3x+0x34>
    2418:	a6 f5       	brtc	.+104    	; 0x2482 <__addsf3x+0x80>
    241a:	0c 94 85 13 	jmp	0x270a	; 0x270a <__fp_zero>
    241e:	0e f4       	brtc	.+2      	; 0x2422 <__addsf3x+0x20>
    2420:	e0 95       	com	r30
    2422:	0b 2e       	mov	r0, r27
    2424:	ba 2f       	mov	r27, r26
    2426:	a0 2d       	mov	r26, r0
    2428:	0b 01       	movw	r0, r22
    242a:	b9 01       	movw	r22, r18
    242c:	90 01       	movw	r18, r0
    242e:	0c 01       	movw	r0, r24
    2430:	ca 01       	movw	r24, r20
    2432:	a0 01       	movw	r20, r0
    2434:	11 24       	eor	r1, r1
    2436:	ff 27       	eor	r31, r31
    2438:	59 1b       	sub	r21, r25
    243a:	99 f0       	breq	.+38     	; 0x2462 <__addsf3x+0x60>
    243c:	59 3f       	cpi	r21, 0xF9	; 249
    243e:	50 f4       	brcc	.+20     	; 0x2454 <__addsf3x+0x52>
    2440:	50 3e       	cpi	r21, 0xE0	; 224
    2442:	68 f1       	brcs	.+90     	; 0x249e <__addsf3x+0x9c>
    2444:	1a 16       	cp	r1, r26
    2446:	f0 40       	sbci	r31, 0x00	; 0
    2448:	a2 2f       	mov	r26, r18
    244a:	23 2f       	mov	r18, r19
    244c:	34 2f       	mov	r19, r20
    244e:	44 27       	eor	r20, r20
    2450:	58 5f       	subi	r21, 0xF8	; 248
    2452:	f3 cf       	rjmp	.-26     	; 0x243a <__addsf3x+0x38>
    2454:	46 95       	lsr	r20
    2456:	37 95       	ror	r19
    2458:	27 95       	ror	r18
    245a:	a7 95       	ror	r26
    245c:	f0 40       	sbci	r31, 0x00	; 0
    245e:	53 95       	inc	r21
    2460:	c9 f7       	brne	.-14     	; 0x2454 <__addsf3x+0x52>
    2462:	7e f4       	brtc	.+30     	; 0x2482 <__addsf3x+0x80>
    2464:	1f 16       	cp	r1, r31
    2466:	ba 0b       	sbc	r27, r26
    2468:	62 0b       	sbc	r22, r18
    246a:	73 0b       	sbc	r23, r19
    246c:	84 0b       	sbc	r24, r20
    246e:	ba f0       	brmi	.+46     	; 0x249e <__addsf3x+0x9c>
    2470:	91 50       	subi	r25, 0x01	; 1
    2472:	a1 f0       	breq	.+40     	; 0x249c <__addsf3x+0x9a>
    2474:	ff 0f       	add	r31, r31
    2476:	bb 1f       	adc	r27, r27
    2478:	66 1f       	adc	r22, r22
    247a:	77 1f       	adc	r23, r23
    247c:	88 1f       	adc	r24, r24
    247e:	c2 f7       	brpl	.-16     	; 0x2470 <__addsf3x+0x6e>
    2480:	0e c0       	rjmp	.+28     	; 0x249e <__addsf3x+0x9c>
    2482:	ba 0f       	add	r27, r26
    2484:	62 1f       	adc	r22, r18
    2486:	73 1f       	adc	r23, r19
    2488:	84 1f       	adc	r24, r20
    248a:	48 f4       	brcc	.+18     	; 0x249e <__addsf3x+0x9c>
    248c:	87 95       	ror	r24
    248e:	77 95       	ror	r23
    2490:	67 95       	ror	r22
    2492:	b7 95       	ror	r27
    2494:	f7 95       	ror	r31
    2496:	9e 3f       	cpi	r25, 0xFE	; 254
    2498:	08 f0       	brcs	.+2      	; 0x249c <__addsf3x+0x9a>
    249a:	b0 cf       	rjmp	.-160    	; 0x23fc <__addsf3+0x28>
    249c:	93 95       	inc	r25
    249e:	88 0f       	add	r24, r24
    24a0:	08 f0       	brcs	.+2      	; 0x24a4 <__addsf3x+0xa2>
    24a2:	99 27       	eor	r25, r25
    24a4:	ee 0f       	add	r30, r30
    24a6:	97 95       	ror	r25
    24a8:	87 95       	ror	r24
    24aa:	08 95       	ret

000024ac <__divsf3>:
    24ac:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__divsf3x>
    24b0:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__fp_round>
    24b4:	0e 94 4b 13 	call	0x2696	; 0x2696 <__fp_pscB>
    24b8:	58 f0       	brcs	.+22     	; 0x24d0 <__divsf3+0x24>
    24ba:	0e 94 44 13 	call	0x2688	; 0x2688 <__fp_pscA>
    24be:	40 f0       	brcs	.+16     	; 0x24d0 <__divsf3+0x24>
    24c0:	29 f4       	brne	.+10     	; 0x24cc <__divsf3+0x20>
    24c2:	5f 3f       	cpi	r21, 0xFF	; 255
    24c4:	29 f0       	breq	.+10     	; 0x24d0 <__divsf3+0x24>
    24c6:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_inf>
    24ca:	51 11       	cpse	r21, r1
    24cc:	0c 94 86 13 	jmp	0x270c	; 0x270c <__fp_szero>
    24d0:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_nan>

000024d4 <__divsf3x>:
    24d4:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__fp_split3>
    24d8:	68 f3       	brcs	.-38     	; 0x24b4 <__divsf3+0x8>

000024da <__divsf3_pse>:
    24da:	99 23       	and	r25, r25
    24dc:	b1 f3       	breq	.-20     	; 0x24ca <__divsf3+0x1e>
    24de:	55 23       	and	r21, r21
    24e0:	91 f3       	breq	.-28     	; 0x24c6 <__divsf3+0x1a>
    24e2:	95 1b       	sub	r25, r21
    24e4:	55 0b       	sbc	r21, r21
    24e6:	bb 27       	eor	r27, r27
    24e8:	aa 27       	eor	r26, r26
    24ea:	62 17       	cp	r22, r18
    24ec:	73 07       	cpc	r23, r19
    24ee:	84 07       	cpc	r24, r20
    24f0:	38 f0       	brcs	.+14     	; 0x2500 <__divsf3_pse+0x26>
    24f2:	9f 5f       	subi	r25, 0xFF	; 255
    24f4:	5f 4f       	sbci	r21, 0xFF	; 255
    24f6:	22 0f       	add	r18, r18
    24f8:	33 1f       	adc	r19, r19
    24fa:	44 1f       	adc	r20, r20
    24fc:	aa 1f       	adc	r26, r26
    24fe:	a9 f3       	breq	.-22     	; 0x24ea <__divsf3_pse+0x10>
    2500:	35 d0       	rcall	.+106    	; 0x256c <__divsf3_pse+0x92>
    2502:	0e 2e       	mov	r0, r30
    2504:	3a f0       	brmi	.+14     	; 0x2514 <__divsf3_pse+0x3a>
    2506:	e0 e8       	ldi	r30, 0x80	; 128
    2508:	32 d0       	rcall	.+100    	; 0x256e <__divsf3_pse+0x94>
    250a:	91 50       	subi	r25, 0x01	; 1
    250c:	50 40       	sbci	r21, 0x00	; 0
    250e:	e6 95       	lsr	r30
    2510:	00 1c       	adc	r0, r0
    2512:	ca f7       	brpl	.-14     	; 0x2506 <__divsf3_pse+0x2c>
    2514:	2b d0       	rcall	.+86     	; 0x256c <__divsf3_pse+0x92>
    2516:	fe 2f       	mov	r31, r30
    2518:	29 d0       	rcall	.+82     	; 0x256c <__divsf3_pse+0x92>
    251a:	66 0f       	add	r22, r22
    251c:	77 1f       	adc	r23, r23
    251e:	88 1f       	adc	r24, r24
    2520:	bb 1f       	adc	r27, r27
    2522:	26 17       	cp	r18, r22
    2524:	37 07       	cpc	r19, r23
    2526:	48 07       	cpc	r20, r24
    2528:	ab 07       	cpc	r26, r27
    252a:	b0 e8       	ldi	r27, 0x80	; 128
    252c:	09 f0       	breq	.+2      	; 0x2530 <__divsf3_pse+0x56>
    252e:	bb 0b       	sbc	r27, r27
    2530:	80 2d       	mov	r24, r0
    2532:	bf 01       	movw	r22, r30
    2534:	ff 27       	eor	r31, r31
    2536:	93 58       	subi	r25, 0x83	; 131
    2538:	5f 4f       	sbci	r21, 0xFF	; 255
    253a:	3a f0       	brmi	.+14     	; 0x254a <__divsf3_pse+0x70>
    253c:	9e 3f       	cpi	r25, 0xFE	; 254
    253e:	51 05       	cpc	r21, r1
    2540:	78 f0       	brcs	.+30     	; 0x2560 <__divsf3_pse+0x86>
    2542:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_inf>
    2546:	0c 94 86 13 	jmp	0x270c	; 0x270c <__fp_szero>
    254a:	5f 3f       	cpi	r21, 0xFF	; 255
    254c:	e4 f3       	brlt	.-8      	; 0x2546 <__divsf3_pse+0x6c>
    254e:	98 3e       	cpi	r25, 0xE8	; 232
    2550:	d4 f3       	brlt	.-12     	; 0x2546 <__divsf3_pse+0x6c>
    2552:	86 95       	lsr	r24
    2554:	77 95       	ror	r23
    2556:	67 95       	ror	r22
    2558:	b7 95       	ror	r27
    255a:	f7 95       	ror	r31
    255c:	9f 5f       	subi	r25, 0xFF	; 255
    255e:	c9 f7       	brne	.-14     	; 0x2552 <__divsf3_pse+0x78>
    2560:	88 0f       	add	r24, r24
    2562:	91 1d       	adc	r25, r1
    2564:	96 95       	lsr	r25
    2566:	87 95       	ror	r24
    2568:	97 f9       	bld	r25, 7
    256a:	08 95       	ret
    256c:	e1 e0       	ldi	r30, 0x01	; 1
    256e:	66 0f       	add	r22, r22
    2570:	77 1f       	adc	r23, r23
    2572:	88 1f       	adc	r24, r24
    2574:	bb 1f       	adc	r27, r27
    2576:	62 17       	cp	r22, r18
    2578:	73 07       	cpc	r23, r19
    257a:	84 07       	cpc	r24, r20
    257c:	ba 07       	cpc	r27, r26
    257e:	20 f0       	brcs	.+8      	; 0x2588 <__divsf3_pse+0xae>
    2580:	62 1b       	sub	r22, r18
    2582:	73 0b       	sbc	r23, r19
    2584:	84 0b       	sbc	r24, r20
    2586:	ba 0b       	sbc	r27, r26
    2588:	ee 1f       	adc	r30, r30
    258a:	88 f7       	brcc	.-30     	; 0x256e <__divsf3_pse+0x94>
    258c:	e0 95       	com	r30
    258e:	08 95       	ret

00002590 <__fixsfsi>:
    2590:	0e 94 cf 12 	call	0x259e	; 0x259e <__fixunssfsi>
    2594:	68 94       	set
    2596:	b1 11       	cpse	r27, r1
    2598:	0c 94 86 13 	jmp	0x270c	; 0x270c <__fp_szero>
    259c:	08 95       	ret

0000259e <__fixunssfsi>:
    259e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fp_splitA>
    25a2:	88 f0       	brcs	.+34     	; 0x25c6 <__fixunssfsi+0x28>
    25a4:	9f 57       	subi	r25, 0x7F	; 127
    25a6:	98 f0       	brcs	.+38     	; 0x25ce <__fixunssfsi+0x30>
    25a8:	b9 2f       	mov	r27, r25
    25aa:	99 27       	eor	r25, r25
    25ac:	b7 51       	subi	r27, 0x17	; 23
    25ae:	b0 f0       	brcs	.+44     	; 0x25dc <__fixunssfsi+0x3e>
    25b0:	e1 f0       	breq	.+56     	; 0x25ea <__fixunssfsi+0x4c>
    25b2:	66 0f       	add	r22, r22
    25b4:	77 1f       	adc	r23, r23
    25b6:	88 1f       	adc	r24, r24
    25b8:	99 1f       	adc	r25, r25
    25ba:	1a f0       	brmi	.+6      	; 0x25c2 <__fixunssfsi+0x24>
    25bc:	ba 95       	dec	r27
    25be:	c9 f7       	brne	.-14     	; 0x25b2 <__fixunssfsi+0x14>
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <__fixunssfsi+0x4c>
    25c2:	b1 30       	cpi	r27, 0x01	; 1
    25c4:	91 f0       	breq	.+36     	; 0x25ea <__fixunssfsi+0x4c>
    25c6:	0e 94 85 13 	call	0x270a	; 0x270a <__fp_zero>
    25ca:	b1 e0       	ldi	r27, 0x01	; 1
    25cc:	08 95       	ret
    25ce:	0c 94 85 13 	jmp	0x270a	; 0x270a <__fp_zero>
    25d2:	67 2f       	mov	r22, r23
    25d4:	78 2f       	mov	r23, r24
    25d6:	88 27       	eor	r24, r24
    25d8:	b8 5f       	subi	r27, 0xF8	; 248
    25da:	39 f0       	breq	.+14     	; 0x25ea <__fixunssfsi+0x4c>
    25dc:	b9 3f       	cpi	r27, 0xF9	; 249
    25de:	cc f3       	brlt	.-14     	; 0x25d2 <__fixunssfsi+0x34>
    25e0:	86 95       	lsr	r24
    25e2:	77 95       	ror	r23
    25e4:	67 95       	ror	r22
    25e6:	b3 95       	inc	r27
    25e8:	d9 f7       	brne	.-10     	; 0x25e0 <__fixunssfsi+0x42>
    25ea:	3e f4       	brtc	.+14     	; 0x25fa <__fixunssfsi+0x5c>
    25ec:	90 95       	com	r25
    25ee:	80 95       	com	r24
    25f0:	70 95       	com	r23
    25f2:	61 95       	neg	r22
    25f4:	7f 4f       	sbci	r23, 0xFF	; 255
    25f6:	8f 4f       	sbci	r24, 0xFF	; 255
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	08 95       	ret

000025fc <__floatunsisf>:
    25fc:	e8 94       	clt
    25fe:	09 c0       	rjmp	.+18     	; 0x2612 <__floatsisf+0x12>

00002600 <__floatsisf>:
    2600:	97 fb       	bst	r25, 7
    2602:	3e f4       	brtc	.+14     	; 0x2612 <__floatsisf+0x12>
    2604:	90 95       	com	r25
    2606:	80 95       	com	r24
    2608:	70 95       	com	r23
    260a:	61 95       	neg	r22
    260c:	7f 4f       	sbci	r23, 0xFF	; 255
    260e:	8f 4f       	sbci	r24, 0xFF	; 255
    2610:	9f 4f       	sbci	r25, 0xFF	; 255
    2612:	99 23       	and	r25, r25
    2614:	a9 f0       	breq	.+42     	; 0x2640 <__floatsisf+0x40>
    2616:	f9 2f       	mov	r31, r25
    2618:	96 e9       	ldi	r25, 0x96	; 150
    261a:	bb 27       	eor	r27, r27
    261c:	93 95       	inc	r25
    261e:	f6 95       	lsr	r31
    2620:	87 95       	ror	r24
    2622:	77 95       	ror	r23
    2624:	67 95       	ror	r22
    2626:	b7 95       	ror	r27
    2628:	f1 11       	cpse	r31, r1
    262a:	f8 cf       	rjmp	.-16     	; 0x261c <__floatsisf+0x1c>
    262c:	fa f4       	brpl	.+62     	; 0x266c <__floatsisf+0x6c>
    262e:	bb 0f       	add	r27, r27
    2630:	11 f4       	brne	.+4      	; 0x2636 <__floatsisf+0x36>
    2632:	60 ff       	sbrs	r22, 0
    2634:	1b c0       	rjmp	.+54     	; 0x266c <__floatsisf+0x6c>
    2636:	6f 5f       	subi	r22, 0xFF	; 255
    2638:	7f 4f       	sbci	r23, 0xFF	; 255
    263a:	8f 4f       	sbci	r24, 0xFF	; 255
    263c:	9f 4f       	sbci	r25, 0xFF	; 255
    263e:	16 c0       	rjmp	.+44     	; 0x266c <__floatsisf+0x6c>
    2640:	88 23       	and	r24, r24
    2642:	11 f0       	breq	.+4      	; 0x2648 <__floatsisf+0x48>
    2644:	96 e9       	ldi	r25, 0x96	; 150
    2646:	11 c0       	rjmp	.+34     	; 0x266a <__floatsisf+0x6a>
    2648:	77 23       	and	r23, r23
    264a:	21 f0       	breq	.+8      	; 0x2654 <__floatsisf+0x54>
    264c:	9e e8       	ldi	r25, 0x8E	; 142
    264e:	87 2f       	mov	r24, r23
    2650:	76 2f       	mov	r23, r22
    2652:	05 c0       	rjmp	.+10     	; 0x265e <__floatsisf+0x5e>
    2654:	66 23       	and	r22, r22
    2656:	71 f0       	breq	.+28     	; 0x2674 <__floatsisf+0x74>
    2658:	96 e8       	ldi	r25, 0x86	; 134
    265a:	86 2f       	mov	r24, r22
    265c:	70 e0       	ldi	r23, 0x00	; 0
    265e:	60 e0       	ldi	r22, 0x00	; 0
    2660:	2a f0       	brmi	.+10     	; 0x266c <__floatsisf+0x6c>
    2662:	9a 95       	dec	r25
    2664:	66 0f       	add	r22, r22
    2666:	77 1f       	adc	r23, r23
    2668:	88 1f       	adc	r24, r24
    266a:	da f7       	brpl	.-10     	; 0x2662 <__floatsisf+0x62>
    266c:	88 0f       	add	r24, r24
    266e:	96 95       	lsr	r25
    2670:	87 95       	ror	r24
    2672:	97 f9       	bld	r25, 7
    2674:	08 95       	ret

00002676 <__fp_inf>:
    2676:	97 f9       	bld	r25, 7
    2678:	9f 67       	ori	r25, 0x7F	; 127
    267a:	80 e8       	ldi	r24, 0x80	; 128
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	60 e0       	ldi	r22, 0x00	; 0
    2680:	08 95       	ret

00002682 <__fp_nan>:
    2682:	9f ef       	ldi	r25, 0xFF	; 255
    2684:	80 ec       	ldi	r24, 0xC0	; 192
    2686:	08 95       	ret

00002688 <__fp_pscA>:
    2688:	00 24       	eor	r0, r0
    268a:	0a 94       	dec	r0
    268c:	16 16       	cp	r1, r22
    268e:	17 06       	cpc	r1, r23
    2690:	18 06       	cpc	r1, r24
    2692:	09 06       	cpc	r0, r25
    2694:	08 95       	ret

00002696 <__fp_pscB>:
    2696:	00 24       	eor	r0, r0
    2698:	0a 94       	dec	r0
    269a:	12 16       	cp	r1, r18
    269c:	13 06       	cpc	r1, r19
    269e:	14 06       	cpc	r1, r20
    26a0:	05 06       	cpc	r0, r21
    26a2:	08 95       	ret

000026a4 <__fp_round>:
    26a4:	09 2e       	mov	r0, r25
    26a6:	03 94       	inc	r0
    26a8:	00 0c       	add	r0, r0
    26aa:	11 f4       	brne	.+4      	; 0x26b0 <__fp_round+0xc>
    26ac:	88 23       	and	r24, r24
    26ae:	52 f0       	brmi	.+20     	; 0x26c4 <__fp_round+0x20>
    26b0:	bb 0f       	add	r27, r27
    26b2:	40 f4       	brcc	.+16     	; 0x26c4 <__fp_round+0x20>
    26b4:	bf 2b       	or	r27, r31
    26b6:	11 f4       	brne	.+4      	; 0x26bc <__fp_round+0x18>
    26b8:	60 ff       	sbrs	r22, 0
    26ba:	04 c0       	rjmp	.+8      	; 0x26c4 <__fp_round+0x20>
    26bc:	6f 5f       	subi	r22, 0xFF	; 255
    26be:	7f 4f       	sbci	r23, 0xFF	; 255
    26c0:	8f 4f       	sbci	r24, 0xFF	; 255
    26c2:	9f 4f       	sbci	r25, 0xFF	; 255
    26c4:	08 95       	ret

000026c6 <__fp_split3>:
    26c6:	57 fd       	sbrc	r21, 7
    26c8:	90 58       	subi	r25, 0x80	; 128
    26ca:	44 0f       	add	r20, r20
    26cc:	55 1f       	adc	r21, r21
    26ce:	59 f0       	breq	.+22     	; 0x26e6 <__fp_splitA+0x10>
    26d0:	5f 3f       	cpi	r21, 0xFF	; 255
    26d2:	71 f0       	breq	.+28     	; 0x26f0 <__fp_splitA+0x1a>
    26d4:	47 95       	ror	r20

000026d6 <__fp_splitA>:
    26d6:	88 0f       	add	r24, r24
    26d8:	97 fb       	bst	r25, 7
    26da:	99 1f       	adc	r25, r25
    26dc:	61 f0       	breq	.+24     	; 0x26f6 <__fp_splitA+0x20>
    26de:	9f 3f       	cpi	r25, 0xFF	; 255
    26e0:	79 f0       	breq	.+30     	; 0x2700 <__fp_splitA+0x2a>
    26e2:	87 95       	ror	r24
    26e4:	08 95       	ret
    26e6:	12 16       	cp	r1, r18
    26e8:	13 06       	cpc	r1, r19
    26ea:	14 06       	cpc	r1, r20
    26ec:	55 1f       	adc	r21, r21
    26ee:	f2 cf       	rjmp	.-28     	; 0x26d4 <__fp_split3+0xe>
    26f0:	46 95       	lsr	r20
    26f2:	f1 df       	rcall	.-30     	; 0x26d6 <__fp_splitA>
    26f4:	08 c0       	rjmp	.+16     	; 0x2706 <__fp_splitA+0x30>
    26f6:	16 16       	cp	r1, r22
    26f8:	17 06       	cpc	r1, r23
    26fa:	18 06       	cpc	r1, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	f1 cf       	rjmp	.-30     	; 0x26e2 <__fp_splitA+0xc>
    2700:	86 95       	lsr	r24
    2702:	71 05       	cpc	r23, r1
    2704:	61 05       	cpc	r22, r1
    2706:	08 94       	sec
    2708:	08 95       	ret

0000270a <__fp_zero>:
    270a:	e8 94       	clt

0000270c <__fp_szero>:
    270c:	bb 27       	eor	r27, r27
    270e:	66 27       	eor	r22, r22
    2710:	77 27       	eor	r23, r23
    2712:	cb 01       	movw	r24, r22
    2714:	97 f9       	bld	r25, 7
    2716:	08 95       	ret

00002718 <__mulsf3>:
    2718:	0e 94 9f 13 	call	0x273e	; 0x273e <__mulsf3x>
    271c:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__fp_round>
    2720:	0e 94 44 13 	call	0x2688	; 0x2688 <__fp_pscA>
    2724:	38 f0       	brcs	.+14     	; 0x2734 <__mulsf3+0x1c>
    2726:	0e 94 4b 13 	call	0x2696	; 0x2696 <__fp_pscB>
    272a:	20 f0       	brcs	.+8      	; 0x2734 <__mulsf3+0x1c>
    272c:	95 23       	and	r25, r21
    272e:	11 f0       	breq	.+4      	; 0x2734 <__mulsf3+0x1c>
    2730:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_inf>
    2734:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_nan>
    2738:	11 24       	eor	r1, r1
    273a:	0c 94 86 13 	jmp	0x270c	; 0x270c <__fp_szero>

0000273e <__mulsf3x>:
    273e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__fp_split3>
    2742:	70 f3       	brcs	.-36     	; 0x2720 <__mulsf3+0x8>

00002744 <__mulsf3_pse>:
    2744:	95 9f       	mul	r25, r21
    2746:	c1 f3       	breq	.-16     	; 0x2738 <__mulsf3+0x20>
    2748:	95 0f       	add	r25, r21
    274a:	50 e0       	ldi	r21, 0x00	; 0
    274c:	55 1f       	adc	r21, r21
    274e:	62 9f       	mul	r22, r18
    2750:	f0 01       	movw	r30, r0
    2752:	72 9f       	mul	r23, r18
    2754:	bb 27       	eor	r27, r27
    2756:	f0 0d       	add	r31, r0
    2758:	b1 1d       	adc	r27, r1
    275a:	63 9f       	mul	r22, r19
    275c:	aa 27       	eor	r26, r26
    275e:	f0 0d       	add	r31, r0
    2760:	b1 1d       	adc	r27, r1
    2762:	aa 1f       	adc	r26, r26
    2764:	64 9f       	mul	r22, r20
    2766:	66 27       	eor	r22, r22
    2768:	b0 0d       	add	r27, r0
    276a:	a1 1d       	adc	r26, r1
    276c:	66 1f       	adc	r22, r22
    276e:	82 9f       	mul	r24, r18
    2770:	22 27       	eor	r18, r18
    2772:	b0 0d       	add	r27, r0
    2774:	a1 1d       	adc	r26, r1
    2776:	62 1f       	adc	r22, r18
    2778:	73 9f       	mul	r23, r19
    277a:	b0 0d       	add	r27, r0
    277c:	a1 1d       	adc	r26, r1
    277e:	62 1f       	adc	r22, r18
    2780:	83 9f       	mul	r24, r19
    2782:	a0 0d       	add	r26, r0
    2784:	61 1d       	adc	r22, r1
    2786:	22 1f       	adc	r18, r18
    2788:	74 9f       	mul	r23, r20
    278a:	33 27       	eor	r19, r19
    278c:	a0 0d       	add	r26, r0
    278e:	61 1d       	adc	r22, r1
    2790:	23 1f       	adc	r18, r19
    2792:	84 9f       	mul	r24, r20
    2794:	60 0d       	add	r22, r0
    2796:	21 1d       	adc	r18, r1
    2798:	82 2f       	mov	r24, r18
    279a:	76 2f       	mov	r23, r22
    279c:	6a 2f       	mov	r22, r26
    279e:	11 24       	eor	r1, r1
    27a0:	9f 57       	subi	r25, 0x7F	; 127
    27a2:	50 40       	sbci	r21, 0x00	; 0
    27a4:	9a f0       	brmi	.+38     	; 0x27cc <__mulsf3_pse+0x88>
    27a6:	f1 f0       	breq	.+60     	; 0x27e4 <__mulsf3_pse+0xa0>
    27a8:	88 23       	and	r24, r24
    27aa:	4a f0       	brmi	.+18     	; 0x27be <__mulsf3_pse+0x7a>
    27ac:	ee 0f       	add	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	bb 1f       	adc	r27, r27
    27b2:	66 1f       	adc	r22, r22
    27b4:	77 1f       	adc	r23, r23
    27b6:	88 1f       	adc	r24, r24
    27b8:	91 50       	subi	r25, 0x01	; 1
    27ba:	50 40       	sbci	r21, 0x00	; 0
    27bc:	a9 f7       	brne	.-22     	; 0x27a8 <__mulsf3_pse+0x64>
    27be:	9e 3f       	cpi	r25, 0xFE	; 254
    27c0:	51 05       	cpc	r21, r1
    27c2:	80 f0       	brcs	.+32     	; 0x27e4 <__mulsf3_pse+0xa0>
    27c4:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_inf>
    27c8:	0c 94 86 13 	jmp	0x270c	; 0x270c <__fp_szero>
    27cc:	5f 3f       	cpi	r21, 0xFF	; 255
    27ce:	e4 f3       	brlt	.-8      	; 0x27c8 <__mulsf3_pse+0x84>
    27d0:	98 3e       	cpi	r25, 0xE8	; 232
    27d2:	d4 f3       	brlt	.-12     	; 0x27c8 <__mulsf3_pse+0x84>
    27d4:	86 95       	lsr	r24
    27d6:	77 95       	ror	r23
    27d8:	67 95       	ror	r22
    27da:	b7 95       	ror	r27
    27dc:	f7 95       	ror	r31
    27de:	e7 95       	ror	r30
    27e0:	9f 5f       	subi	r25, 0xFF	; 255
    27e2:	c1 f7       	brne	.-16     	; 0x27d4 <__mulsf3_pse+0x90>
    27e4:	fe 2b       	or	r31, r30
    27e6:	88 0f       	add	r24, r24
    27e8:	91 1d       	adc	r25, r1
    27ea:	96 95       	lsr	r25
    27ec:	87 95       	ror	r24
    27ee:	97 f9       	bld	r25, 7
    27f0:	08 95       	ret

000027f2 <pow>:
    27f2:	fa 01       	movw	r30, r20
    27f4:	ee 0f       	add	r30, r30
    27f6:	ff 1f       	adc	r31, r31
    27f8:	30 96       	adiw	r30, 0x00	; 0
    27fa:	21 05       	cpc	r18, r1
    27fc:	31 05       	cpc	r19, r1
    27fe:	a1 f1       	breq	.+104    	; 0x2868 <pow+0x76>
    2800:	61 15       	cp	r22, r1
    2802:	71 05       	cpc	r23, r1
    2804:	61 f4       	brne	.+24     	; 0x281e <pow+0x2c>
    2806:	80 38       	cpi	r24, 0x80	; 128
    2808:	bf e3       	ldi	r27, 0x3F	; 63
    280a:	9b 07       	cpc	r25, r27
    280c:	49 f1       	breq	.+82     	; 0x2860 <pow+0x6e>
    280e:	68 94       	set
    2810:	90 38       	cpi	r25, 0x80	; 128
    2812:	81 05       	cpc	r24, r1
    2814:	61 f0       	breq	.+24     	; 0x282e <pow+0x3c>
    2816:	80 38       	cpi	r24, 0x80	; 128
    2818:	bf ef       	ldi	r27, 0xFF	; 255
    281a:	9b 07       	cpc	r25, r27
    281c:	41 f0       	breq	.+16     	; 0x282e <pow+0x3c>
    281e:	99 23       	and	r25, r25
    2820:	4a f5       	brpl	.+82     	; 0x2874 <pow+0x82>
    2822:	ff 3f       	cpi	r31, 0xFF	; 255
    2824:	e1 05       	cpc	r30, r1
    2826:	31 05       	cpc	r19, r1
    2828:	21 05       	cpc	r18, r1
    282a:	19 f1       	breq	.+70     	; 0x2872 <pow+0x80>
    282c:	e8 94       	clt
    282e:	08 94       	sec
    2830:	e7 95       	ror	r30
    2832:	d9 01       	movw	r26, r18
    2834:	aa 23       	and	r26, r26
    2836:	29 f4       	brne	.+10     	; 0x2842 <pow+0x50>
    2838:	ab 2f       	mov	r26, r27
    283a:	be 2f       	mov	r27, r30
    283c:	f8 5f       	subi	r31, 0xF8	; 248
    283e:	d0 f3       	brcs	.-12     	; 0x2834 <pow+0x42>
    2840:	10 c0       	rjmp	.+32     	; 0x2862 <pow+0x70>
    2842:	ff 5f       	subi	r31, 0xFF	; 255
    2844:	70 f4       	brcc	.+28     	; 0x2862 <pow+0x70>
    2846:	a6 95       	lsr	r26
    2848:	e0 f7       	brcc	.-8      	; 0x2842 <pow+0x50>
    284a:	f7 39       	cpi	r31, 0x97	; 151
    284c:	50 f0       	brcs	.+20     	; 0x2862 <pow+0x70>
    284e:	19 f0       	breq	.+6      	; 0x2856 <pow+0x64>
    2850:	ff 3a       	cpi	r31, 0xAF	; 175
    2852:	38 f4       	brcc	.+14     	; 0x2862 <pow+0x70>
    2854:	9f 77       	andi	r25, 0x7F	; 127
    2856:	9f 93       	push	r25
    2858:	0d d0       	rcall	.+26     	; 0x2874 <pow+0x82>
    285a:	0f 90       	pop	r0
    285c:	07 fc       	sbrc	r0, 7
    285e:	90 58       	subi	r25, 0x80	; 128
    2860:	08 95       	ret
    2862:	46 f0       	brts	.+16     	; 0x2874 <pow+0x82>
    2864:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_nan>
    2868:	60 e0       	ldi	r22, 0x00	; 0
    286a:	70 e0       	ldi	r23, 0x00	; 0
    286c:	80 e8       	ldi	r24, 0x80	; 128
    286e:	9f e3       	ldi	r25, 0x3F	; 63
    2870:	08 95       	ret
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	9f 77       	andi	r25, 0x7F	; 127
    2876:	5f 93       	push	r21
    2878:	4f 93       	push	r20
    287a:	3f 93       	push	r19
    287c:	2f 93       	push	r18
    287e:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <log>
    2882:	2f 91       	pop	r18
    2884:	3f 91       	pop	r19
    2886:	4f 91       	pop	r20
    2888:	5f 91       	pop	r21
    288a:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3>
    288e:	0c 94 51 14 	jmp	0x28a2	; 0x28a2 <exp>
    2892:	29 f4       	brne	.+10     	; 0x289e <pow+0xac>
    2894:	16 f0       	brts	.+4      	; 0x289a <pow+0xa8>
    2896:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_inf>
    289a:	0c 94 85 13 	jmp	0x270a	; 0x270a <__fp_zero>
    289e:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_nan>

000028a2 <exp>:
    28a2:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fp_splitA>
    28a6:	a8 f3       	brcs	.-22     	; 0x2892 <pow+0xa0>
    28a8:	96 38       	cpi	r25, 0x86	; 134
    28aa:	a0 f7       	brcc	.-24     	; 0x2894 <pow+0xa2>
    28ac:	07 f8       	bld	r0, 7
    28ae:	0f 92       	push	r0
    28b0:	e8 94       	clt
    28b2:	2b e3       	ldi	r18, 0x3B	; 59
    28b4:	3a ea       	ldi	r19, 0xAA	; 170
    28b6:	48 eb       	ldi	r20, 0xB8	; 184
    28b8:	5f e7       	ldi	r21, 0x7F	; 127
    28ba:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3_pse>
    28be:	0f 92       	push	r0
    28c0:	0f 92       	push	r0
    28c2:	0f 92       	push	r0
    28c4:	4d b7       	in	r20, 0x3d	; 61
    28c6:	5e b7       	in	r21, 0x3e	; 62
    28c8:	0f 92       	push	r0
    28ca:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <modf>
    28ce:	e8 e8       	ldi	r30, 0x88	; 136
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	0e 94 83 14 	call	0x2906	; 0x2906 <__fp_powser>
    28d6:	4f 91       	pop	r20
    28d8:	5f 91       	pop	r21
    28da:	ef 91       	pop	r30
    28dc:	ff 91       	pop	r31
    28de:	e5 95       	asr	r30
    28e0:	ee 1f       	adc	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	49 f0       	breq	.+18     	; 0x28f8 <exp+0x56>
    28e6:	fe 57       	subi	r31, 0x7E	; 126
    28e8:	e0 68       	ori	r30, 0x80	; 128
    28ea:	44 27       	eor	r20, r20
    28ec:	ee 0f       	add	r30, r30
    28ee:	44 1f       	adc	r20, r20
    28f0:	fa 95       	dec	r31
    28f2:	e1 f7       	brne	.-8      	; 0x28ec <exp+0x4a>
    28f4:	41 95       	neg	r20
    28f6:	55 0b       	sbc	r21, r21
    28f8:	0e 94 b6 14 	call	0x296c	; 0x296c <ldexp>
    28fc:	0f 90       	pop	r0
    28fe:	07 fe       	sbrs	r0, 7
    2900:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <inverse>
    2904:	08 95       	ret

00002906 <__fp_powser>:
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	1f 93       	push	r17
    290c:	0f 93       	push	r16
    290e:	ff 92       	push	r15
    2910:	ef 92       	push	r14
    2912:	df 92       	push	r13
    2914:	7b 01       	movw	r14, r22
    2916:	8c 01       	movw	r16, r24
    2918:	68 94       	set
    291a:	06 c0       	rjmp	.+12     	; 0x2928 <__fp_powser+0x22>
    291c:	da 2e       	mov	r13, r26
    291e:	ef 01       	movw	r28, r30
    2920:	0e 94 9f 13 	call	0x273e	; 0x273e <__mulsf3x>
    2924:	fe 01       	movw	r30, r28
    2926:	e8 94       	clt
    2928:	a5 91       	lpm	r26, Z+
    292a:	25 91       	lpm	r18, Z+
    292c:	35 91       	lpm	r19, Z+
    292e:	45 91       	lpm	r20, Z+
    2930:	55 91       	lpm	r21, Z+
    2932:	a6 f3       	brts	.-24     	; 0x291c <__fp_powser+0x16>
    2934:	ef 01       	movw	r28, r30
    2936:	0e 94 01 12 	call	0x2402	; 0x2402 <__addsf3x>
    293a:	fe 01       	movw	r30, r28
    293c:	97 01       	movw	r18, r14
    293e:	a8 01       	movw	r20, r16
    2940:	da 94       	dec	r13
    2942:	69 f7       	brne	.-38     	; 0x291e <__fp_powser+0x18>
    2944:	df 90       	pop	r13
    2946:	ef 90       	pop	r14
    2948:	ff 90       	pop	r15
    294a:	0f 91       	pop	r16
    294c:	1f 91       	pop	r17
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <inverse>:
    2954:	9b 01       	movw	r18, r22
    2956:	ac 01       	movw	r20, r24
    2958:	60 e0       	ldi	r22, 0x00	; 0
    295a:	70 e0       	ldi	r23, 0x00	; 0
    295c:	80 e8       	ldi	r24, 0x80	; 128
    295e:	9f e3       	ldi	r25, 0x3F	; 63
    2960:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__divsf3>
    2964:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_inf>
    2968:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__fp_mpack>

0000296c <ldexp>:
    296c:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fp_splitA>
    2970:	d8 f3       	brcs	.-10     	; 0x2968 <inverse+0x14>
    2972:	99 23       	and	r25, r25
    2974:	c9 f3       	breq	.-14     	; 0x2968 <inverse+0x14>
    2976:	94 0f       	add	r25, r20
    2978:	51 1d       	adc	r21, r1
    297a:	a3 f3       	brvs	.-24     	; 0x2964 <inverse+0x10>
    297c:	91 50       	subi	r25, 0x01	; 1
    297e:	50 40       	sbci	r21, 0x00	; 0
    2980:	94 f0       	brlt	.+36     	; 0x29a6 <ldexp+0x3a>
    2982:	59 f0       	breq	.+22     	; 0x299a <ldexp+0x2e>
    2984:	88 23       	and	r24, r24
    2986:	32 f0       	brmi	.+12     	; 0x2994 <ldexp+0x28>
    2988:	66 0f       	add	r22, r22
    298a:	77 1f       	adc	r23, r23
    298c:	88 1f       	adc	r24, r24
    298e:	91 50       	subi	r25, 0x01	; 1
    2990:	50 40       	sbci	r21, 0x00	; 0
    2992:	c1 f7       	brne	.-16     	; 0x2984 <ldexp+0x18>
    2994:	9e 3f       	cpi	r25, 0xFE	; 254
    2996:	51 05       	cpc	r21, r1
    2998:	2c f7       	brge	.-54     	; 0x2964 <inverse+0x10>
    299a:	88 0f       	add	r24, r24
    299c:	91 1d       	adc	r25, r1
    299e:	96 95       	lsr	r25
    29a0:	87 95       	ror	r24
    29a2:	97 f9       	bld	r25, 7
    29a4:	08 95       	ret
    29a6:	5f 3f       	cpi	r21, 0xFF	; 255
    29a8:	ac f0       	brlt	.+42     	; 0x29d4 <ldexp+0x68>
    29aa:	98 3e       	cpi	r25, 0xE8	; 232
    29ac:	9c f0       	brlt	.+38     	; 0x29d4 <ldexp+0x68>
    29ae:	bb 27       	eor	r27, r27
    29b0:	86 95       	lsr	r24
    29b2:	77 95       	ror	r23
    29b4:	67 95       	ror	r22
    29b6:	b7 95       	ror	r27
    29b8:	08 f4       	brcc	.+2      	; 0x29bc <ldexp+0x50>
    29ba:	b1 60       	ori	r27, 0x01	; 1
    29bc:	93 95       	inc	r25
    29be:	c1 f7       	brne	.-16     	; 0x29b0 <ldexp+0x44>
    29c0:	bb 0f       	add	r27, r27
    29c2:	58 f7       	brcc	.-42     	; 0x299a <ldexp+0x2e>
    29c4:	11 f4       	brne	.+4      	; 0x29ca <ldexp+0x5e>
    29c6:	60 ff       	sbrs	r22, 0
    29c8:	e8 cf       	rjmp	.-48     	; 0x299a <ldexp+0x2e>
    29ca:	6f 5f       	subi	r22, 0xFF	; 255
    29cc:	7f 4f       	sbci	r23, 0xFF	; 255
    29ce:	8f 4f       	sbci	r24, 0xFF	; 255
    29d0:	9f 4f       	sbci	r25, 0xFF	; 255
    29d2:	e3 cf       	rjmp	.-58     	; 0x299a <ldexp+0x2e>
    29d4:	0c 94 86 13 	jmp	0x270c	; 0x270c <__fp_szero>
    29d8:	16 f0       	brts	.+4      	; 0x29de <ldexp+0x72>
    29da:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <__fp_mpack>
    29de:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__fp_nan>
    29e2:	68 94       	set
    29e4:	0c 94 3b 13 	jmp	0x2676	; 0x2676 <__fp_inf>

000029e8 <log>:
    29e8:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__fp_splitA>
    29ec:	a8 f3       	brcs	.-22     	; 0x29d8 <ldexp+0x6c>
    29ee:	99 23       	and	r25, r25
    29f0:	c1 f3       	breq	.-16     	; 0x29e2 <ldexp+0x76>
    29f2:	ae f3       	brts	.-22     	; 0x29de <ldexp+0x72>
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	1f 93       	push	r17
    29fa:	0f 93       	push	r16
    29fc:	ff 92       	push	r15
    29fe:	c9 2f       	mov	r28, r25
    2a00:	dd 27       	eor	r29, r29
    2a02:	88 23       	and	r24, r24
    2a04:	2a f0       	brmi	.+10     	; 0x2a10 <log+0x28>
    2a06:	21 97       	sbiw	r28, 0x01	; 1
    2a08:	66 0f       	add	r22, r22
    2a0a:	77 1f       	adc	r23, r23
    2a0c:	88 1f       	adc	r24, r24
    2a0e:	da f7       	brpl	.-10     	; 0x2a06 <log+0x1e>
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e8       	ldi	r20, 0x80	; 128
    2a16:	5f eb       	ldi	r21, 0xBF	; 191
    2a18:	9f e3       	ldi	r25, 0x3F	; 63
    2a1a:	88 39       	cpi	r24, 0x98	; 152
    2a1c:	20 f0       	brcs	.+8      	; 0x2a26 <log+0x3e>
    2a1e:	80 3e       	cpi	r24, 0xE0	; 224
    2a20:	38 f0       	brcs	.+14     	; 0x2a30 <log+0x48>
    2a22:	21 96       	adiw	r28, 0x01	; 1
    2a24:	8f 77       	andi	r24, 0x7F	; 127
    2a26:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__addsf3>
    2a2a:	e0 eb       	ldi	r30, 0xB0	; 176
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	04 c0       	rjmp	.+8      	; 0x2a38 <log+0x50>
    2a30:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <__addsf3>
    2a34:	ed ed       	ldi	r30, 0xDD	; 221
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	0e 94 83 14 	call	0x2906	; 0x2906 <__fp_powser>
    2a3c:	8b 01       	movw	r16, r22
    2a3e:	be 01       	movw	r22, r28
    2a40:	ec 01       	movw	r28, r24
    2a42:	fb 2e       	mov	r15, r27
    2a44:	6f 57       	subi	r22, 0x7F	; 127
    2a46:	71 09       	sbc	r23, r1
    2a48:	75 95       	asr	r23
    2a4a:	77 1f       	adc	r23, r23
    2a4c:	88 0b       	sbc	r24, r24
    2a4e:	99 0b       	sbc	r25, r25
    2a50:	0e 94 00 13 	call	0x2600	; 0x2600 <__floatsisf>
    2a54:	28 e1       	ldi	r18, 0x18	; 24
    2a56:	32 e7       	ldi	r19, 0x72	; 114
    2a58:	41 e3       	ldi	r20, 0x31	; 49
    2a5a:	5f e3       	ldi	r21, 0x3F	; 63
    2a5c:	0e 94 9f 13 	call	0x273e	; 0x273e <__mulsf3x>
    2a60:	af 2d       	mov	r26, r15
    2a62:	98 01       	movw	r18, r16
    2a64:	ae 01       	movw	r20, r28
    2a66:	ff 90       	pop	r15
    2a68:	0f 91       	pop	r16
    2a6a:	1f 91       	pop	r17
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	0e 94 01 12 	call	0x2402	; 0x2402 <__addsf3x>
    2a74:	0c 94 52 13 	jmp	0x26a4	; 0x26a4 <__fp_round>

00002a78 <modf>:
    2a78:	fa 01       	movw	r30, r20
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	aa 0f       	add	r26, r26
    2a7e:	bb 1f       	adc	r27, r27
    2a80:	9b 01       	movw	r18, r22
    2a82:	ac 01       	movw	r20, r24
    2a84:	bf 57       	subi	r27, 0x7F	; 127
    2a86:	28 f4       	brcc	.+10     	; 0x2a92 <modf+0x1a>
    2a88:	22 27       	eor	r18, r18
    2a8a:	33 27       	eor	r19, r19
    2a8c:	44 27       	eor	r20, r20
    2a8e:	50 78       	andi	r21, 0x80	; 128
    2a90:	20 c0       	rjmp	.+64     	; 0x2ad2 <modf+0x5a>
    2a92:	b7 51       	subi	r27, 0x17	; 23
    2a94:	90 f4       	brcc	.+36     	; 0x2aba <modf+0x42>
    2a96:	ab 2f       	mov	r26, r27
    2a98:	00 24       	eor	r0, r0
    2a9a:	46 95       	lsr	r20
    2a9c:	37 95       	ror	r19
    2a9e:	27 95       	ror	r18
    2aa0:	01 1c       	adc	r0, r1
    2aa2:	a3 95       	inc	r26
    2aa4:	d2 f3       	brmi	.-12     	; 0x2a9a <modf+0x22>
    2aa6:	00 20       	and	r0, r0
    2aa8:	71 f0       	breq	.+28     	; 0x2ac6 <modf+0x4e>
    2aaa:	22 0f       	add	r18, r18
    2aac:	33 1f       	adc	r19, r19
    2aae:	44 1f       	adc	r20, r20
    2ab0:	b3 95       	inc	r27
    2ab2:	da f3       	brmi	.-10     	; 0x2aaa <modf+0x32>
    2ab4:	0e d0       	rcall	.+28     	; 0x2ad2 <modf+0x5a>
    2ab6:	0c 94 e9 11 	jmp	0x23d2	; 0x23d2 <__subsf3>
    2aba:	61 30       	cpi	r22, 0x01	; 1
    2abc:	71 05       	cpc	r23, r1
    2abe:	a0 e8       	ldi	r26, 0x80	; 128
    2ac0:	8a 07       	cpc	r24, r26
    2ac2:	b9 46       	sbci	r27, 0x69	; 105
    2ac4:	30 f4       	brcc	.+12     	; 0x2ad2 <modf+0x5a>
    2ac6:	9b 01       	movw	r18, r22
    2ac8:	ac 01       	movw	r20, r24
    2aca:	66 27       	eor	r22, r22
    2acc:	77 27       	eor	r23, r23
    2ace:	88 27       	eor	r24, r24
    2ad0:	90 78       	andi	r25, 0x80	; 128
    2ad2:	30 96       	adiw	r30, 0x00	; 0
    2ad4:	21 f0       	breq	.+8      	; 0x2ade <modf+0x66>
    2ad6:	20 83       	st	Z, r18
    2ad8:	31 83       	std	Z+1, r19	; 0x01
    2ada:	42 83       	std	Z+2, r20	; 0x02
    2adc:	53 83       	std	Z+3, r21	; 0x03
    2ade:	08 95       	ret

00002ae0 <__fp_mpack>:
    2ae0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ae2:	31 f0       	breq	.+12     	; 0x2af0 <__fp_mpack_finite+0xc>

00002ae4 <__fp_mpack_finite>:
    2ae4:	91 50       	subi	r25, 0x01	; 1
    2ae6:	20 f4       	brcc	.+8      	; 0x2af0 <__fp_mpack_finite+0xc>
    2ae8:	87 95       	ror	r24
    2aea:	77 95       	ror	r23
    2aec:	67 95       	ror	r22
    2aee:	b7 95       	ror	r27
    2af0:	88 0f       	add	r24, r24
    2af2:	91 1d       	adc	r25, r1
    2af4:	96 95       	lsr	r25
    2af6:	87 95       	ror	r24
    2af8:	97 f9       	bld	r25, 7
    2afa:	08 95       	ret

00002afc <__ltoa_ncheck>:
    2afc:	bb 27       	eor	r27, r27
    2afe:	2a 30       	cpi	r18, 0x0A	; 10
    2b00:	51 f4       	brne	.+20     	; 0x2b16 <__ltoa_ncheck+0x1a>
    2b02:	99 23       	and	r25, r25
    2b04:	42 f4       	brpl	.+16     	; 0x2b16 <__ltoa_ncheck+0x1a>
    2b06:	bd e2       	ldi	r27, 0x2D	; 45
    2b08:	90 95       	com	r25
    2b0a:	80 95       	com	r24
    2b0c:	70 95       	com	r23
    2b0e:	61 95       	neg	r22
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	8f 4f       	sbci	r24, 0xFF	; 255
    2b14:	9f 4f       	sbci	r25, 0xFF	; 255
    2b16:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__ultoa_common>

00002b1a <__ultoa_ncheck>:
    2b1a:	bb 27       	eor	r27, r27

00002b1c <__ultoa_common>:
    2b1c:	fa 01       	movw	r30, r20
    2b1e:	a6 2f       	mov	r26, r22
    2b20:	62 17       	cp	r22, r18
    2b22:	71 05       	cpc	r23, r1
    2b24:	81 05       	cpc	r24, r1
    2b26:	91 05       	cpc	r25, r1
    2b28:	33 0b       	sbc	r19, r19
    2b2a:	30 fb       	bst	r19, 0
    2b2c:	66 f0       	brts	.+24     	; 0x2b46 <__ultoa_common+0x2a>
    2b2e:	aa 27       	eor	r26, r26
    2b30:	66 0f       	add	r22, r22
    2b32:	77 1f       	adc	r23, r23
    2b34:	88 1f       	adc	r24, r24
    2b36:	99 1f       	adc	r25, r25
    2b38:	aa 1f       	adc	r26, r26
    2b3a:	a2 17       	cp	r26, r18
    2b3c:	10 f0       	brcs	.+4      	; 0x2b42 <__ultoa_common+0x26>
    2b3e:	a2 1b       	sub	r26, r18
    2b40:	63 95       	inc	r22
    2b42:	38 50       	subi	r19, 0x08	; 8
    2b44:	a9 f7       	brne	.-22     	; 0x2b30 <__ultoa_common+0x14>
    2b46:	a0 5d       	subi	r26, 0xD0	; 208
    2b48:	aa 33       	cpi	r26, 0x3A	; 58
    2b4a:	08 f0       	brcs	.+2      	; 0x2b4e <__ultoa_common+0x32>
    2b4c:	a9 5d       	subi	r26, 0xD9	; 217
    2b4e:	a1 93       	st	Z+, r26
    2b50:	36 f7       	brtc	.-52     	; 0x2b1e <__ultoa_common+0x2>
    2b52:	b1 11       	cpse	r27, r1
    2b54:	b1 93       	st	Z+, r27
    2b56:	10 82       	st	Z, r1
    2b58:	ca 01       	movw	r24, r20
    2b5a:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <strrev>

00002b5e <sprintf>:
    2b5e:	ae e0       	ldi	r26, 0x0E	; 14
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e5 eb       	ldi	r30, 0xB5	; 181
    2b64:	f5 e1       	ldi	r31, 0x15	; 21
    2b66:	0c 94 97 18 	jmp	0x312e	; 0x312e <__prologue_saves__+0x1c>
    2b6a:	0d 89       	ldd	r16, Y+21	; 0x15
    2b6c:	1e 89       	ldd	r17, Y+22	; 0x16
    2b6e:	86 e0       	ldi	r24, 0x06	; 6
    2b70:	8c 83       	std	Y+4, r24	; 0x04
    2b72:	1a 83       	std	Y+2, r17	; 0x02
    2b74:	09 83       	std	Y+1, r16	; 0x01
    2b76:	8f ef       	ldi	r24, 0xFF	; 255
    2b78:	9f e7       	ldi	r25, 0x7F	; 127
    2b7a:	9e 83       	std	Y+6, r25	; 0x06
    2b7c:	8d 83       	std	Y+5, r24	; 0x05
    2b7e:	ae 01       	movw	r20, r28
    2b80:	47 5e       	subi	r20, 0xE7	; 231
    2b82:	5f 4f       	sbci	r21, 0xFF	; 255
    2b84:	6f 89       	ldd	r22, Y+23	; 0x17
    2b86:	78 8d       	ldd	r23, Y+24	; 0x18
    2b88:	ce 01       	movw	r24, r28
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <vfprintf>
    2b90:	2f 81       	ldd	r18, Y+7	; 0x07
    2b92:	38 85       	ldd	r19, Y+8	; 0x08
    2b94:	f8 01       	movw	r30, r16
    2b96:	e2 0f       	add	r30, r18
    2b98:	f3 1f       	adc	r31, r19
    2b9a:	10 82       	st	Z, r1
    2b9c:	2e 96       	adiw	r28, 0x0e	; 14
    2b9e:	e4 e0       	ldi	r30, 0x04	; 4
    2ba0:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__epilogue_restores__+0x1c>

00002ba4 <vfprintf>:
    2ba4:	ac e0       	ldi	r26, 0x0C	; 12
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e8 ed       	ldi	r30, 0xD8	; 216
    2baa:	f5 e1       	ldi	r31, 0x15	; 21
    2bac:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__prologue_saves__>
    2bb0:	7c 01       	movw	r14, r24
    2bb2:	6b 01       	movw	r12, r22
    2bb4:	8a 01       	movw	r16, r20
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	17 82       	std	Z+7, r1	; 0x07
    2bba:	16 82       	std	Z+6, r1	; 0x06
    2bbc:	83 81       	ldd	r24, Z+3	; 0x03
    2bbe:	81 ff       	sbrs	r24, 1
    2bc0:	bd c1       	rjmp	.+890    	; 0x2f3c <vfprintf+0x398>
    2bc2:	ce 01       	movw	r24, r28
    2bc4:	01 96       	adiw	r24, 0x01	; 1
    2bc6:	4c 01       	movw	r8, r24
    2bc8:	f7 01       	movw	r30, r14
    2bca:	93 81       	ldd	r25, Z+3	; 0x03
    2bcc:	f6 01       	movw	r30, r12
    2bce:	93 fd       	sbrc	r25, 3
    2bd0:	85 91       	lpm	r24, Z+
    2bd2:	93 ff       	sbrs	r25, 3
    2bd4:	81 91       	ld	r24, Z+
    2bd6:	6f 01       	movw	r12, r30
    2bd8:	88 23       	and	r24, r24
    2bda:	09 f4       	brne	.+2      	; 0x2bde <vfprintf+0x3a>
    2bdc:	ab c1       	rjmp	.+854    	; 0x2f34 <vfprintf+0x390>
    2bde:	85 32       	cpi	r24, 0x25	; 37
    2be0:	39 f4       	brne	.+14     	; 0x2bf0 <vfprintf+0x4c>
    2be2:	93 fd       	sbrc	r25, 3
    2be4:	85 91       	lpm	r24, Z+
    2be6:	93 ff       	sbrs	r25, 3
    2be8:	81 91       	ld	r24, Z+
    2bea:	6f 01       	movw	r12, r30
    2bec:	85 32       	cpi	r24, 0x25	; 37
    2bee:	29 f4       	brne	.+10     	; 0x2bfa <vfprintf+0x56>
    2bf0:	b7 01       	movw	r22, r14
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <fputc>
    2bf8:	e7 cf       	rjmp	.-50     	; 0x2bc8 <vfprintf+0x24>
    2bfa:	51 2c       	mov	r5, r1
    2bfc:	31 2c       	mov	r3, r1
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	20 32       	cpi	r18, 0x20	; 32
    2c02:	a0 f4       	brcc	.+40     	; 0x2c2c <vfprintf+0x88>
    2c04:	8b 32       	cpi	r24, 0x2B	; 43
    2c06:	69 f0       	breq	.+26     	; 0x2c22 <vfprintf+0x7e>
    2c08:	30 f4       	brcc	.+12     	; 0x2c16 <vfprintf+0x72>
    2c0a:	80 32       	cpi	r24, 0x20	; 32
    2c0c:	59 f0       	breq	.+22     	; 0x2c24 <vfprintf+0x80>
    2c0e:	83 32       	cpi	r24, 0x23	; 35
    2c10:	69 f4       	brne	.+26     	; 0x2c2c <vfprintf+0x88>
    2c12:	20 61       	ori	r18, 0x10	; 16
    2c14:	2c c0       	rjmp	.+88     	; 0x2c6e <vfprintf+0xca>
    2c16:	8d 32       	cpi	r24, 0x2D	; 45
    2c18:	39 f0       	breq	.+14     	; 0x2c28 <vfprintf+0x84>
    2c1a:	80 33       	cpi	r24, 0x30	; 48
    2c1c:	39 f4       	brne	.+14     	; 0x2c2c <vfprintf+0x88>
    2c1e:	21 60       	ori	r18, 0x01	; 1
    2c20:	26 c0       	rjmp	.+76     	; 0x2c6e <vfprintf+0xca>
    2c22:	22 60       	ori	r18, 0x02	; 2
    2c24:	24 60       	ori	r18, 0x04	; 4
    2c26:	23 c0       	rjmp	.+70     	; 0x2c6e <vfprintf+0xca>
    2c28:	28 60       	ori	r18, 0x08	; 8
    2c2a:	21 c0       	rjmp	.+66     	; 0x2c6e <vfprintf+0xca>
    2c2c:	27 fd       	sbrc	r18, 7
    2c2e:	27 c0       	rjmp	.+78     	; 0x2c7e <vfprintf+0xda>
    2c30:	30 ed       	ldi	r19, 0xD0	; 208
    2c32:	38 0f       	add	r19, r24
    2c34:	3a 30       	cpi	r19, 0x0A	; 10
    2c36:	78 f4       	brcc	.+30     	; 0x2c56 <vfprintf+0xb2>
    2c38:	26 ff       	sbrs	r18, 6
    2c3a:	06 c0       	rjmp	.+12     	; 0x2c48 <vfprintf+0xa4>
    2c3c:	fa e0       	ldi	r31, 0x0A	; 10
    2c3e:	5f 9e       	mul	r5, r31
    2c40:	30 0d       	add	r19, r0
    2c42:	11 24       	eor	r1, r1
    2c44:	53 2e       	mov	r5, r19
    2c46:	13 c0       	rjmp	.+38     	; 0x2c6e <vfprintf+0xca>
    2c48:	8a e0       	ldi	r24, 0x0A	; 10
    2c4a:	38 9e       	mul	r3, r24
    2c4c:	30 0d       	add	r19, r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	33 2e       	mov	r3, r19
    2c52:	20 62       	ori	r18, 0x20	; 32
    2c54:	0c c0       	rjmp	.+24     	; 0x2c6e <vfprintf+0xca>
    2c56:	8e 32       	cpi	r24, 0x2E	; 46
    2c58:	21 f4       	brne	.+8      	; 0x2c62 <vfprintf+0xbe>
    2c5a:	26 fd       	sbrc	r18, 6
    2c5c:	6b c1       	rjmp	.+726    	; 0x2f34 <vfprintf+0x390>
    2c5e:	20 64       	ori	r18, 0x40	; 64
    2c60:	06 c0       	rjmp	.+12     	; 0x2c6e <vfprintf+0xca>
    2c62:	8c 36       	cpi	r24, 0x6C	; 108
    2c64:	11 f4       	brne	.+4      	; 0x2c6a <vfprintf+0xc6>
    2c66:	20 68       	ori	r18, 0x80	; 128
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <vfprintf+0xca>
    2c6a:	88 36       	cpi	r24, 0x68	; 104
    2c6c:	41 f4       	brne	.+16     	; 0x2c7e <vfprintf+0xda>
    2c6e:	f6 01       	movw	r30, r12
    2c70:	93 fd       	sbrc	r25, 3
    2c72:	85 91       	lpm	r24, Z+
    2c74:	93 ff       	sbrs	r25, 3
    2c76:	81 91       	ld	r24, Z+
    2c78:	6f 01       	movw	r12, r30
    2c7a:	81 11       	cpse	r24, r1
    2c7c:	c1 cf       	rjmp	.-126    	; 0x2c00 <vfprintf+0x5c>
    2c7e:	98 2f       	mov	r25, r24
    2c80:	9f 7d       	andi	r25, 0xDF	; 223
    2c82:	95 54       	subi	r25, 0x45	; 69
    2c84:	93 30       	cpi	r25, 0x03	; 3
    2c86:	28 f4       	brcc	.+10     	; 0x2c92 <vfprintf+0xee>
    2c88:	0c 5f       	subi	r16, 0xFC	; 252
    2c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8c:	ff e3       	ldi	r31, 0x3F	; 63
    2c8e:	f9 83       	std	Y+1, r31	; 0x01
    2c90:	0d c0       	rjmp	.+26     	; 0x2cac <vfprintf+0x108>
    2c92:	83 36       	cpi	r24, 0x63	; 99
    2c94:	31 f0       	breq	.+12     	; 0x2ca2 <vfprintf+0xfe>
    2c96:	83 37       	cpi	r24, 0x73	; 115
    2c98:	71 f0       	breq	.+28     	; 0x2cb6 <vfprintf+0x112>
    2c9a:	83 35       	cpi	r24, 0x53	; 83
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <vfprintf+0xfc>
    2c9e:	5b c0       	rjmp	.+182    	; 0x2d56 <vfprintf+0x1b2>
    2ca0:	22 c0       	rjmp	.+68     	; 0x2ce6 <vfprintf+0x142>
    2ca2:	f8 01       	movw	r30, r16
    2ca4:	80 81       	ld	r24, Z
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	0e 5f       	subi	r16, 0xFE	; 254
    2caa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cac:	44 24       	eor	r4, r4
    2cae:	43 94       	inc	r4
    2cb0:	51 2c       	mov	r5, r1
    2cb2:	54 01       	movw	r10, r8
    2cb4:	15 c0       	rjmp	.+42     	; 0x2ce0 <vfprintf+0x13c>
    2cb6:	38 01       	movw	r6, r16
    2cb8:	f2 e0       	ldi	r31, 0x02	; 2
    2cba:	6f 0e       	add	r6, r31
    2cbc:	71 1c       	adc	r7, r1
    2cbe:	f8 01       	movw	r30, r16
    2cc0:	a0 80       	ld	r10, Z
    2cc2:	b1 80       	ldd	r11, Z+1	; 0x01
    2cc4:	26 ff       	sbrs	r18, 6
    2cc6:	03 c0       	rjmp	.+6      	; 0x2cce <vfprintf+0x12a>
    2cc8:	65 2d       	mov	r22, r5
    2cca:	70 e0       	ldi	r23, 0x00	; 0
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <vfprintf+0x12e>
    2cce:	6f ef       	ldi	r22, 0xFF	; 255
    2cd0:	7f ef       	ldi	r23, 0xFF	; 255
    2cd2:	c5 01       	movw	r24, r10
    2cd4:	2c 87       	std	Y+12, r18	; 0x0c
    2cd6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <strnlen>
    2cda:	2c 01       	movw	r4, r24
    2cdc:	83 01       	movw	r16, r6
    2cde:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ce0:	2f 77       	andi	r18, 0x7F	; 127
    2ce2:	22 2e       	mov	r2, r18
    2ce4:	17 c0       	rjmp	.+46     	; 0x2d14 <vfprintf+0x170>
    2ce6:	38 01       	movw	r6, r16
    2ce8:	f2 e0       	ldi	r31, 0x02	; 2
    2cea:	6f 0e       	add	r6, r31
    2cec:	71 1c       	adc	r7, r1
    2cee:	f8 01       	movw	r30, r16
    2cf0:	a0 80       	ld	r10, Z
    2cf2:	b1 80       	ldd	r11, Z+1	; 0x01
    2cf4:	26 ff       	sbrs	r18, 6
    2cf6:	03 c0       	rjmp	.+6      	; 0x2cfe <vfprintf+0x15a>
    2cf8:	65 2d       	mov	r22, r5
    2cfa:	70 e0       	ldi	r23, 0x00	; 0
    2cfc:	02 c0       	rjmp	.+4      	; 0x2d02 <vfprintf+0x15e>
    2cfe:	6f ef       	ldi	r22, 0xFF	; 255
    2d00:	7f ef       	ldi	r23, 0xFF	; 255
    2d02:	c5 01       	movw	r24, r10
    2d04:	2c 87       	std	Y+12, r18	; 0x0c
    2d06:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <strnlen_P>
    2d0a:	2c 01       	movw	r4, r24
    2d0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d0e:	20 68       	ori	r18, 0x80	; 128
    2d10:	22 2e       	mov	r2, r18
    2d12:	83 01       	movw	r16, r6
    2d14:	23 fc       	sbrc	r2, 3
    2d16:	1b c0       	rjmp	.+54     	; 0x2d4e <vfprintf+0x1aa>
    2d18:	83 2d       	mov	r24, r3
    2d1a:	90 e0       	ldi	r25, 0x00	; 0
    2d1c:	48 16       	cp	r4, r24
    2d1e:	59 06       	cpc	r5, r25
    2d20:	b0 f4       	brcc	.+44     	; 0x2d4e <vfprintf+0x1aa>
    2d22:	b7 01       	movw	r22, r14
    2d24:	80 e2       	ldi	r24, 0x20	; 32
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <fputc>
    2d2c:	3a 94       	dec	r3
    2d2e:	f4 cf       	rjmp	.-24     	; 0x2d18 <vfprintf+0x174>
    2d30:	f5 01       	movw	r30, r10
    2d32:	27 fc       	sbrc	r2, 7
    2d34:	85 91       	lpm	r24, Z+
    2d36:	27 fe       	sbrs	r2, 7
    2d38:	81 91       	ld	r24, Z+
    2d3a:	5f 01       	movw	r10, r30
    2d3c:	b7 01       	movw	r22, r14
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <fputc>
    2d44:	31 10       	cpse	r3, r1
    2d46:	3a 94       	dec	r3
    2d48:	f1 e0       	ldi	r31, 0x01	; 1
    2d4a:	4f 1a       	sub	r4, r31
    2d4c:	51 08       	sbc	r5, r1
    2d4e:	41 14       	cp	r4, r1
    2d50:	51 04       	cpc	r5, r1
    2d52:	71 f7       	brne	.-36     	; 0x2d30 <vfprintf+0x18c>
    2d54:	e5 c0       	rjmp	.+458    	; 0x2f20 <vfprintf+0x37c>
    2d56:	84 36       	cpi	r24, 0x64	; 100
    2d58:	11 f0       	breq	.+4      	; 0x2d5e <vfprintf+0x1ba>
    2d5a:	89 36       	cpi	r24, 0x69	; 105
    2d5c:	39 f5       	brne	.+78     	; 0x2dac <vfprintf+0x208>
    2d5e:	f8 01       	movw	r30, r16
    2d60:	27 ff       	sbrs	r18, 7
    2d62:	07 c0       	rjmp	.+14     	; 0x2d72 <vfprintf+0x1ce>
    2d64:	60 81       	ld	r22, Z
    2d66:	71 81       	ldd	r23, Z+1	; 0x01
    2d68:	82 81       	ldd	r24, Z+2	; 0x02
    2d6a:	93 81       	ldd	r25, Z+3	; 0x03
    2d6c:	0c 5f       	subi	r16, 0xFC	; 252
    2d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d70:	08 c0       	rjmp	.+16     	; 0x2d82 <vfprintf+0x1de>
    2d72:	60 81       	ld	r22, Z
    2d74:	71 81       	ldd	r23, Z+1	; 0x01
    2d76:	07 2e       	mov	r0, r23
    2d78:	00 0c       	add	r0, r0
    2d7a:	88 0b       	sbc	r24, r24
    2d7c:	99 0b       	sbc	r25, r25
    2d7e:	0e 5f       	subi	r16, 0xFE	; 254
    2d80:	1f 4f       	sbci	r17, 0xFF	; 255
    2d82:	2f 76       	andi	r18, 0x6F	; 111
    2d84:	72 2e       	mov	r7, r18
    2d86:	97 ff       	sbrs	r25, 7
    2d88:	09 c0       	rjmp	.+18     	; 0x2d9c <vfprintf+0x1f8>
    2d8a:	90 95       	com	r25
    2d8c:	80 95       	com	r24
    2d8e:	70 95       	com	r23
    2d90:	61 95       	neg	r22
    2d92:	7f 4f       	sbci	r23, 0xFF	; 255
    2d94:	8f 4f       	sbci	r24, 0xFF	; 255
    2d96:	9f 4f       	sbci	r25, 0xFF	; 255
    2d98:	20 68       	ori	r18, 0x80	; 128
    2d9a:	72 2e       	mov	r7, r18
    2d9c:	2a e0       	ldi	r18, 0x0A	; 10
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	a4 01       	movw	r20, r8
    2da2:	0e 94 02 18 	call	0x3004	; 0x3004 <__ultoa_invert>
    2da6:	a8 2e       	mov	r10, r24
    2da8:	a8 18       	sub	r10, r8
    2daa:	44 c0       	rjmp	.+136    	; 0x2e34 <vfprintf+0x290>
    2dac:	85 37       	cpi	r24, 0x75	; 117
    2dae:	29 f4       	brne	.+10     	; 0x2dba <vfprintf+0x216>
    2db0:	2f 7e       	andi	r18, 0xEF	; 239
    2db2:	b2 2e       	mov	r11, r18
    2db4:	2a e0       	ldi	r18, 0x0A	; 10
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	25 c0       	rjmp	.+74     	; 0x2e04 <vfprintf+0x260>
    2dba:	f2 2f       	mov	r31, r18
    2dbc:	f9 7f       	andi	r31, 0xF9	; 249
    2dbe:	bf 2e       	mov	r11, r31
    2dc0:	8f 36       	cpi	r24, 0x6F	; 111
    2dc2:	c1 f0       	breq	.+48     	; 0x2df4 <vfprintf+0x250>
    2dc4:	18 f4       	brcc	.+6      	; 0x2dcc <vfprintf+0x228>
    2dc6:	88 35       	cpi	r24, 0x58	; 88
    2dc8:	79 f0       	breq	.+30     	; 0x2de8 <vfprintf+0x244>
    2dca:	b4 c0       	rjmp	.+360    	; 0x2f34 <vfprintf+0x390>
    2dcc:	80 37       	cpi	r24, 0x70	; 112
    2dce:	19 f0       	breq	.+6      	; 0x2dd6 <vfprintf+0x232>
    2dd0:	88 37       	cpi	r24, 0x78	; 120
    2dd2:	21 f0       	breq	.+8      	; 0x2ddc <vfprintf+0x238>
    2dd4:	af c0       	rjmp	.+350    	; 0x2f34 <vfprintf+0x390>
    2dd6:	2f 2f       	mov	r18, r31
    2dd8:	20 61       	ori	r18, 0x10	; 16
    2dda:	b2 2e       	mov	r11, r18
    2ddc:	b4 fe       	sbrs	r11, 4
    2dde:	0d c0       	rjmp	.+26     	; 0x2dfa <vfprintf+0x256>
    2de0:	8b 2d       	mov	r24, r11
    2de2:	84 60       	ori	r24, 0x04	; 4
    2de4:	b8 2e       	mov	r11, r24
    2de6:	09 c0       	rjmp	.+18     	; 0x2dfa <vfprintf+0x256>
    2de8:	24 ff       	sbrs	r18, 4
    2dea:	0a c0       	rjmp	.+20     	; 0x2e00 <vfprintf+0x25c>
    2dec:	9f 2f       	mov	r25, r31
    2dee:	96 60       	ori	r25, 0x06	; 6
    2df0:	b9 2e       	mov	r11, r25
    2df2:	06 c0       	rjmp	.+12     	; 0x2e00 <vfprintf+0x25c>
    2df4:	28 e0       	ldi	r18, 0x08	; 8
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	05 c0       	rjmp	.+10     	; 0x2e04 <vfprintf+0x260>
    2dfa:	20 e1       	ldi	r18, 0x10	; 16
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <vfprintf+0x260>
    2e00:	20 e1       	ldi	r18, 0x10	; 16
    2e02:	32 e0       	ldi	r19, 0x02	; 2
    2e04:	f8 01       	movw	r30, r16
    2e06:	b7 fe       	sbrs	r11, 7
    2e08:	07 c0       	rjmp	.+14     	; 0x2e18 <vfprintf+0x274>
    2e0a:	60 81       	ld	r22, Z
    2e0c:	71 81       	ldd	r23, Z+1	; 0x01
    2e0e:	82 81       	ldd	r24, Z+2	; 0x02
    2e10:	93 81       	ldd	r25, Z+3	; 0x03
    2e12:	0c 5f       	subi	r16, 0xFC	; 252
    2e14:	1f 4f       	sbci	r17, 0xFF	; 255
    2e16:	06 c0       	rjmp	.+12     	; 0x2e24 <vfprintf+0x280>
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 5f       	subi	r16, 0xFE	; 254
    2e22:	1f 4f       	sbci	r17, 0xFF	; 255
    2e24:	a4 01       	movw	r20, r8
    2e26:	0e 94 02 18 	call	0x3004	; 0x3004 <__ultoa_invert>
    2e2a:	a8 2e       	mov	r10, r24
    2e2c:	a8 18       	sub	r10, r8
    2e2e:	fb 2d       	mov	r31, r11
    2e30:	ff 77       	andi	r31, 0x7F	; 127
    2e32:	7f 2e       	mov	r7, r31
    2e34:	76 fe       	sbrs	r7, 6
    2e36:	0b c0       	rjmp	.+22     	; 0x2e4e <vfprintf+0x2aa>
    2e38:	37 2d       	mov	r19, r7
    2e3a:	3e 7f       	andi	r19, 0xFE	; 254
    2e3c:	a5 14       	cp	r10, r5
    2e3e:	50 f4       	brcc	.+20     	; 0x2e54 <vfprintf+0x2b0>
    2e40:	74 fe       	sbrs	r7, 4
    2e42:	0a c0       	rjmp	.+20     	; 0x2e58 <vfprintf+0x2b4>
    2e44:	72 fc       	sbrc	r7, 2
    2e46:	08 c0       	rjmp	.+16     	; 0x2e58 <vfprintf+0x2b4>
    2e48:	37 2d       	mov	r19, r7
    2e4a:	3e 7e       	andi	r19, 0xEE	; 238
    2e4c:	05 c0       	rjmp	.+10     	; 0x2e58 <vfprintf+0x2b4>
    2e4e:	ba 2c       	mov	r11, r10
    2e50:	37 2d       	mov	r19, r7
    2e52:	03 c0       	rjmp	.+6      	; 0x2e5a <vfprintf+0x2b6>
    2e54:	ba 2c       	mov	r11, r10
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <vfprintf+0x2b6>
    2e58:	b5 2c       	mov	r11, r5
    2e5a:	34 ff       	sbrs	r19, 4
    2e5c:	0d c0       	rjmp	.+26     	; 0x2e78 <vfprintf+0x2d4>
    2e5e:	fe 01       	movw	r30, r28
    2e60:	ea 0d       	add	r30, r10
    2e62:	f1 1d       	adc	r31, r1
    2e64:	80 81       	ld	r24, Z
    2e66:	80 33       	cpi	r24, 0x30	; 48
    2e68:	11 f4       	brne	.+4      	; 0x2e6e <vfprintf+0x2ca>
    2e6a:	39 7e       	andi	r19, 0xE9	; 233
    2e6c:	09 c0       	rjmp	.+18     	; 0x2e80 <vfprintf+0x2dc>
    2e6e:	32 ff       	sbrs	r19, 2
    2e70:	06 c0       	rjmp	.+12     	; 0x2e7e <vfprintf+0x2da>
    2e72:	b3 94       	inc	r11
    2e74:	b3 94       	inc	r11
    2e76:	04 c0       	rjmp	.+8      	; 0x2e80 <vfprintf+0x2dc>
    2e78:	83 2f       	mov	r24, r19
    2e7a:	86 78       	andi	r24, 0x86	; 134
    2e7c:	09 f0       	breq	.+2      	; 0x2e80 <vfprintf+0x2dc>
    2e7e:	b3 94       	inc	r11
    2e80:	33 fd       	sbrc	r19, 3
    2e82:	13 c0       	rjmp	.+38     	; 0x2eaa <vfprintf+0x306>
    2e84:	30 ff       	sbrs	r19, 0
    2e86:	06 c0       	rjmp	.+12     	; 0x2e94 <vfprintf+0x2f0>
    2e88:	5a 2c       	mov	r5, r10
    2e8a:	b3 14       	cp	r11, r3
    2e8c:	18 f4       	brcc	.+6      	; 0x2e94 <vfprintf+0x2f0>
    2e8e:	53 0c       	add	r5, r3
    2e90:	5b 18       	sub	r5, r11
    2e92:	b3 2c       	mov	r11, r3
    2e94:	b3 14       	cp	r11, r3
    2e96:	68 f4       	brcc	.+26     	; 0x2eb2 <vfprintf+0x30e>
    2e98:	b7 01       	movw	r22, r14
    2e9a:	80 e2       	ldi	r24, 0x20	; 32
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	3c 87       	std	Y+12, r19	; 0x0c
    2ea0:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <fputc>
    2ea4:	b3 94       	inc	r11
    2ea6:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ea8:	f5 cf       	rjmp	.-22     	; 0x2e94 <vfprintf+0x2f0>
    2eaa:	b3 14       	cp	r11, r3
    2eac:	10 f4       	brcc	.+4      	; 0x2eb2 <vfprintf+0x30e>
    2eae:	3b 18       	sub	r3, r11
    2eb0:	01 c0       	rjmp	.+2      	; 0x2eb4 <vfprintf+0x310>
    2eb2:	31 2c       	mov	r3, r1
    2eb4:	34 ff       	sbrs	r19, 4
    2eb6:	12 c0       	rjmp	.+36     	; 0x2edc <vfprintf+0x338>
    2eb8:	b7 01       	movw	r22, r14
    2eba:	80 e3       	ldi	r24, 0x30	; 48
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	3c 87       	std	Y+12, r19	; 0x0c
    2ec0:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <fputc>
    2ec4:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ec6:	32 ff       	sbrs	r19, 2
    2ec8:	17 c0       	rjmp	.+46     	; 0x2ef8 <vfprintf+0x354>
    2eca:	31 fd       	sbrc	r19, 1
    2ecc:	03 c0       	rjmp	.+6      	; 0x2ed4 <vfprintf+0x330>
    2ece:	88 e7       	ldi	r24, 0x78	; 120
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	02 c0       	rjmp	.+4      	; 0x2ed8 <vfprintf+0x334>
    2ed4:	88 e5       	ldi	r24, 0x58	; 88
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	b7 01       	movw	r22, r14
    2eda:	0c c0       	rjmp	.+24     	; 0x2ef4 <vfprintf+0x350>
    2edc:	83 2f       	mov	r24, r19
    2ede:	86 78       	andi	r24, 0x86	; 134
    2ee0:	59 f0       	breq	.+22     	; 0x2ef8 <vfprintf+0x354>
    2ee2:	31 ff       	sbrs	r19, 1
    2ee4:	02 c0       	rjmp	.+4      	; 0x2eea <vfprintf+0x346>
    2ee6:	8b e2       	ldi	r24, 0x2B	; 43
    2ee8:	01 c0       	rjmp	.+2      	; 0x2eec <vfprintf+0x348>
    2eea:	80 e2       	ldi	r24, 0x20	; 32
    2eec:	37 fd       	sbrc	r19, 7
    2eee:	8d e2       	ldi	r24, 0x2D	; 45
    2ef0:	b7 01       	movw	r22, r14
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <fputc>
    2ef8:	a5 14       	cp	r10, r5
    2efa:	38 f4       	brcc	.+14     	; 0x2f0a <vfprintf+0x366>
    2efc:	b7 01       	movw	r22, r14
    2efe:	80 e3       	ldi	r24, 0x30	; 48
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <fputc>
    2f06:	5a 94       	dec	r5
    2f08:	f7 cf       	rjmp	.-18     	; 0x2ef8 <vfprintf+0x354>
    2f0a:	aa 94       	dec	r10
    2f0c:	f4 01       	movw	r30, r8
    2f0e:	ea 0d       	add	r30, r10
    2f10:	f1 1d       	adc	r31, r1
    2f12:	80 81       	ld	r24, Z
    2f14:	b7 01       	movw	r22, r14
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <fputc>
    2f1c:	a1 10       	cpse	r10, r1
    2f1e:	f5 cf       	rjmp	.-22     	; 0x2f0a <vfprintf+0x366>
    2f20:	33 20       	and	r3, r3
    2f22:	09 f4       	brne	.+2      	; 0x2f26 <vfprintf+0x382>
    2f24:	51 ce       	rjmp	.-862    	; 0x2bc8 <vfprintf+0x24>
    2f26:	b7 01       	movw	r22, r14
    2f28:	80 e2       	ldi	r24, 0x20	; 32
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <fputc>
    2f30:	3a 94       	dec	r3
    2f32:	f6 cf       	rjmp	.-20     	; 0x2f20 <vfprintf+0x37c>
    2f34:	f7 01       	movw	r30, r14
    2f36:	86 81       	ldd	r24, Z+6	; 0x06
    2f38:	97 81       	ldd	r25, Z+7	; 0x07
    2f3a:	02 c0       	rjmp	.+4      	; 0x2f40 <vfprintf+0x39c>
    2f3c:	8f ef       	ldi	r24, 0xFF	; 255
    2f3e:	9f ef       	ldi	r25, 0xFF	; 255
    2f40:	2c 96       	adiw	r28, 0x0c	; 12
    2f42:	e2 e1       	ldi	r30, 0x12	; 18
    2f44:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__epilogue_restores__>

00002f48 <strnlen_P>:
    2f48:	fc 01       	movw	r30, r24
    2f4a:	05 90       	lpm	r0, Z+
    2f4c:	61 50       	subi	r22, 0x01	; 1
    2f4e:	70 40       	sbci	r23, 0x00	; 0
    2f50:	01 10       	cpse	r0, r1
    2f52:	d8 f7       	brcc	.-10     	; 0x2f4a <strnlen_P+0x2>
    2f54:	80 95       	com	r24
    2f56:	90 95       	com	r25
    2f58:	8e 0f       	add	r24, r30
    2f5a:	9f 1f       	adc	r25, r31
    2f5c:	08 95       	ret

00002f5e <strnlen>:
    2f5e:	fc 01       	movw	r30, r24
    2f60:	61 50       	subi	r22, 0x01	; 1
    2f62:	70 40       	sbci	r23, 0x00	; 0
    2f64:	01 90       	ld	r0, Z+
    2f66:	01 10       	cpse	r0, r1
    2f68:	d8 f7       	brcc	.-10     	; 0x2f60 <strnlen+0x2>
    2f6a:	80 95       	com	r24
    2f6c:	90 95       	com	r25
    2f6e:	8e 0f       	add	r24, r30
    2f70:	9f 1f       	adc	r25, r31
    2f72:	08 95       	ret

00002f74 <strrev>:
    2f74:	dc 01       	movw	r26, r24
    2f76:	fc 01       	movw	r30, r24
    2f78:	67 2f       	mov	r22, r23
    2f7a:	71 91       	ld	r23, Z+
    2f7c:	77 23       	and	r23, r23
    2f7e:	e1 f7       	brne	.-8      	; 0x2f78 <strrev+0x4>
    2f80:	32 97       	sbiw	r30, 0x02	; 2
    2f82:	04 c0       	rjmp	.+8      	; 0x2f8c <strrev+0x18>
    2f84:	7c 91       	ld	r23, X
    2f86:	6d 93       	st	X+, r22
    2f88:	70 83       	st	Z, r23
    2f8a:	62 91       	ld	r22, -Z
    2f8c:	ae 17       	cp	r26, r30
    2f8e:	bf 07       	cpc	r27, r31
    2f90:	c8 f3       	brcs	.-14     	; 0x2f84 <strrev+0x10>
    2f92:	08 95       	ret

00002f94 <fputc>:
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
    2f9c:	fb 01       	movw	r30, r22
    2f9e:	23 81       	ldd	r18, Z+3	; 0x03
    2fa0:	21 fd       	sbrc	r18, 1
    2fa2:	03 c0       	rjmp	.+6      	; 0x2faa <fputc+0x16>
    2fa4:	8f ef       	ldi	r24, 0xFF	; 255
    2fa6:	9f ef       	ldi	r25, 0xFF	; 255
    2fa8:	28 c0       	rjmp	.+80     	; 0x2ffa <fputc+0x66>
    2faa:	22 ff       	sbrs	r18, 2
    2fac:	16 c0       	rjmp	.+44     	; 0x2fda <fputc+0x46>
    2fae:	46 81       	ldd	r20, Z+6	; 0x06
    2fb0:	57 81       	ldd	r21, Z+7	; 0x07
    2fb2:	24 81       	ldd	r18, Z+4	; 0x04
    2fb4:	35 81       	ldd	r19, Z+5	; 0x05
    2fb6:	42 17       	cp	r20, r18
    2fb8:	53 07       	cpc	r21, r19
    2fba:	44 f4       	brge	.+16     	; 0x2fcc <fputc+0x38>
    2fbc:	a0 81       	ld	r26, Z
    2fbe:	b1 81       	ldd	r27, Z+1	; 0x01
    2fc0:	9d 01       	movw	r18, r26
    2fc2:	2f 5f       	subi	r18, 0xFF	; 255
    2fc4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fc6:	31 83       	std	Z+1, r19	; 0x01
    2fc8:	20 83       	st	Z, r18
    2fca:	8c 93       	st	X, r24
    2fcc:	26 81       	ldd	r18, Z+6	; 0x06
    2fce:	37 81       	ldd	r19, Z+7	; 0x07
    2fd0:	2f 5f       	subi	r18, 0xFF	; 255
    2fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fd4:	37 83       	std	Z+7, r19	; 0x07
    2fd6:	26 83       	std	Z+6, r18	; 0x06
    2fd8:	10 c0       	rjmp	.+32     	; 0x2ffa <fputc+0x66>
    2fda:	eb 01       	movw	r28, r22
    2fdc:	09 2f       	mov	r16, r25
    2fde:	18 2f       	mov	r17, r24
    2fe0:	00 84       	ldd	r0, Z+8	; 0x08
    2fe2:	f1 85       	ldd	r31, Z+9	; 0x09
    2fe4:	e0 2d       	mov	r30, r0
    2fe6:	09 95       	icall
    2fe8:	89 2b       	or	r24, r25
    2fea:	e1 f6       	brne	.-72     	; 0x2fa4 <fputc+0x10>
    2fec:	8e 81       	ldd	r24, Y+6	; 0x06
    2fee:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff0:	01 96       	adiw	r24, 0x01	; 1
    2ff2:	9f 83       	std	Y+7, r25	; 0x07
    2ff4:	8e 83       	std	Y+6, r24	; 0x06
    2ff6:	81 2f       	mov	r24, r17
    2ff8:	90 2f       	mov	r25, r16
    2ffa:	df 91       	pop	r29
    2ffc:	cf 91       	pop	r28
    2ffe:	1f 91       	pop	r17
    3000:	0f 91       	pop	r16
    3002:	08 95       	ret

00003004 <__ultoa_invert>:
    3004:	fa 01       	movw	r30, r20
    3006:	aa 27       	eor	r26, r26
    3008:	28 30       	cpi	r18, 0x08	; 8
    300a:	51 f1       	breq	.+84     	; 0x3060 <__ultoa_invert+0x5c>
    300c:	20 31       	cpi	r18, 0x10	; 16
    300e:	81 f1       	breq	.+96     	; 0x3070 <__ultoa_invert+0x6c>
    3010:	e8 94       	clt
    3012:	6f 93       	push	r22
    3014:	6e 7f       	andi	r22, 0xFE	; 254
    3016:	6e 5f       	subi	r22, 0xFE	; 254
    3018:	7f 4f       	sbci	r23, 0xFF	; 255
    301a:	8f 4f       	sbci	r24, 0xFF	; 255
    301c:	9f 4f       	sbci	r25, 0xFF	; 255
    301e:	af 4f       	sbci	r26, 0xFF	; 255
    3020:	b1 e0       	ldi	r27, 0x01	; 1
    3022:	3e d0       	rcall	.+124    	; 0x30a0 <__ultoa_invert+0x9c>
    3024:	b4 e0       	ldi	r27, 0x04	; 4
    3026:	3c d0       	rcall	.+120    	; 0x30a0 <__ultoa_invert+0x9c>
    3028:	67 0f       	add	r22, r23
    302a:	78 1f       	adc	r23, r24
    302c:	89 1f       	adc	r24, r25
    302e:	9a 1f       	adc	r25, r26
    3030:	a1 1d       	adc	r26, r1
    3032:	68 0f       	add	r22, r24
    3034:	79 1f       	adc	r23, r25
    3036:	8a 1f       	adc	r24, r26
    3038:	91 1d       	adc	r25, r1
    303a:	a1 1d       	adc	r26, r1
    303c:	6a 0f       	add	r22, r26
    303e:	71 1d       	adc	r23, r1
    3040:	81 1d       	adc	r24, r1
    3042:	91 1d       	adc	r25, r1
    3044:	a1 1d       	adc	r26, r1
    3046:	20 d0       	rcall	.+64     	; 0x3088 <__ultoa_invert+0x84>
    3048:	09 f4       	brne	.+2      	; 0x304c <__ultoa_invert+0x48>
    304a:	68 94       	set
    304c:	3f 91       	pop	r19
    304e:	2a e0       	ldi	r18, 0x0A	; 10
    3050:	26 9f       	mul	r18, r22
    3052:	11 24       	eor	r1, r1
    3054:	30 19       	sub	r19, r0
    3056:	30 5d       	subi	r19, 0xD0	; 208
    3058:	31 93       	st	Z+, r19
    305a:	de f6       	brtc	.-74     	; 0x3012 <__ultoa_invert+0xe>
    305c:	cf 01       	movw	r24, r30
    305e:	08 95       	ret
    3060:	46 2f       	mov	r20, r22
    3062:	47 70       	andi	r20, 0x07	; 7
    3064:	40 5d       	subi	r20, 0xD0	; 208
    3066:	41 93       	st	Z+, r20
    3068:	b3 e0       	ldi	r27, 0x03	; 3
    306a:	0f d0       	rcall	.+30     	; 0x308a <__ultoa_invert+0x86>
    306c:	c9 f7       	brne	.-14     	; 0x3060 <__ultoa_invert+0x5c>
    306e:	f6 cf       	rjmp	.-20     	; 0x305c <__ultoa_invert+0x58>
    3070:	46 2f       	mov	r20, r22
    3072:	4f 70       	andi	r20, 0x0F	; 15
    3074:	40 5d       	subi	r20, 0xD0	; 208
    3076:	4a 33       	cpi	r20, 0x3A	; 58
    3078:	18 f0       	brcs	.+6      	; 0x3080 <__ultoa_invert+0x7c>
    307a:	49 5d       	subi	r20, 0xD9	; 217
    307c:	31 fd       	sbrc	r19, 1
    307e:	40 52       	subi	r20, 0x20	; 32
    3080:	41 93       	st	Z+, r20
    3082:	02 d0       	rcall	.+4      	; 0x3088 <__ultoa_invert+0x84>
    3084:	a9 f7       	brne	.-22     	; 0x3070 <__ultoa_invert+0x6c>
    3086:	ea cf       	rjmp	.-44     	; 0x305c <__ultoa_invert+0x58>
    3088:	b4 e0       	ldi	r27, 0x04	; 4
    308a:	a6 95       	lsr	r26
    308c:	97 95       	ror	r25
    308e:	87 95       	ror	r24
    3090:	77 95       	ror	r23
    3092:	67 95       	ror	r22
    3094:	ba 95       	dec	r27
    3096:	c9 f7       	brne	.-14     	; 0x308a <__ultoa_invert+0x86>
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	61 05       	cpc	r22, r1
    309c:	71 05       	cpc	r23, r1
    309e:	08 95       	ret
    30a0:	9b 01       	movw	r18, r22
    30a2:	ac 01       	movw	r20, r24
    30a4:	0a 2e       	mov	r0, r26
    30a6:	06 94       	lsr	r0
    30a8:	57 95       	ror	r21
    30aa:	47 95       	ror	r20
    30ac:	37 95       	ror	r19
    30ae:	27 95       	ror	r18
    30b0:	ba 95       	dec	r27
    30b2:	c9 f7       	brne	.-14     	; 0x30a6 <__ultoa_invert+0xa2>
    30b4:	62 0f       	add	r22, r18
    30b6:	73 1f       	adc	r23, r19
    30b8:	84 1f       	adc	r24, r20
    30ba:	95 1f       	adc	r25, r21
    30bc:	a0 1d       	adc	r26, r0
    30be:	08 95       	ret

000030c0 <eeprom_read_word>:
    30c0:	a8 e1       	ldi	r26, 0x18	; 24
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	42 e0       	ldi	r20, 0x02	; 2
    30c6:	50 e0       	ldi	r21, 0x00	; 0
    30c8:	0c 94 6d 18 	jmp	0x30da	; 0x30da <eeprom_read_blraw>

000030cc <eeprom_write_word>:
    30cc:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <eeprom_write_byte>
    30d0:	27 2f       	mov	r18, r23
    30d2:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <eeprom_write_r18>

000030d6 <eeprom_read_block>:
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22

000030da <eeprom_read_blraw>:
    30da:	fc 01       	movw	r30, r24
    30dc:	f9 99       	sbic	0x1f, 1	; 31
    30de:	fe cf       	rjmp	.-4      	; 0x30dc <eeprom_read_blraw+0x2>
    30e0:	06 c0       	rjmp	.+12     	; 0x30ee <eeprom_read_blraw+0x14>
    30e2:	f2 bd       	out	0x22, r31	; 34
    30e4:	e1 bd       	out	0x21, r30	; 33
    30e6:	f8 9a       	sbi	0x1f, 0	; 31
    30e8:	31 96       	adiw	r30, 0x01	; 1
    30ea:	00 b4       	in	r0, 0x20	; 32
    30ec:	0d 92       	st	X+, r0
    30ee:	41 50       	subi	r20, 0x01	; 1
    30f0:	50 40       	sbci	r21, 0x00	; 0
    30f2:	b8 f7       	brcc	.-18     	; 0x30e2 <eeprom_read_blraw+0x8>
    30f4:	08 95       	ret

000030f6 <eeprom_write_byte>:
    30f6:	26 2f       	mov	r18, r22

000030f8 <eeprom_write_r18>:
    30f8:	f9 99       	sbic	0x1f, 1	; 31
    30fa:	fe cf       	rjmp	.-4      	; 0x30f8 <eeprom_write_r18>
    30fc:	1f ba       	out	0x1f, r1	; 31
    30fe:	92 bd       	out	0x22, r25	; 34
    3100:	81 bd       	out	0x21, r24	; 33
    3102:	20 bd       	out	0x20, r18	; 32
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	fa 9a       	sbi	0x1f, 2	; 31
    310a:	f9 9a       	sbi	0x1f, 1	; 31
    310c:	0f be       	out	0x3f, r0	; 63
    310e:	01 96       	adiw	r24, 0x01	; 1
    3110:	08 95       	ret

00003112 <__prologue_saves__>:
    3112:	2f 92       	push	r2
    3114:	3f 92       	push	r3
    3116:	4f 92       	push	r4
    3118:	5f 92       	push	r5
    311a:	6f 92       	push	r6
    311c:	7f 92       	push	r7
    311e:	8f 92       	push	r8
    3120:	9f 92       	push	r9
    3122:	af 92       	push	r10
    3124:	bf 92       	push	r11
    3126:	cf 92       	push	r12
    3128:	df 92       	push	r13
    312a:	ef 92       	push	r14
    312c:	ff 92       	push	r15
    312e:	0f 93       	push	r16
    3130:	1f 93       	push	r17
    3132:	cf 93       	push	r28
    3134:	df 93       	push	r29
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	ca 1b       	sub	r28, r26
    313c:	db 0b       	sbc	r29, r27
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	de bf       	out	0x3e, r29	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	cd bf       	out	0x3d, r28	; 61
    3148:	09 94       	ijmp

0000314a <__epilogue_restores__>:
    314a:	2a 88       	ldd	r2, Y+18	; 0x12
    314c:	39 88       	ldd	r3, Y+17	; 0x11
    314e:	48 88       	ldd	r4, Y+16	; 0x10
    3150:	5f 84       	ldd	r5, Y+15	; 0x0f
    3152:	6e 84       	ldd	r6, Y+14	; 0x0e
    3154:	7d 84       	ldd	r7, Y+13	; 0x0d
    3156:	8c 84       	ldd	r8, Y+12	; 0x0c
    3158:	9b 84       	ldd	r9, Y+11	; 0x0b
    315a:	aa 84       	ldd	r10, Y+10	; 0x0a
    315c:	b9 84       	ldd	r11, Y+9	; 0x09
    315e:	c8 84       	ldd	r12, Y+8	; 0x08
    3160:	df 80       	ldd	r13, Y+7	; 0x07
    3162:	ee 80       	ldd	r14, Y+6	; 0x06
    3164:	fd 80       	ldd	r15, Y+5	; 0x05
    3166:	0c 81       	ldd	r16, Y+4	; 0x04
    3168:	1b 81       	ldd	r17, Y+3	; 0x03
    316a:	aa 81       	ldd	r26, Y+2	; 0x02
    316c:	b9 81       	ldd	r27, Y+1	; 0x01
    316e:	ce 0f       	add	r28, r30
    3170:	d1 1d       	adc	r29, r1
    3172:	0f b6       	in	r0, 0x3f	; 63
    3174:	f8 94       	cli
    3176:	de bf       	out	0x3e, r29	; 62
    3178:	0f be       	out	0x3f, r0	; 63
    317a:	cd bf       	out	0x3d, r28	; 61
    317c:	ed 01       	movw	r28, r26
    317e:	08 95       	ret

00003180 <_exit>:
    3180:	f8 94       	cli

00003182 <__stop_program>:
    3182:	ff cf       	rjmp	.-2      	; 0x3182 <__stop_program>
